(self.webpackChunk=self.webpackChunk||[]).push([[1842],{1842:function(n){n.exports='<blockquote> <p>es6 modules</p> </blockquote> <blockquote> <p>commonjs</p> </blockquote> <blockquote> <p>amd</p> </blockquote> <h2 id="require-with-expression">带表达式的 require 语句 <a href="#require-with-expression" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>如果你的 request 含有表达式(expressions)，就会创建一个上下文(context)，因为在编译时(compile time)并不清楚 <strong>具体</strong> 导入哪个模块。</p> <p>示例，考虑到我们有包含 <code>.ejs</code> 文件的如下目录结构：</p> <pre><code class="hljs language-bash">example_directory\n│\n└───template\n│   │   table.ejs\n│   │   table-row.ejs\n│   │\n│   └───directory\n│       │   another.ejs</code></pre> <p>当台下的 <code>require()</code> 调用被评估解析：</p> <pre><code class="hljs language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./template/\'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">\'.ejs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>webpack 解析 <code>require()</code> 调用，然后提取出如下一些信息：</p> <pre><code class="hljs language-code">Directory: ./template\nRegular expression: /^.*\\.ejs$/\n</code></pre> <p><strong>context module</strong></p> <p>会生成一个 context module(上下文模块)。会生成一个 context module(上下文模块)。它包含 <strong>目录下的所有模块</strong> 的引用，如果一个 request 符合正则表达式，就能 require 进来。该context module包含一个map（映射）对象，会把requests翻译成对应的模块id。（译者注：request参考<a href="glossary/index.htm"/*tpa=https://webpack.docschina.org/glossary/*/>概念术语</a> ）</p> <p>示例map（映射）:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"https://webpack.docschina.org/table.ejs"</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n  <span class="token property">"https://webpack.docschina.org/table-row.ejs"</span><span class="token operator">:</span> <span class="token number">43</span><span class="token punctuation">,</span>\n  <span class="token property">"https://webpack.docschina.org/directory/another.ejs"</span><span class="token operator">:</span> <span class="token number">44</span>\n<span class="token punctuation">}</span></code></pre> <p>此 context module 还包含一些访问这个 map 对象的 runtime 逻辑。</p> <p>这意味着 webpack 能够支持动态地 require，但会导致所有可能用到的模块都包含在 bundle 中。</p> <h2 id="requirecontext"><code>require.context</code> <a href="#requirecontext" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>你还可以通过 <code>require.context()</code> 函数来创建自己的 context。</p> <p>可以给这个函数传入三个参数：一个要搜索的目录，一个标记表示是否还搜索其子目录， 以及一个匹配文件的正则表达式。</p> <p>webpack 会在构建中解析代码中的 <code>require.context()</code> 。</p> <p>语法如下：</p> <pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> useSubdirectories <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> regExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/.*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token string">\'sync\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>示例：</p> <pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'./test\'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.test\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//（创建出）一个 context，其中文件来自 test 目录，request 以 `.test.js` 结尾。</span></code></pre> <pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.stories\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// （创建出）一个 context，其中所有文件都来自父文件夹及其所有子级文件夹，request 以 `.stories.js` 结尾。</span></code></pre> <blockquote class="warning"> <p>传递给 <code>require.context</code> 的参数必须是字面量(literal)！</p> </blockquote> <h3 id="context-module-api">context module API <a href="#context-module-api" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>一个 context module 会导出一个（require）函数，此函数可以接收一个参数：request。</p> <p>此导出函数有三个属性：<code>resolve</code>, <code>keys</code>, <code>id</code>。</p> <ul> <li><code>resolve</code> 是一个函数，它返回 request 被解析后得到的模块 id。</li> <li><code>keys</code> 也是一个函数，它返回一个数组，由所有可能被此 context module 处理的请求（译者注：参考下面第二段代码中的 key）组成。</li> </ul> <p>如果想引入一个文件夹下面的所有文件，或者引入能匹配一个正则表达式的所有文件，这个功能就会很有帮助，例如：</p> <pre><code class="hljs language-javascript"><span class="token keyword">function</span> <span class="token function">importAll</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">importAll</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">\'../components/\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 在构建时(build-time)，所有被 require 的模块都会被填充到 cache 对象中。</span></code></pre> <ul> <li><code>id</code> 是 context module 的模块 id. 它可能在你使用 <code>module.hot.accept</code> 时会用到。</li> </ul> '}}]);