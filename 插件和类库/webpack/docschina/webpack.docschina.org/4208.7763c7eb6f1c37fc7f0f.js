(self.webpackChunk=self.webpackChunk||[]).push([[4208],{4208:function(n){n.exports='<p>正如我们在 <a href="guides/getting-started/index.htm#using-a-configuration"/*tpa=https://webpack.docschina.org/guides/getting-started/#using-a-configuration*/>起步</a> 中提到的，在 webpack 配置中有多种方式定义 <code>entry</code> 属性。除了解释为什么它可能非常有用，我们还将向你展示__如何去__配置 <code>entry</code> 属性。</p> <h2 id="single-entry-shorthand-syntax">单个入口（简写）语法 <a href="#single-entry-shorthand-syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>用法：<code>entry: string | [string]</code></p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'path/to/my/entry/file.js\'/*tpa=https://webpack.docschina.org/path/to/my/entry/file.js*/</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>entry</code> 属性的单个入口语法，参考下面的简写：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    main<span class="token operator">:</span> <span class="token string">\'path/to/my/entry/file.js\'/*tpa=https://webpack.docschina.org/path/to/my/entry/file.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>我们也可以将一个文件路径数组传递给 <code>entry</code> 属性，这将创建一个所谓的 <strong>"multi-main entry"</strong>。在你想要一次注入多个依赖文件，并且将它们的依赖关系绘制在一个 "chunk" 中时，这种方式就很有用。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">[</span> \n    <span class="token string">\'src/file_1.js\'/*tpa=https://webpack.docschina.org/src/file_1.js*/</span><span class="token punctuation">,</span>\n    <span class="token string">\'src/file_2.js\'/*tpa=https://webpack.docschina.org/src/file_2.js*/</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>当你希望通过一个入口（例如一个库）为应用程序或工具快速设置 webpack 配置时，单一入口的语法方式是不错的选择。然而，使用这种语法方式来扩展或调整配置的灵活性不大。</p> <h2 id="object-syntax">对象语法 <a href="#object-syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>用法：<code>entry: { &#x3C;entryChunkName> string | [string] } | {}</code></p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token string">\'src/app.js\'/*tpa=https://webpack.docschina.org/src/app.js*/</span><span class="token punctuation">,</span>\n    adminApp<span class="token operator">:</span> <span class="token string">\'src/adminApp.js\'/*tpa=https://webpack.docschina.org/src/adminApp.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>对象语法会比较繁琐。然而，这是应用程序中定义入口的最可扩展的方式。</p> <blockquote class="tip"> <p>__“webpack 配置的可扩展”__是指，这些配置可以重复使用，并且可以与其他配置组合使用。这是一种流行的技术，用于将关注点从环境(environment)、构建目标(build target)、运行时(runtime)中分离。然后使用专门的工具（如 <a href="https://github.com/survivejs/webpack-merge">webpack-merge</a>）将它们合并起来。</p> </blockquote> <blockquote class="tip"> <p>当你通过插件生成入口时，你可以传递空对象 <code>{}</code> 给 <code>entry</code>。</p> </blockquote> <h2 id="scenarios">常见场景 <a href="#scenarios" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>以下列出一些入口配置和它们的实际用例：</p> <h3 id="separate-app-and-vendor-entries">分离 app(应用程序) 和 vendor(第三方库) 入口 <a href="#separate-app-and-vendor-entries" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    main<span class="token operator">:</span> <span class="token string">\'src/app.js\'/*tpa=https://webpack.docschina.org/src/app.js*/</span><span class="token punctuation">,</span>\n    vendor<span class="token operator">:</span> <span class="token string">\'src/vendor.js\'/*tpa=https://webpack.docschina.org/src/vendor.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.prod.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].[contenthash].bundle.js\'/*tpa=https://webpack.docschina.org/[name].[contenthash].bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.dev.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>__这是什么？__这是告诉 webpack 我们想要配置 2 个单独的入口点（例如上面的示例）。</p> <p>__为什么？__这样你就可以在 <code>vendor.js</code> 中存入未做修改的必要 library 或文件（例如 Bootstrap, jQuery, 图片等），然后将它们打包在一起成为单独的 chunk。内容哈希保持不变，这使浏览器可以独立地缓存它们，从而减少了加载时间。</p> <blockquote class="tip"> <p>在 webpack &#x3C; 4 的版本中，通常将 vendor 作为一个单独的入口起点添加到 entry 选项中，以将其编译为一个单独的文件（与 <code>CommonsChunkPlugin</code> 结合使用）。<br><br>而在 webpack 4 中不鼓励这样做。而是使用 <a href="configuration/optimization/index.htm#optimizationsplitchunks"/*tpa=https://webpack.docschina.org/configuration/optimization/#optimizationsplitchunks*/><code>optimization.splitChunks</code></a> 选项，将 vendor 和 app(应用程序) 模块分开，并为其创建一个单独的文件。<strong>不要</strong> 为 vendor 或其他不是执行起点创建 entry。</p> </blockquote> <h3 id="multi-page-application">多页面应用程序 <a href="#multi-page-application" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    pageOne<span class="token operator">:</span> <span class="token string">\'src/pageOne/index.js\'/*tpa=https://webpack.docschina.org/src/pageOne/index.js*/</span><span class="token punctuation">,</span>\n    pageTwo<span class="token operator">:</span> <span class="token string">\'src/pageTwo/index.js\'/*tpa=https://webpack.docschina.org/src/pageTwo/index.js*/</span><span class="token punctuation">,</span>\n    pageThree<span class="token operator">:</span> <span class="token string">\'src/pageThree/index.js\'/*tpa=https://webpack.docschina.org/src/pageThree/index.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>__这是什么？__我们告诉 webpack 需要三个独立分离的依赖图（如上面的示例）。</p> <p>__为什么？__在多页面应用程序中，server 会拉取一个新的 HTML 文档给你的客户端。页面重新加载此新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事，例如使用 <a href="configuration/optimization/index.htm#optimizationsplitchunks"/*tpa=https://webpack.docschina.org/configuration/optimization/#optimizationsplitchunks*/><code>optimization.splitChunks</code></a> 为页面间共享的应用程序代码创建 bundle。由于入口起点数量的增多，多页应用能够复用多个入口起点之间的大量代码/模块，从而可以极大地从这些技术中受益。</p> <blockquote class="tip"> <p>根据经验：每个 HTML 文档只使用一个入口起点。具体原因请参阅<a href="https://bundlers.tooling.report/code-splitting/multi-entry/#webpack">此 issue</a>。</p> </blockquote> '}}]);