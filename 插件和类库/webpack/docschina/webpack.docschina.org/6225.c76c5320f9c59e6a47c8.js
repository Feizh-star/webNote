(self.webpackChunk=self.webpackChunk||[]).push([[6225],{6225:function(n){n.exports='<p><a href="https://npmjs.com/package/cache-loader"><img src="https://img.shields.io/npm/v/cache-loader.svg" alt="npm"></a> <a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/cache-loader.svg" alt="node"></a> <a href="https://david-dm.org/webpack-contrib/cache-loader"><img src="https://david-dm.org/webpack-contrib/cache-loader.svg" alt="deps"></a> <a href="https://dev.azure.com/webpack-contrib/cache-loader/_build/latest?definitionId=4"><img src="https://dev.azure.com/webpack-contrib/cache-loader/_apis/build/status/webpack-contrib.cache-loader?branchName=master" alt="tests"></a> <a href="https://codecov.io/gh/webpack-contrib/cache-loader"><img src="https://codecov.io/gh/webpack-contrib/cache-loader/branch/master/graph/badge.svg" alt="coverage"></a> <a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a> <a href="https://packagephobia.now.sh/result?p=cache-loader"><img src="https://packagephobia.now.sh/badge?p=cache-loader" alt="size"></a></p> <p><code>cache-loader</code> 允许缓存以下 loaders 到（默认）磁盘或数据库。</p> <h2 id="getting-started">起步 <a href="#getting-started" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在开始前，需要安装 <code>cache-loader</code>:</p> <pre><code class="hljs language-console">npm install --save-dev cache-loader\n</code></pre> <p>在一些性能开销较大的 loader 之前添加 cache-loader，以便将结果缓存到磁盘里。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ext$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'cache-loader\'</span><span class="token punctuation">,</span> <span class="token operator">...</span>loaders<span class="token punctuation">]</span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote> <p>⚠️ 请注意，保存和读取这些缓存文件会有一些时间开销，所以请只对性能开销较大的 loader 使用此 loader。</p> </blockquote> <h2 id="options">选项 <a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th align="center">名称</th> <th align="center">类型</th> <th align="center">默认值</th> <th align="left">描述</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="名称"><span><strong><code>cacheContext</code></strong></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="center" data-th="默认值"><span><code>undefined</code></span></td> <td align="left" data-th="描述"><span>允许覆写默认的缓存上下文以便生成相对缓存路径。默认情况下生成的是绝对路径</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>cacheKey</code></strong></span></td> <td align="center" data-th="类型"><span><code>{Function(options, request) -> {String}}</code></span></td> <td align="center" data-th="默认值"><span><code>undefined</code></span></td> <td align="left" data-th="描述"><span>允许覆写默认的缓缓存键生成器</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>cacheDirectory</code></strong></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="center" data-th="默认值"><span><code>findCacheDir({ name: \'cache-loader\' }) or os.tmpdir()</code></span></td> <td align="left" data-th="描述"><span>提供一个可存储缓存项（供默认读/写执行使用）的缓存目录</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>cacheIdentifier</code></strong></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="center" data-th="默认值"><span><code>cache-loader:{version} {process.env.NODE_ENV}</code></span></td> <td align="left" data-th="描述"><span>提供一个用于生成哈希值的无效标识符。可以用于 loaders 的额外依赖（供默认读/写执行使用）</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>compare</code></strong></span></td> <td align="center" data-th="类型"><span><code>{Function(stats, dep) -> {Boolean}}</code></span></td> <td align="center" data-th="默认值"><span><code>undefined</code></span></td> <td align="left" data-th="描述"><span>允许覆写用于比较缓存依赖和当前读取依赖的默认函数，返回值为 <code>true</code> 时使用缓存资源</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>precision</code></strong></span></td> <td align="center" data-th="类型"><span><code>{Number}</code></span></td> <td align="center" data-th="默认值"><span><code>0</code></span></td> <td align="left" data-th="描述"><span>在将 <code>stats</code> 和 <code>dep</code> 参数传入比较函数之前，浮动于 <code>mtime</code> 的毫秒数</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>read</code></strong></span></td> <td align="center" data-th="类型"><span><code>{Function(cacheKey, callback) -> {void}}</code></span></td> <td align="center" data-th="默认值"><span><code>undefined</code></span></td> <td align="left" data-th="描述"><span>允许覆写默认从文件中读取的缓存数据</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>readOnly</code></strong></span></td> <td align="center" data-th="类型"><span><code>{Boolean}</code></span></td> <td align="center" data-th="默认值"><span><code>false</code></span></td> <td align="left" data-th="描述"><span>允许覆写默认值并将缓存设置为只读（比如某些环境中不需要缓存更新，只需要读取）</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>write</code></strong></span></td> <td align="center" data-th="类型"><span><code>{Function(cacheKey, data, callback) -> {void}}</code></span></td> <td align="center" data-th="默认值"><span><code>undefined</code></span></td> <td align="left" data-th="描述"><span>允许覆写默认向文件写入缓存数据（比如 Redis, memcached）</span></td> </tr> </tbody> </table> <h2 id="examples">示例 <a href="#examples" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="basic">基本用法 <a href="#basic" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'cache-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="database-integration">数据库集成 <a href="#database-integration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token comment">// 或其他数据库终端 - memcached，mongodb...</span>\n<span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'redis\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'crypto\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n<span class="token comment">// 连接终端</span>\n<span class="token comment">// ...</span>\n\n<span class="token keyword">const</span> <span class="token constant">BUILD_CACHE_TIMEOUT</span> <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">;</span> <span class="token comment">// 1 天</span>\n\n<span class="token keyword">function</span> <span class="token function">digest</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> crypto\n    <span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">\'md5\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">\'hex\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 生成自己的缓存键</span>\n<span class="token keyword">function</span> <span class="token function">cacheKey</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">build:cache:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">digest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 从数据库读取数据并进行转换</span>\n<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Key </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not found</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 根据缓存键向数据库写入数据</span>\n<span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'EX\'</span><span class="token punctuation">,</span> <span class="token constant">BUILD_CACHE_TIMEOUT</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'cache-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              cacheKey<span class="token punctuation">,</span>\n              read<span class="token punctuation">,</span>\n              write<span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="contributing">贡献 <a href="#contributing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>如果您尚未了解，建议您阅读以下贡献指引。</p> <p><a href="https://github.com/webpack-contrib/cache-loader/blob/master/.github/CONTRIBUTING.md">贡献</a></p> <h2 id="license">许可 <a href="#license" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/webpack-contrib/cache-loader/blob/master/LICENSE">MIT</a></p> '}}]);