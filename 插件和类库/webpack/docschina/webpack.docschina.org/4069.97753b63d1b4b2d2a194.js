(self.webpackChunk=self.webpackChunk||[]).push([[4069],{4069:function(n){n.exports='<p><a href="https://npmjs.com/package/style-loader"><img src="https://img.shields.io/npm/v/style-loader.svg" alt="npm"></a> <a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/style-loader.svg" alt="node"></a> <a href="https://david-dm.org/webpack-contrib/style-loader"><img src="https://david-dm.org/webpack-contrib/style-loader.svg" alt="deps"></a> <a href="https://github.com/webpack-contrib/style-loader/actions"><img src="https://github.com/webpack-contrib/style-loader/workflows/style-loader/badge.svg" alt="tests"></a> <a href="https://codecov.io/gh/webpack-contrib/style-loader"><img src="https://codecov.io/gh/webpack-contrib/style-loader/branch/master/graph/badge.svg" alt="coverage"></a> <a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a> <a href="https://packagephobia.now.sh/result?p=style-loader"><img src="https://packagephobia.now.sh/badge?p=style-loader" alt="size"></a></p> <p>把 CSS 插入到 DOM 中。</p> <h2 id="getting-started">快速开始 <a href="#getting-started" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>首先，你需要安装 <code>style-loader</code>：</p> <pre><code class="hljs language-console">npm install --save-dev style-loader\n</code></pre> <p>推荐将 <code>style-loader</code> 与 <a href="loaders/css-loader/index.htm"/*tpa=https://webpack.docschina.org/loaders/css-loader/*/><code>css-loader</code></a> 一起使用</p> <p>然后把 loader 添加到你的 <code>webpack</code> 配置中。比如：</p> <p><strong>style.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="options">Options <a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th align="center">名称</th> <th align="center">类型</th> <th align="center">默认值</th> <th align="left">描述</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="名称"><span><a href="#injecttype"><strong><code>injectType</code></strong></a></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="center" data-th="默认值"><span><code>styleTag</code></span></td> <td align="left" data-th="描述"><span>配置把 styles 插入到 DOM 中的方式</span></td> </tr> <tr> <td align="center" data-th="名称"><span><a href="#attributes"><strong><code>attributes</code></strong></a></span></td> <td align="center" data-th="类型"><span><code>{Object}</code></span></td> <td align="center" data-th="默认值"><span><code>{}</code></span></td> <td align="left" data-th="描述"><span>添加自定义属性到插入的标签中</span></td> </tr> <tr> <td align="center" data-th="名称"><span><a href="#insert"><strong><code>insert</code></strong></a></span></td> <td align="center" data-th="类型"><span><code>{String|Function}</code></span></td> <td align="center" data-th="默认值"><span><code>head</code></span></td> <td align="left" data-th="描述"><span>在指定的位置插入标签</span></td> </tr> <tr> <td align="center" data-th="名称"><span><a href="#base"><strong><code>base</code></strong></a></span></td> <td align="center" data-th="类型"><span><code>{Number}</code></span></td> <td align="center" data-th="默认值"><span><code>true</code></span></td> <td align="left" data-th="描述"><span>基于 (DLLPlugin) 设置 module ID</span></td> </tr> <tr> <td align="center" data-th="名称"><span><a href="#esmodule"><strong><code>esModule</code></strong></a></span></td> <td align="center" data-th="类型"><span><code>{Boolean}</code></span></td> <td align="center" data-th="默认值"><span><code>false</code></span></td> <td align="left" data-th="描述"><span>使用 ES modules 语法</span></td> </tr> <tr> <td align="center" data-th="名称"><span><a href="#modules"><strong><code>modules</code></strong></a></span></td> <td align="center" data-th="类型"><span><code>{Object}</code></span></td> <td align="center" data-th="默认值"><span><code>undefined</code></span></td> <td align="left" data-th="描述"><span>配置 CSS Modules</span></td> </tr> </tbody> </table> <h3 id="injecttype"><code>injectType</code> <a href="#injecttype" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>String</code> Default: <code>styleTag</code></p> <p>配置把 styles 插入到 DOM 中的方式。</p> <p>可选值：</p> <ul> <li><code>styleTag</code></li> <li><code>singletonStyleTag</code></li> <li><code>lazyStyleTag</code></li> <li><code>lazySingletonStyleTag</code></li> <li><code>linkTag</code></li> </ul> <h4 id="styletag"><code>styleTag</code> <a href="#styletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>通过使用多个 <code>&#x3C;style>&#x3C;/style></code> 自动把 styles 插入到 DOM 中。该方式是默认行为。</p> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">\'styles.css\'/*tpa=https://webpack.docschina.org/styles.css*/</span><span class="token punctuation">;</span></code></pre> <p>使用 Locals (CSS Modules) 的例子：</p> <p><strong>component-with-css-modules.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'styles.css\'/*tpa=https://webpack.docschina.org/styles.css*/</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> divElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndivElement<span class="token punctuation">.</span>className <span class="token operator">=</span> styles<span class="token punctuation">[</span><span class="token string">\'my-class\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>导入的对象保存着所有的 locals (class names)。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token comment">// 由于是默认行为，`injectType` 选项可以省略</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">\'styleTag\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此 loader 插入的 style 效果如下：</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.bar</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="singletonstyletag"><code>singletonStyleTag</code> <a href="#singletonstyletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>通过使用一个 <code>&#x3C;style>&#x3C;/style></code> 来自动把 styles 插入到 DOM 中。</p> <blockquote> <p>⚠ Source map 不起作用</p> </blockquote> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">\'styles.css\'/*tpa=https://webpack.docschina.org/styles.css*/</span><span class="token punctuation">;</span></code></pre> <p><strong>component-with-css-modules.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'styles.css\'/*tpa=https://webpack.docschina.org/styles.css*/</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> divElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndivElement<span class="token punctuation">.</span>className <span class="token operator">=</span> styles<span class="token punctuation">[</span><span class="token string">\'my-class\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>导入的对象保存着所有的 locals (class names)。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">\'singletonStyleTag\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>loader 插入的 styles 如下：</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.bar</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="lazystyletag"><code>lazyStyleTag</code> <a href="#lazystyletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>在需要时使用多个 <code>&#x3C;style>&#x3C;/style></code> 把 styles 插入到 DOM 中。</p> <p>推荐 lazy style 遵循使用 <code>.lazy.css</code> 作为后缀的命名约定，<code>style-loader</code> 基本用法是使用 <code>.css</code> 作为文件后缀（其他文件也一样，比如：<code>.lazy.less</code> 和 <code>.less</code>）。</p> <p>当使用 <code>lazyStyleTag</code> 时，<code>style-loader</code> 将惰性插入 styles，在需要使用 styles 时可以通过 <code>style.use()</code> / <code>style.unuse()</code> 使 style 可用。</p> <blockquote> <p>⚠️ 调用 <code>unuse</code> 多于 <code>use</code> 时，其表现会不确定。因此，请不要这么做。</p> </blockquote> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'styles.lazy.css\'/*tpa=https://webpack.docschina.org/styles.lazy.css*/</span><span class="token punctuation">;</span>\n\nstyles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 要移除 styles 时你可以调用</span>\n<span class="token comment">// styles.unuse();</span></code></pre> <p><strong>component-with-css-modules.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'styles.lazy.css\'/*tpa=https://webpack.docschina.org/styles.lazy.css*/</span><span class="token punctuation">;</span>\n\nstyles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> divElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndivElement<span class="token punctuation">.</span>className <span class="token operator">=</span> styles<span class="token punctuation">.</span>locals<span class="token punctuation">[</span><span class="token string">\'my-class\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>导入的对象的 <code>locals</code> 属性保存着所有的 locals (class names)。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.lazy\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.lazy\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">\'lazyStyleTag\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此 loader 插入的 style 效果如下：</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.bar</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="lazysingletonstyletag"><code>lazySingletonStyleTag</code> <a href="#lazysingletonstyletag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>在必要时，使用 <code>&#x3C;style>&#x3C;/style></code> 把 style 插入的 DOM 中。</p> <p>推荐 lazy style 遵循使用 <code>.lazy.css</code> 作为后缀的命名约定，<code>style-loader</code> 基本用法是使用 <code>.css</code> 作为文件后缀（其他文件也一样，比如：<code>.lazy.less</code> 和 <code>.less</code>）。</p> <p>当使用 <code>lazySingletonStyleTag</code> 时，<code>style-loader</code> 将惰性插入 styles，在需要使用 styles 时可以通过 <code>style.use()</code> / <code>style.unuse()</code> 使 style 可用。</p> <blockquote> <p>⚠️ Source maps 不起作用</p> </blockquote> <blockquote> <p>⚠️ 调用 <code>unuse</code> 多于 <code>use</code> 时，其表现会不确定。因此，请不要这么做。</p> </blockquote> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'styles.css\'/*tpa=https://webpack.docschina.org/styles.css*/</span><span class="token punctuation">;</span>\n\nstyles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 要移除 styles 时你可以调用</span>\n<span class="token comment">// styles.unuse();</span></code></pre> <p><strong>component-with-css-modules.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'styles.lazy.css\'/*tpa=https://webpack.docschina.org/styles.lazy.css*/</span><span class="token punctuation">;</span>\n\nstyles<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> divElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndivElement<span class="token punctuation">.</span>className <span class="token operator">=</span> styles<span class="token punctuation">.</span>locals<span class="token punctuation">[</span><span class="token string">\'my-class\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>导入的对象的 <code>locals</code> 属性保存着所有的 locals (class names)。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.lazy\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.lazy\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">\'lazySingletonStyleTag\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此 loader 生成的代码如下：</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.bar</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="linktag"><code>linkTag</code> <a href="#linktag" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>使用多个 <code>&#x3C;link rel="stylesheet" href="path/to/file.css"/*tpa=https://webpack.docschina.org/path/to/file.css*/></code> 将 styles 插入到 DOM 中。</p> <blockquote> <p>ℹ️ 此 loader 会在运行时使用 JavaScript 动态地插入 <code>&#x3C;link href="path/to/file.css"/*tpa=https://webpack.docschina.org/path/to/file.css*/ rel="stylesheet"></code>。要静态插入 <code>&#x3C;link href="path/to/file.css"/*tpa=https://webpack.docschina.org/path/to/file.css*/ rel="stylesheet"></code> 时请使用<a href="plugins/mini-css-extract-plugin/index.htm"/*tpa=https://webpack.docschina.org/plugins/mini-css-extract-plugin/*/>MiniCssExtractPlugin</a>。</p> </blockquote> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">\'styles.css\'/*tpa=https://webpack.docschina.org/styles.css*/</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'other-styles.css\'/*tpa=https://webpack.docschina.org/other-styles.css*/</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.link\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> injectType<span class="token operator">:</span> <span class="token string">\'linkTag\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'file-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此 loader 生成的代码如下：</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path/to/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path/to/other-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre> <h3 id="attributes"><code>attributes</code> <a href="#attributes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Object</code> Default: <code>{}</code></p> <p>如果配置了 <code>attributes</code>，<code>style-loader</code> 将会在 <code>&#x3C;style></code> / <code>&#x3C;link></code> 上绑定指定的 <code>attributes</code> 以及它们的值。</p> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">\'file.css\'/*tpa=https://webpack.docschina.org/file.css*/</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> attributes<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">\'id\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h3 id="insert"><code>insert</code> <a href="#insert" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>String|Function</code> Default: <code>head</code></p> <p>默认情况下，除非指定 <code>insert</code>，否则 <code>style-loader</code> 会把 <code>&#x3C;style></code> / <code>&#x3C;link></code> 添加到页面的 <code>&#x3C;head></code> 标签尾部。</p> <p>这会使得 <code>style-loader</code> 创建的 CSS 比 <code>&#x3C;head></code> 标签内已经存在的 CSS 拥有更高的优先级。 当默认行为不能满足你的需求时，你可以使用其他值，但我们不推荐这么做。</p> <p>如果你指定 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement">iframe</a> 作为插入的目标时，请确保你有足够的访问权限，styles 将会被插入到 content document 的 head 标签中。</p> <h4 id="string"><code>String</code> <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>配置 styles 插入 DOM 的自定义 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">query selector</a>。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              insert<span class="token operator">:</span> <span class="token string">\'body\'</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>&#x3C;style></code> / <code>&#x3C;link></code> 元素将会被插入到 <code>body</code> 标签底部。</p> <h4 id="function"><code>Function</code> <a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>允许覆盖默认行为并把 styles 插入到任意位置。</p> <blockquote> <p>⚠ 不要忘了这个函数会在浏览器中调用，由于不是所有浏览器都支持最新的 ECMA 特性，如：<code>let</code>，<code>const</code>，<code>allow function expression</code> 等，我们推荐只使用 ECMA 5 特性，但这取决于你想要支持的浏览器版本。</p> </blockquote> <blockquote> <p>⚠ 不要忘了版本较旧的浏览器中某些 DOM 方法并不可用，所以我们推荐只使用 <a href="https://caniuse.com/#search=dom%20core">DOM core level 2 properties</a>，但这取决于想要支持的浏览器版本。</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">insertAtTop</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'head\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// eslint-disable-next-line no-underscore-dangle</span>\n                <span class="token keyword">var</span> lastInsertedElement <span class="token operator">=</span>\n                  window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader<span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastInsertedElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token comment">// eslint-disable-next-line no-underscore-dangle</span>\n                window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader <span class="token operator">=</span> element<span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>在 <code>head</code> 标签顶部插入styles。</p> <h3 id="base"><code>base</code> <a href="#base" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这个配置主要是作为使用 <a href="https://robertknight.github.io/posts/webpack-dll-plugins/">DllPlugin</a> 时出现 <a href="https://github.com/webpack-contrib/style-loader/issues/163">css clashes</a> 问题时的解决方案。<code>base</code> 允许你通过指定一个比 <em>DllPlugin1</em> 使用的 css 模块 id 大的值，来避免应用程序中的 css (或者 DllPlugin2 的 css) 被 DllPlugin1 中的 css 覆盖问题。比如：</p> <p><strong>webpack.dll1.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.dll2.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> base<span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.app.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> base<span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="esmodule"><code>esModule</code> <a href="#esmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Type: <code>Boolean</code> Default: <code>true</code></p> <p>默认情况下，<code>style-loader</code> 生成使用 ES 模块语法的 JS 模块。在某些情况下使用 ES 模块语法更好，比如：<a href="plugins/module-concatenation-plugin/index.htm"/*tpa=https://webpack.docschina.org/plugins/module-concatenation-plugin/*/>module concatenation</a> 和 <a href="guides/tree-shaking/index.htm"/*tpa=https://webpack.docschina.org/guides/tree-shaking/*/>tree shaking</a> 时。</p> <p>你可以使用下面的配置启用 CommonJS 模块语法：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="modules"><code>modules</code> <a href="#modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>Object</code> 默认值：<code>undefined</code></p> <p>配置 CSS 模块。</p> <h4 id="namedexport"><code>namedExport</code> <a href="#namedexport" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>类型：<code>Boolean</code> 默认值：<code>false</code></p> <p>启用/禁用本地 ES 模块的命名导出功能。</p> <blockquote> <p>⚠ 本地命名导出时，会将其名称转换为 <code>camelCase</code> 的形式。</p> </blockquote> <blockquote> <p>⚠ 并且不允许在 css 的 class 名中使用 JavaScript 的保留字。</p> </blockquote> <blockquote> <p>⚠ 在 <code>css-loader</code> 和 <code>style-loader</code> 中，选项 <code>esModule</code> 和 <code>modules.namedExport</code> 应启用。</p> </blockquote> <p><strong>styles.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.foo-baz</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bar</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> fooBaz<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'styles.css\'/*tpa=https://webpack.docschina.org/styles.css*/</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooBaz<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>你可以使用如下方法为 ES 模块启用命名导出功能：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              esModule<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n              modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n                namedExport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              esModule<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n              modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n                namedExport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="examples">示例 <a href="#examples" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>当前面的 loader 生成 source map 时，此 loader 会向 source map 中自动注入。</p> <p>因此，想要生成 source map，则需将 style-loader 之前执行 loader 的 <code>sourceMap</code> 选项设置为<code>true</code>。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> sourceMap<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="nonce">Nonce <a href="#nonce" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>有两种方式使用 <code>nonce</code>：</p> <ul> <li>使用 <code>attributes</code> 选项</li> <li>使用 <code>__webpack_nonce__</code> 变量</li> </ul> <blockquote> <p>⚠ <code>attributes</code> 拥有比 <code>__webpack_nonce__</code> 更高的优先级</p> </blockquote> <h4 id="attributes"><code>attributes</code> <a href="#attributes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              attributes<span class="token operator">:</span> <span class="token punctuation">{</span>\n                nonce<span class="token operator">:</span> <span class="token string">\'12345678\'</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此 loader 生成代码如下：</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12345678<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="webpack_nonce"><code>__webpack_nonce__</code> {#<strong>webpack_nonce</strong>}<a href="#webpack_nonce" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>create-nonce.js</strong></p> <pre><code class="hljs language-js">__webpack_nonce__ <span class="token operator">=</span> <span class="token string">\'12345678\'</span><span class="token punctuation">;</span></code></pre> <p><strong>component.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">\'create-nonce.js\'/*tpa=https://webpack.docschina.org/create-nonce.js*/</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/</span><span class="token punctuation">;</span></code></pre> <p>使用 <code>require</code> 的示例：</p> <p><strong>component.js</strong></p> <pre><code class="hljs language-js">__webpack_nonce__ <span class="token operator">=</span> <span class="token string">\'12345678\'</span><span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此 loader 生成代码如下：</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>style</span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12345678<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.foo</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>style</span><span class="token punctuation">></span></span></code></pre> <h4 id="insert-styles-at-top">Insert styles at top <a href="#insert-styles-at-top" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>在 <code>head</code> 标签顶部插入 style。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">insertAtTop</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'head\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">var</span> lastInsertedElement <span class="token operator">=</span>\n                  window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader<span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastInsertedElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader <span class="token operator">=</span> element<span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="insert-styles-before-target-element">在目标元素前插入 style <a href="#insert-styles-before-target-element" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>在 <code>#id</code> 元素前面插入 style。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">insertBeforeAt</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'head\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#id\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">const</span> lastInsertedElement <span class="token operator">=</span>\n                  window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader<span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastInsertedElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> lastInsertedElement<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                  parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                window<span class="token punctuation">.</span>_lastElementInsertedByStyleLoader <span class="token operator">=</span> element<span class="token punctuation">;</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="contributing">Contributing <a href="#contributing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Please take a moment to read our contributing guidelines if you haven\'t yet done so.</p> <p><a href="https://github.com/webpack-contrib/style-loader/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p> <h2 id="license">License <a href="#license" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/webpack-contrib/style-loader/blob/master/LICENSE">MIT</a></p> '}}]);