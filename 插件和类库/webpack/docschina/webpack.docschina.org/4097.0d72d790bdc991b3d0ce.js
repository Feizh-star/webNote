(self.webpackChunk=self.webpackChunk||[]).push([[4097],{4097:function(n){n.exports='<p><code>DefinePlugin</code> 允许在 <strong>编译时</strong> 创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。这就是 <code>DefinePlugin</code> 的发光之处，设置好它，就可以忘掉开发环境和生产环境的构建规则。</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 定义...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="usage">Usage <a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>传递给 <code>DefinePlugin</code> 的每个键都是一个标识符或多个以 <code>.</code> 连接的标识符。</p> <ul> <li>如果该值为字符串，它将被作为代码片段来使用。</li> <li>如果该值不是字符串，则将被转换成字符串（包括函数方法）。</li> <li>如果值是一个对象，则它所有的键将使用相同方法定义。</li> <li>如果键添加 <code>typeof</code> 作为前缀，它会被定义为 typeof 调用。</li> </ul> <p>这些值将内联到代码中，从而允许通过代码压缩来删除冗余的条件判断。</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token constant">PRODUCTION</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token constant">VERSION</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">\'5fa3b9\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token constant">BROWSER_SUPPORTS_HTML5</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token constant">TWO</span><span class="token operator">:</span> <span class="token string">\'1+1\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'typeof window\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">\'object\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">\'process.env.NODE_ENV\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Running App version \'</span> <span class="token operator">+</span> <span class="token constant">VERSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">BROWSER_SUPPORTS_HTML5</span><span class="token punctuation">)</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html5shiv\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>在为 <code>process</code> 定义值时，<code>\'process.env.NODE_ENV\': JSON.stringify(\'production\')</code> 会比 <code>process: { env: { NODE_ENV: JSON.stringify(\'production\') } }</code> 更好，后者会覆盖 <code>process</code> 对象，这可能会破坏与某些模块的兼容性，因为这些模块会在 process 对象上定义其他值。</p> </blockquote> <blockquote class="tip"> <p>请注意，由于本插件会直接替换文本，因此提供的值必须在字符串本身中再包含一个 <strong>实际的引号</strong> 。通常，可以使用类似 <code>\'"production"\'</code> 这样的替换引号，或者直接用 <code>JSON.stringify(\'production\')</code>。</p> </blockquote> <pre><code class="hljs language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">PRODUCTION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debug info\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">PRODUCTION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production log\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>未经 webpack 压缩过的代码：</p> <pre><code class="hljs language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debug info\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production log\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>经过压缩后：</p> <pre><code class="hljs language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Production log\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="feature-flags">Feature Flags <a href="#feature-flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>使用 <a href="https://en.wikipedia.org/wiki/Feature_toggle">feature flags</a> 在生产/开发构建中可以启用/禁用项目的不同特性。</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'NICE_FEATURE\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">\'EXPERIMENTAL_FEATURE\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="service-urls">Service URL <a href="#service-urls" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在生产或开发构建中使用不同的服务 URL：</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'SERVICE_URL\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">\'https://dev.example.com\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="runtime-values-via-runtimevalue">Runtime values via <code>runtimeValue</code> <a href="#runtime-values-via-runtimevalue" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>function (getterFunction, [string]) => getterFunction()</code></p> <p>It is possible to define variables with values that rely on files and will be re-evaluated when such files change in the file system. This means webpack will rebuild when such watched files change.</p> <p>Arguments:</p> <ul> <li>The first argument of the <code>webpack.DefinePlugin.runtimeValue</code> is a <code>function</code> that should return the value to be assigned to the definition.</li> <li>The second argument is an array of file paths to watch for. Pass <code>true</code> instead of <code>[string]</code> here to flag the module as uncacheable.</li> </ul> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> fileDep <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'https://webpack.docschina.org/sample.txt\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token constant">BUILT_AT</span><span class="token operator">:</span> webpack<span class="token punctuation">.</span>DefinePlugin<span class="token punctuation">.</span><span class="token function">runtimeValue</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span>now<span class="token punctuation">,</span> <span class="token punctuation">[</span>fileDep<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The value of <code>BUILT_AT</code> would be the time at which the <code>\'https://webpack.docschina.org/sample.txt\'</code> was last updated in the file system, e.g. <code>1597953013291</code>.</p> '}}]);