(self.webpackChunk=self.webpackChunk||[]).push([[4919],{4919:function(n){n.exports='<p>The <code>exports</code> field in the <code>package.json</code> of a package allows to declare which module should be used when using module requests like <code>import "package"</code> or <code>import "package/sub/path"</code>. It replaces the default implementation that returns <code>main</code> field resp. <code>index.js</code> files for <code>"package"</code> and the file system lookup for <code>"package/sub/path"</code>.</p> <p>When the <code>exports</code> field is specified, only these module requests are available. Any other requests will lead to a ModuleNotFound Error.</p> <h2 id="General-syntax">General syntax<a href="#General-syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>In general the <code>exports</code> field should contain an object where each properties specifies a sub path of the module request. For the examples above the following properties could be used: <code>"."</code> for <code>import "package"</code> and <code>"./sub/path"</code> for <code>import "package/sub/path"</code>. Properties ending with a <code>/</code> will forward a request with this prefix to the old file system lookup algorithm.</p> <p>An example:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"."</span><span class="token operator">:</span> <span class="token string">"main.js"/*tpa=https://webpack.docschina.org/main.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"./sub/path"</span><span class="token operator">:</span> <span class="token string">"secondary.js"/*tpa=https://webpack.docschina.org/secondary.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"./prefix/"</span><span class="token operator">:</span> <span class="token string">"./directory/"</span><span class="token punctuation">,</span>\n    <span class="token property">"./prefix/deep/"</span><span class="token operator">:</span> <span class="token string">"./other-directory/"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <table> <thead> <tr> <th>Module request</th> <th>Result</th> </tr> </thead> <tbody> <tr> <td data-th="Module request"><span><code>package</code></span></td> <td data-th="Result"><span><code>.../package/main.js</code></span></td> </tr> <tr> <td data-th="Module request"><span><code>package/sub/path</code></span></td> <td data-th="Result"><span><code>.../package/secondary.js</code></span></td> </tr> <tr> <td data-th="Module request"><span><code>package/prefix/some/file.js</code></span></td> <td data-th="Result"><span><code>.../package/directory/some/file.js</code></span></td> </tr> <tr> <td data-th="Module request"><span><code>package/prefix/deep/file.js</code></span></td> <td data-th="Result"><span><code>.../package/other-directory/file.js</code></span></td> </tr> <tr> <td data-th="Module request"><span><code>package/main.js</code></span></td> <td data-th="Result"><span>Error</span></td> </tr> </tbody> </table> <h2 id="Alternatives">Alternatives<a href="#Alternatives" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Instead of providing a single result, the package author may provide a list of results. In such a scenario this list is tried in order and the first valid result will be used.</p> <p>Note: Only the first valid result will be used, not all valid results.</p> <p>Example:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"./things/"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./good-things/"</span><span class="token punctuation">,</span> <span class="token string">"./bad-things/"</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>Here <code>package/things/apple</code> might be found in <code>.../package/good-things/apple</code> or in <code>.../package/bad-things/apple</code>.</p> <h2 id="Conditional-syntax">Conditional syntax<a href="#Conditional-syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Instead of providing results directly in the <code>exports</code> field, the package author may let the module system choose one based on conditions about the environment.</p> <p>In this case an object mapping conditions to results should be used. Conditions are tried in object order. Conditions that contain invalid results are skipped. Conditions might be nested to create a logical AND. The last condition in the object might be the special <code>"default"</code> condition, which is always matched.</p> <p>Example:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"."</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"red"</span><span class="token operator">:</span> <span class="token string">"stop.js"/*tpa=https://webpack.docschina.org/stop.js*/</span><span class="token punctuation">,</span>\n      <span class="token property">"yellow"</span><span class="token operator">:</span> <span class="token string">"stop.js"/*tpa=https://webpack.docschina.org/stop.js*/</span><span class="token punctuation">,</span>\n      <span class="token property">"green"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"free"</span><span class="token operator">:</span> <span class="token string">"drive.js"/*tpa=https://webpack.docschina.org/drive.js*/</span><span class="token punctuation">,</span>\n        <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"wait.js"/*tpa=https://webpack.docschina.org/wait.js*/</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"drive-carefully.js"/*tpa=https://webpack.docschina.org/drive-carefully.js*/</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>This translates to something like:</p> <pre><code class="hljs language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>red <span class="token operator">&#x26;&#x26;</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'stop.js\'/*tpa=https://webpack.docschina.org/stop.js*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'stop.js\'/*tpa=https://webpack.docschina.org/stop.js*/</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>yellow <span class="token operator">&#x26;&#x26;</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'stop.js\'/*tpa=https://webpack.docschina.org/stop.js*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'stop.js\'/*tpa=https://webpack.docschina.org/stop.js*/</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>green<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>free <span class="token operator">&#x26;&#x26;</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'drive.js\'/*tpa=https://webpack.docschina.org/drive.js*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'drive.js\'/*tpa=https://webpack.docschina.org/drive.js*/</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'wait.js\'/*tpa=https://webpack.docschina.org/wait.js*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'wait.js\'/*tpa=https://webpack.docschina.org/wait.js*/</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'drive-carefully.js\'/*tpa=https://webpack.docschina.org/drive-carefully.js*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'drive-carefully.js\'/*tpa=https://webpack.docschina.org/drive-carefully.js*/</span><span class="token punctuation">;</span>\n<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ModuleNotFoundError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The available conditions vary depending on the module system and tool used.</p> <h2 id="Abbreviation">Abbreviation<a href="#Abbreviation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>When only a single entry (<code>"."</code>) into the package should be supported the <code>{ ".": ... }</code> object nesting can be omitted:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/index.mjs"</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"red"</span><span class="token operator">:</span> <span class="token string">"stop.js"/*tpa=https://webpack.docschina.org/stop.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"green"</span><span class="token operator">:</span> <span class="token string">"drive.js"/*tpa=https://webpack.docschina.org/drive.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="Notes-about-ordering">Notes about ordering<a href="#Notes-about-ordering" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>In an object where each key is a condition, order of properties is significant. Conditions are handled in the order they are specified.</p> <p>Example: <code>{ "red": "stop.js"/*tpa=https://webpack.docschina.org/stop.js*/, "green": "drive.js"/*tpa=https://webpack.docschina.org/drive.js*/ }</code> != <code>{ "green": "drive.js"/*tpa=https://webpack.docschina.org/drive.js*/, "red": "stop.js"/*tpa=https://webpack.docschina.org/stop.js*/ }</code> (when both <code>red</code> and <code>green</code> conditions are set, first property will be used)</p> <p>In an object where each key is a subpath, order of properties (subpaths) is not significant. More specific paths are preferred over less specific ones.</p> <p>Example: <code>{ "./a/": "./x/", "./a/b/": "./y/", "./a/b/c": "./z" }</code> == <code>{ "./a/b/c": "./z", "./a/b/": "./y/", "./a/": "./x/" }</code> (order will always be: <code>./a/b/c</code> > <code>./a/b/</code> > <code>./a/</code>)</p> <p><code>exports</code> field is preferred over other package entry fields like <code>main</code>, <code>module</code>, <code>browser</code> or custom ones.</p> <h2 id="Conditions">Conditions<a href="#Conditions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="Reference-syntax">Reference syntax<a href="#Reference-syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>One of these conditions is set depending on the syntax used to reference the module:</p> <table> <thead> <tr> <th>Condition</th> <th>Description</th> <th>Supported by</th> </tr> </thead> <tbody> <tr> <td data-th="Condition"><span><code>import</code></span></td> <td data-th="Description"><span>Request is issued from ESM syntax or similar.</span></td> <td data-th="Supported by"><span>webpack, Node.js</span></td> </tr> <tr> <td data-th="Condition"><span><code>require</code></span></td> <td data-th="Description"><span>Request is issued from CommonJs/AMD syntax or similar.</span></td> <td data-th="Supported by"><span>webpack, Node.js</span></td> </tr> <tr> <td data-th="Condition"><span><code>style</code></span></td> <td data-th="Description"><span>Request is issued from a stylesheet reference.</span></td> <td></td> </tr> <tr> <td data-th="Condition"><span><code>sass</code></span></td> <td data-th="Description"><span>Request is issued from a sass stylesheet reference.</span></td> <td></td> </tr> <tr> <td data-th="Condition"><span><code>asset</code></span></td> <td data-th="Description"><span>Request is issued from a asset reference.</span></td> <td></td> </tr> <tr> <td data-th="Condition"><span><code>script</code></span></td> <td data-th="Description"><span>Request is issued from a normal script tag without module system.</span></td> <td></td> </tr> </tbody> </table> <p>These conditions might also be set additionally:</p> <table> <thead> <tr> <th>Condition</th> <th>Description</th> <th>Supported by</th> </tr> </thead> <tbody> <tr> <td data-th="Condition"><span><code>module</code></span></td> <td data-th="Description"><span>All module syntax that allows to reference javascript supports ESM.<br>(only combined with <code>import</code> or <code>require</code>)</span></td> <td data-th="Supported by"><span>webpack</span></td> </tr> <tr> <td data-th="Condition"><span><code>types</code></span></td> <td data-th="Description"><span>Request is issued from typescript that is interested in type declarations.</span></td> <td></td> </tr> </tbody> </table> <h4 id="import"><code>import</code><a href="#import" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>The following syntax will set the <code>import</code> condition:</p> <ul> <li>ESM <code>import</code> declarations in ESM</li> <li>JS <code>import()</code> expression</li> <li>HTML <code>&#x3C;script type="module"></code> in HTML</li> <li>HTML <code>&#x3C;link rel="preload/prefetch"></code> in HTML</li> <li>JS <code>new Worker(..., { type: "module" })</code></li> <li>WASM <code>import</code> section</li> <li>ESM HMR (webpack) <code>import.hot.accept/decline([...])</code></li> <li>JS <code>Worklet.addModule</code></li> <li>Using javascript as entrypoint</li> </ul> <h4 id="require"><code>require</code><a href="#require" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>The following syntax will set the <code>require</code> condition:</p> <ul> <li>CommonJs <code>require(...)</code></li> <li>AMD <code>define()</code></li> <li>AMD <code>require([...])</code></li> <li>CommonJs <code>require.resolve()</code></li> <li>CommonJs (webpack) <code>require.ensure([...])</code></li> <li>CommonJs (webpack) <code>require.context</code></li> <li>CommonJs HMR (webpack) <code>module.hot.accept/decline([...])</code></li> <li>HTML <code>&#x3C;script src="..."></code></li> </ul> <h4 id="style"><code>style</code><a href="#style" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>The following syntax will set the <code>style</code> condition:</p> <ul> <li>CSS <code>@import</code></li> <li>HTML <code>&#x3C;link rel="stylesheet"></code></li> </ul> <h4 id="asset"><code>asset</code><a href="#asset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>The following syntax will set the <code>asset</code> condition:</p> <ul> <li>CSS <code>url()</code></li> <li>ESM <code>new URL(..., import.meta.url)</code></li> <li>HTML <code>&#x3C;img src="..."></code></li> </ul> <h4 id="script"><code>script</code><a href="#script" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>The following syntax will set the <code>script</code> condition:</p> <ul> <li>HTML <code>&#x3C;script src="..."></code></li> </ul> <p><code>script</code> should only be set when no module system is supported. When the script is preprocessed by a system supporting CommonJs it should set <code>require</code> instead.</p> <p>This condition should be used when looking for a javascript file that can be injected as script tag in a HTML page without additional preprocessing.</p> <h3 id="Optimizations">Optimizations<a href="#Optimizations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The following conditions are set for various optimizations:</p> <table> <thead> <tr> <th>Condition</th> <th>Description</th> <th>Supported by</th> </tr> </thead> <tbody> <tr> <td data-th="Condition"><span><code>production</code></span></td> <td data-th="Description"><span>In a production environment.<br>No devtooling should be included.</span></td> <td data-th="Supported by"><span>webpack</span></td> </tr> <tr> <td data-th="Condition"><span><code>development</code></span></td> <td data-th="Description"><span>In a development environment.<br>Devtooling should be included.</span></td> <td data-th="Supported by"><span>webpack</span></td> </tr> </tbody> </table> <p>Note: Since <code>production</code> and <code>development</code> is not supported by everyone, no assumption should be made when none of these is set.</p> <h3 id="Target-environment">Target environment<a href="#Target-environment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The following conditions are set depending on the target environment:</p> <table> <thead> <tr> <th>Condition</th> <th>Description</th> <th>Supported by</th> </tr> </thead> <tbody> <tr> <td data-th="Condition"><span><code>browser</code></span></td> <td data-th="Description"><span>Code will run in a browser.</span></td> <td data-th="Supported by"><span>webpack</span></td> </tr> <tr> <td data-th="Condition"><span><code>electron</code></span></td> <td data-th="Description"><span>Code will run in electron.</span></td> <td data-th="Supported by"><span>webpack</span></td> </tr> <tr> <td data-th="Condition"><span><code>worker</code></span></td> <td data-th="Description"><span>Code will run in a (Web)Worker.</span></td> <td data-th="Supported by"><span>webpack</span></td> </tr> <tr> <td data-th="Condition"><span><code>worklet</code></span></td> <td data-th="Description"><span>Code will run in a Worklet.</span></td> <td data-th="Supported by"><span>-</span></td> </tr> <tr> <td data-th="Condition"><span><code>node</code></span></td> <td data-th="Description"><span>Code will run in Node.js.</span></td> <td data-th="Supported by"><span>webpack, Node.js</span></td> </tr> <tr> <td data-th="Condition"><span><code>deno</code></span></td> <td data-th="Description"><span>Code will run in Deno.</span></td> <td data-th="Supported by"><span>-</span></td> </tr> <tr> <td data-th="Condition"><span><code>react-native</code></span></td> <td data-th="Description"><span>Code will run in react-native.</span></td> <td data-th="Supported by"><span>-</span></td> </tr> </tbody> </table> <p>Note: <code>electron</code>, <code>worker</code> and <code>worklet</code> comes combined with either <code>node</code> or <code>browser</code>, depending on the context.</p> <p>Since there are multiple versions of each environment the following guidelines apply:</p> <ul> <li><code>node</code>: See <code>engines</code> field for compatibility.</li> <li><code>browser</code>: Compatible with current Spec and stage 4 proposals at time of publishing the package. Polyfilling resp. transpiling must be handled on consumer side. <ul> <li>Features that are not possible to polyfill or transpile should be used carefully as it limits the possible usage.</li> </ul> </li> <li><code>deno</code>: TBD</li> <li><code>react-native</code>: TBD</li> </ul> <h3 id="Conditions-Preprocessor-and-runtimes">Conditions: Preprocessor and runtimes<a href="#Conditions-Preprocessor-and-runtimes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The following conditions are set depending on which tool preprocesses the source code.</p> <table> <thead> <tr> <th>Condition</th> <th>Description</th> <th>Supported by</th> </tr> </thead> <tbody> <tr> <td data-th="Condition"><span><code>webpack</code></span></td> <td data-th="Description"><span>Processed by webpack.</span></td> <td data-th="Supported by"><span>webpack</span></td> </tr> </tbody> </table> <p>Sadly there is no <code>node-js</code> condition for Node.js as runtime. This would simplify creating exceptions for Node.js.</p> <h3 id="Conditions-Custom">Conditions: Custom<a href="#Conditions-Custom" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The following tools support custom conditions:</p> <table> <thead> <tr> <th>Tool</th> <th>Supported</th> <th>Notes</th> </tr> </thead> <tbody> <tr> <td data-th="Tool"><span>Node.js</span></td> <td data-th="Supported"><span>no</span></td> <td></td> </tr> <tr> <td data-th="Tool"><span>webpack</span></td> <td data-th="Supported"><span>yes</span></td> <td data-th="Notes"><span>Use <code>resolve.conditionNames</code> configuration option.</span></td> </tr> </tbody> </table> <p>For custom conditions the following naming schema is recommended:</p> <p><code>&#x3C;company-name>:&#x3C;condition-name></code></p> <p>Examples: <code>example-corp:beta</code>, <code>google:internal</code>, `</p> <h2 id="Common-patterns">Common patterns<a href="#Common-patterns" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>All patterns are explained with a single <code>"."</code> entry into the package, but they can be extended from multiple entries too, by repeating the pattern for each entry.</p> <p>These pattern should be used as guide not as strict ruleset. They can be adapted to the individual packages.</p> <p>These pattern are based on the following list of goals/assumptions:</p> <ul> <li>Packages are rotting. <ul> <li>We assume at some point packages are no longer being maintained, but they are continued to be used.</li> <li><code>exports</code> should be written to use fallbacks for unknown future cases. <code>default</code> condition can be used for that.</li> <li>As the future is unknown we assume an environment similar to browsers and module system similar to ESM.</li> </ul> </li> <li>Not all conditions are supported by every tool. <ul> <li>Fallbacks should be used to handled these cases.</li> <li>We assume the following fallback make sense in general: <ul> <li>ESM > CommonJs</li> <li>Production > Development</li> <li>Browser > node.js</li> </ul> </li> </ul> </li> </ul> <p>Depending on the package intention maybe something else makes sense and in this case the patterns should be adopted to that. Example: For a command line tool a browser-like future and fallback doesn\'t make a lot of sense, and in this case node.js-like environments and fallbacks should be used instead.</p> <p>For complex use cases multiple patterns need to be combined by nesting these conditions.</p> <h3 id="Target-environment-independent-packages">Target environment independent packages<a href="#Target-environment-independent-packages" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>These patterns make sense for packages that do not use environment specific APIs.</p> <h4 id="Providing-only-an-ESM-version">Providing only an ESM version<a href="#Providing-only-an-ESM-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token string">"index.js"/*tpa=https://webpack.docschina.org/index.js*/</span>\n<span class="token punctuation">}</span></code></pre> <p>Note: Providing only a ESM comes with restrictions for node.js. Such a package would only work in Node.js >= 14 and only when using <code>import</code>. It won\'t work with <code>require()</code>.</p> <h4 id="Providing-CommonJs-and-ESM-version-stateless">Providing CommonJs and ESM version (stateless)<a href="#Providing-CommonJs-and-ESM-version-stateless" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"index.js"/*tpa=https://webpack.docschina.org/index.js*/</span><span class="token punctuation">,</span>\n      <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/index.cjs"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index.js"/*tpa=https://webpack.docschina.org/index.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>Most tools get the ESM version. Node.js is an exception here. It gets a CommonJs version when using <code>require()</code>. This will lead to two instances of these package when referencing it with <code>require()</code> and <code>import</code>, but that doesn\'t hurt as the package doesn\'t have state.</p> <p>The <code>module</code> condition is used as optimization when preprocessing node-targeted code with a tool that supports ESM for <code>require()</code> (like a bundler, when bundling for Node.js). For such a tool the exception is skipped. This is technically optional, but bundlers would include the package source code twice otherwise.</p> <p>You can also use the stateless pattern if you are able to isolate your package state in JSON files. JSON is consumable from CommonJs and ESM without polluting the graph with the other module system.</p> <p>Note that here stateless also means class instances are not tested with <code>instanceof</code> as there can be two different classes because of the double module instantiation.</p> <h4 id="Providing-CommonJs-and-ESM-version-stateful">Providing CommonJs and ESM version (stateful)<a href="#Providing-CommonJs-and-ESM-version-stateful" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"index.js"/*tpa=https://webpack.docschina.org/index.js*/</span><span class="token punctuation">,</span>\n      <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"wrapper.js"/*tpa=https://webpack.docschina.org/wrapper.js*/</span><span class="token punctuation">,</span>\n      <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/index.cjs"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index.js"/*tpa=https://webpack.docschina.org/index.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-js"><span class="token comment">// wrapper.js</span>\n<span class="token keyword">import</span> cjs <span class="token keyword">from</span> <span class="token string">\'https://webpack.docschina.org/index.cjs\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> cjs<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> cjs<span class="token punctuation">.</span><span class="token constant">B</span><span class="token punctuation">;</span></code></pre> <p>In a stateful package we must ensure that the package is never instantiated twice.</p> <p>This isn\'t a problem for most tools, but Node.js is again an exception here. For Node.js we always use the CommonJs version and expose named exports in the ESM with a ESM wrapper.</p> <p>We use the <code>module</code> condition as optimization again.</p> <h4 id="Providing-only-a-CommonJs-version">Providing only a CommonJs version<a href="#Providing-only-a-CommonJs-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token string">"index.js"/*tpa=https://webpack.docschina.org/index.js*/</span>\n<span class="token punctuation">}</span></code></pre> <p>Providing <code>"type": "commonjs"</code> helps to statically detect CommonJs files.</p> <h4 id="Providing-a-bundled-script-version-for-direct-browser-consumption">Providing a bundled script version for direct browser consumption<a href="#Providing-a-bundled-script-version-for-direct-browser-consumption" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"script"</span><span class="token operator">:</span> <span class="token string">"dist-bundle.js"/*tpa=https://webpack.docschina.org/dist-bundle.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index.js"/*tpa=https://webpack.docschina.org/index.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>Note that despite using <code>"type": "module"</code> and <code>.js</code> for <code>dist-bundle.js</code> this file is not in ESM format. It should use globals to allow direct consumption as script tag.</p> <h3 id="Providing-devtools-or-production-optimizations">Providing devtools or production optimizations<a href="#Providing-devtools-or-production-optimizations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>These patterns make sense when a package contains two versions, one for development and one for production. E. g. the development version could include additional code for better error message or additional warnings.</p> <h4 id="Without-Nodejs-runtime-detection">Without Node.js runtime detection<a href="#Without-Nodejs-runtime-detection" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"index-with-devtools.js"/*tpa=https://webpack.docschina.org/index-with-devtools.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index-optimized.js"/*tpa=https://webpack.docschina.org/index-optimized.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>When the <code>development</code> condition is supported we use the version enhanced for development. Otherwise, in production or when mode is unknown, we use the optimized version.</p> <h4 id="With-Nodejs-runtime-detection">With Node.js runtime detection<a href="#With-Nodejs-runtime-detection" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"index-with-devtools.js"/*tpa=https://webpack.docschina.org/index-with-devtools.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token string">"index-optimized.js"/*tpa=https://webpack.docschina.org/index-optimized.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/wrapper-process-env.cjs"</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index-optimized.js"/*tpa=https://webpack.docschina.org/index-optimized.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-js"><span class="token comment">// wrapper-process-env.cjs</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">\'development\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'https://webpack.docschina.org/index-optimized.cjs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'https://webpack.docschina.org/index-with-devtools.cjs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>We prefer static detection of production/development mode via the <code>production</code> or <code>development</code> condition.</p> <p>Node.js allows to detection production/development mode at runtime via <code>process.env.NODE_ENV</code>, so we use that as fallback in Node.js. Sync conditional importing ESM is not possible and we don\'t want to load the package twice, so we have to use CommonJs for the runtime detection.</p> <p>When it\'s not possible to detect mode we fallback to the production version.</p> <h3 id="Providing-different-versions-depending-on-target-environment">Providing different versions depending on target environment<a href="#Providing-different-versions-depending-on-target-environment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>A fallback environment should be chosen that makes sense for the package to support future environments. In general a browser-like environment should be assumed.</p> <h4 id="Providing-Nodejs-WebWorker-and-browser-versions">Providing Node.js, WebWorker and browser versions<a href="#Providing-Nodejs-WebWorker-and-browser-versions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"index-node.js"/*tpa=https://webpack.docschina.org/index-node.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"worker"</span><span class="token operator">:</span> <span class="token string">"index-worker.js"/*tpa=https://webpack.docschina.org/index-worker.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index.js"/*tpa=https://webpack.docschina.org/index.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h4 id="Providing-Nodejs-browser-and-electron-versions">Providing Node.js, browser and electron versions<a href="#Providing-Nodejs-browser-and-electron-versions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"electron"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"index-electron-node.js"/*tpa=https://webpack.docschina.org/index-electron-node.js*/</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index-electron.js"/*tpa=https://webpack.docschina.org/index-electron.js*/</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"index-node.js"/*tpa=https://webpack.docschina.org/index-node.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index.js"/*tpa=https://webpack.docschina.org/index.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="Combining-patterns">Combining patterns<a href="#Combining-patterns" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <h4 id="Example-1">Example 1<a href="#Example-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>This is an example for a package that has optimizations for production and development usage with runtime detection for <code>process.env</code> and also ships a CommonJs and ESM version</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"index-with-devtools.js"/*tpa=https://webpack.docschina.org/index-with-devtools.js*/</span><span class="token punctuation">,</span>\n        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"wrapper-with-devtools.js"/*tpa=https://webpack.docschina.org/wrapper-with-devtools.js*/</span><span class="token punctuation">,</span>\n        <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/index-with-devtools.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"index-optimized.js"/*tpa=https://webpack.docschina.org/index-optimized.js*/</span><span class="token punctuation">,</span>\n        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"wrapper-optimized.js"/*tpa=https://webpack.docschina.org/wrapper-optimized.js*/</span><span class="token punctuation">,</span>\n        <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/index-optimized.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/wrapper-process-env.cjs"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"index-with-devtools.js"/*tpa=https://webpack.docschina.org/index-with-devtools.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token string">"index-optimized.js"/*tpa=https://webpack.docschina.org/index-optimized.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index-optimized.js"/*tpa=https://webpack.docschina.org/index-optimized.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h4 id="Example-2">Example 2<a href="#Example-2" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>This is an example for a package that supports Node.js, browser and electron, has optimizations for production and development usage with runtime detection for <code>process.env</code> and also ships a CommonJs and ESM version.</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"electron"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"index-electron-node-with-devtools.js"/*tpa=https://webpack.docschina.org/index-electron-node-with-devtools.js*/</span><span class="token punctuation">,</span>\n          <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"wrapper-electron-node-with-devtools.js"/*tpa=https://webpack.docschina.org/wrapper-electron-node-with-devtools.js*/</span><span class="token punctuation">,</span>\n          <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/index-electron-node-with-devtools.cjs"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"index-electron-node-optimized.js"/*tpa=https://webpack.docschina.org/index-electron-node-optimized.js*/</span><span class="token punctuation">,</span>\n          <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"wrapper-electron-node-optimized.js"/*tpa=https://webpack.docschina.org/wrapper-electron-node-optimized.js*/</span><span class="token punctuation">,</span>\n          <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/index-electron-node-optimized.cjs"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/wrapper-electron-node-process-env.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"index-electron-with-devtools.js"/*tpa=https://webpack.docschina.org/index-electron-with-devtools.js*/</span><span class="token punctuation">,</span>\n      <span class="token property">"production"</span><span class="token operator">:</span> <span class="token string">"index-electron-optimized.js"/*tpa=https://webpack.docschina.org/index-electron-optimized.js*/</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index-electron-optimized.js"/*tpa=https://webpack.docschina.org/index-electron-optimized.js*/</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"index-node-with-devtools.js"/*tpa=https://webpack.docschina.org/index-node-with-devtools.js*/</span><span class="token punctuation">,</span>\n        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"wrapper-node-with-devtools.js"/*tpa=https://webpack.docschina.org/wrapper-node-with-devtools.js*/</span><span class="token punctuation">,</span>\n        <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/index-node-with-devtools.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"index-node-optimized.js"/*tpa=https://webpack.docschina.org/index-node-optimized.js*/</span><span class="token punctuation">,</span>\n        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"wrapper-node-optimized.js"/*tpa=https://webpack.docschina.org/wrapper-node-optimized.js*/</span><span class="token punctuation">,</span>\n        <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/index-node-optimized.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"https://webpack.docschina.org/wrapper-node-process-env.cjs"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"index-with-devtools.js"/*tpa=https://webpack.docschina.org/index-with-devtools.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token string">"index-optimized.js"/*tpa=https://webpack.docschina.org/index-optimized.js*/</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"index-optimized.js"/*tpa=https://webpack.docschina.org/index-optimized.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>Looks complex, yes. We were already able to reduce some complexity due to a assumption we can make: Only <code>node</code> need a CommonJs version and can detect production/development with <code>process.env</code>.</p> <h2 id="Guidelines">Guidelines<a href="#Guidelines" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li>Avoid the <code>default</code> export. It\'s handled differently between tooling. Only use named exports.</li> <li>Never provide different APIs or semantics for different conditions.</li> <li>Write your source code as ESM and transpile to CJS via babel, typescript or similar tools.</li> <li>Either use <code>.cjs</code> or <code>type: "commonjs"</code> in package.json to clearly mark source code as CommonJs. This makes it statically detectable for tools if CommonJs or ESM is used. This is important for tools that only support ESM and no CommonJs.</li> <li>ESM used in packages support the following types of requests: <ul> <li>module requests are supported, pointing to other packages with a package.json.</li> <li>relative requests are supported, pointing to other files within the package. <ul> <li>They must not point to files outside of the package.</li> </ul> </li> <li><code>data:</code> url requests are supported.</li> <li>other absolute or server-relative requests are not supported by default, but they might be supported by some tools or environments.</li> </ul> </li> </ul> '}}]);