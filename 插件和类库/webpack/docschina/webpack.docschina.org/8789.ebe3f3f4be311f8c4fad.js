(self.webpackChunk=self.webpackChunk||[]).push([[8789],{8789:function(s){s.exports='<p>webpack 能够为多种环境或 <em>target</em> 构建编译。想要理解什么是 <code>target</code> 的详细信息， 请阅读 <a href="concepts/targets/index.htm"/*tpa=https://webpack.docschina.org/concepts/targets/*/>target 概念页面</a>。</p> <h2 id="target"><code>target</code> <a href="#target" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>[string]</code> <code>false</code></p> <p>告知 webpack 为目标(target)指定一个环境。默认值为 <code>"browserslist"</code>，如果没有找到 browserslist 的配置，则默认为 <code>"web"</code></p> <h3 id="string"><code>string</code> <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>通过 <a href="../github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"/*tpa=https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js*/><code>WebpackOptionsApply</code></a>， 可以支持以下字符串值：</p> <table> <thead> <tr> <th>选项</th> <th>描述</th> </tr> </thead> <tbody> <tr> <td data-th="选项"><span><code>async-node</code></span></td> <td data-th="描述"><span>编译为类 Node.js 环境可用（使用 fs 和 vm 异步加载分块）</span></td> </tr> <tr> <td data-th="选项"><span><code>electron-main</code></span></td> <td data-th="描述"><span>编译为 <a href="https://electronjs.org/">Electron</a> 主进程。</span></td> </tr> <tr> <td data-th="选项"><span><code>electron-renderer</code></span></td> <td data-th="描述"><span>编译为 <a href="https://electronjs.org/">Electron</a> 渲染进程，使用 <code>JsonpTemplatePlugin</code>,</span></td> </tr> <tr> <td data-th="选项"><span><code>FunctionModulePlugin</code> 来为浏览器环境提供目标，使用 <code>NodeTargetPlugin</code> 和 <code>ExternalsPlugin</code></span></td> <td></td> </tr> <tr> <td data-th="选项"><span>为 CommonJS 和 Electron 内置模块提供目标。</span></td> <td></td> </tr> <tr> <td data-th="选项"><span><code>electron-preload</code></span></td> <td data-th="描述"><span>编译为 <a href="https://electronjs.org/">Electron</a> 渲染进程，</span></td> </tr> <tr> <td data-th="选项"><span>使用 <code>NodeTemplatePlugin</code> 且 <code>asyncChunkLoading</code> 设置为 <code>true</code> ，<code>FunctionModulePlugin</code> 来为浏览器提供目标，使用 <code>NodeTargetPlugin</code> 和 <code>ExternalsPlugin</code> 为 CommonJS 和 Electron 内置模块提供目标。</span></td> <td></td> </tr> <tr> <td data-th="选项"><span><code>node</code></span></td> <td data-th="描述"><span>编译为类 Node.js 环境可用（使用 Node.js <code>require</code> 加载 chunks）</span></td> </tr> <tr> <td data-th="选项"><span><code>node-webkit</code></span></td> <td data-th="描述"><span>编译为 Webkit 可用，并且使用 jsonp 去加载分块。支持 Node.js 内置模块和 <a href="http://docs.nwjs.io/en/latest/"><code>nw.gui</code></a></span></td> </tr> <tr> <td data-th="选项"><span>导入（实验性质）</span></td> <td></td> </tr> <tr> <td data-th="选项"><span><code>nwjs[[X].Y]</code></span></td> <td data-th="描述"><span>等价于 <code>node-webkit</code></span></td> </tr> <tr> <td data-th="选项"><span><code>web</code></span></td> <td data-th="描述"><span>编译为类浏览器环境里可用 <strong>（默认）</strong></span></td> </tr> <tr> <td data-th="选项"><span><code>webworker</code></span></td> <td data-th="描述"><span>编译成一个 WebWorker</span></td> </tr> <tr> <td data-th="选项"><span><code>esX</code></span></td> <td data-th="描述"><span>编译为指定版本的 ECMAScript。例如，es5，es2020</span></td> </tr> <tr> <td data-th="选项"><span><code>browserslist</code></span></td> <td data-th="描述"><span>从 browserslist-config 中推断出平台和 ES 特性 <strong>（如果 browserslist 可用，其值则为默认）</strong></span></td> </tr> </tbody> </table> <p>例如，当 <code>target</code> 设置为 <code>"electron-main"</code>，webpack 引入多个 electron 特定的变量。</p> <p>可指定 <code>node</code> 或者 <code>electron</code> 的版本。上表中使用 <code>[[X].Y]</code> 表示。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/node12.18\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>它有助于确定可能用于生成运行时代码的 ES 特性（所有的 chunk 和模块都被运行时代码所包裹）</p> <h4 id="browserslist"><code>browserslist</code><a href="#browserslist" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>如果一个项目有 browserslist 配置，那么 webpack 将会使用它：</p> <ul> <li>确定可用于运行时代码的 ES 特性。</li> <li>推断环境（例如：<code>last 2 node versions</code> 等价于 <code>target: node</code>，并会进行一些 <a href="configuration/output/index.htm#outputenvironment"/*tpa=https://webpack.docschina.org/configuration/output/#outputenvironment*/><code>output.environment</code></a> 设置).</li> </ul> <p>支持的 browserslist 值：</p> <ul> <li><code>browserslist</code> - 使用自动解析的 browserslist 配置和环境（从最近的 <code>package.json</code> 或 <code>BROWSERSLIST</code> 环境变量中获取，具体请查阅 <a href="https://github.com/browserslist/browserslist#queries">browserslist 文档</a>）</li> <li><code>browserslist:modern</code> - 使用自动解析的 browserslist 配置中的 <code>modern</code> 环境</li> <li><code>browserslist:last 2 versions</code> - 使用显式 browserslist 查询（配置将被忽略）</li> <li><code>browserslist:/path/to/config</code> - 明确指定 browserslist 配置路径</li> <li><code>browserslist:/path/to/config:modern</code> - 明确指定 browserslist 的配置路径和环境</li> </ul> <h3 id="string"><code>[string]</code> <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>当传递多个目标时，将使用共同的特性子集：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'web\'</span><span class="token punctuation">,</span> <span class="token string">\'es5\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>webpack 将生成 web 平台的运行时代码，并且只使用 ES5 相关的特性。</p> <p>目前并不是所有的 target 都可以进行混合。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'web\'</span><span class="token punctuation">,</span> <span class="token string">\'node\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此时会导致错误。webpack 暂时不支持 universal 的 target。</p> <h3 id="false"><code>false</code> <a href="#false" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>如果上述列表中的预设 target 都不符合你的需求，你可以将 <code>target</code> 设置为 <code>false</code>，这将告诉 webpack 不使用任何插件。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>或者可以使用你想要指定的插件</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">\'web\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>当没有提供 target 或 <a href="configuration/output/index.htm#outputenvironment"/*tpa=https://webpack.docschina.org/configuration/output/#outputenvironment*/>environment</a> 特性的信息时，将默认使用 ES2015。</p> '}}]);