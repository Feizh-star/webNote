(self.webpackChunk=self.webpackChunk||[]).push([[1541],{1541:function(s){s.exports='<p>webpack 支持使用多种编程语言和数据描述格式来编写配置文件。在 <a href="https://github.com/gulpjs/interpret">node-interpret</a> 中你可以找到当前所支持的文件类型列表，通过 <a href="https://github.com/gulpjs/interpret">node-interpret</a>，webpack 能够处理这些类型的配置文件。</p> <h2 id="typescript">TypeScript <a href="#typescript" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>要使用 <a href="https://www.typescriptlang.org/">Typescript</a> 来编写 webpack 配置，你需要先安装必要的依赖，比如 Typescript 以及其相应的类型声明，类型声明可以从 <a href="https://definitelytyped.org/">DefinitelyTyped</a> 项目中获取，依赖安装如下所示：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript ts-node @types/node @types/webpack\n<span class="token comment"># 如果使用 webpack-dev-server，还需要安装以下依赖</span>\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev @types/webpack-dev-server</code></pre> <p>完成依赖安装后便可以开始编写配置文件，示例如下：</p> <p><strong>webpack.config.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">\'path\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> webpack <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config<span class="token operator">:</span> webpack<span class="token punctuation">.</span>Configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'foo.js\'/*tpa=https://webpack.docschina.org/foo.js*/</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'foo.bundle.js\'/*tpa=https://webpack.docschina.org/foo.bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span></code></pre> <p>该示例需要 typescript 版本在 2.7 及以上，并在 <code>tsconfig.json</code> 文件的 compilerOptions 中添加 <code>esModuleInterop</code> 和 <code>allowSyntheticDefaultImports</code> 两个配置项。</p> <p>值得注意的是你需要确保 <code>tsconfig.json</code> 的 <code>compilerOptions</code> 中 module 选项的值为 <code>commonjs</code>,否则 webpack 的运行会失败报错，因为 <code>ts-node</code> 不支持 <code>commonjs</code> 以外的其他模块规范。</p> <p>你可以通过两个途径来完成 module 的设置:</p> <ul> <li>直接修改 <code>tsconfig.json</code> 文件</li> <li>使用 <code>tsconfig-paths</code></li> </ul> <p>第一种方法就是打开你的 <code>tsconfig.json</code> 文件，找到 <code>compilerOptions</code> 的配置，然后设置 <code>target</code> 和 <code>module</code> 的选项分别为 <code>"ES5"</code> 和 <code>"CommonJs"</code> (在 <code>target</code> 设置为 <code>es5</code> 时你也可以不显示编写 <code>module</code> 配置)。</p> <p>第二种方法需要先安装 <code>tsconfig-paths</code> 这个 npm 包，如下所示：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev tsconfig-paths</code></pre> <p>安装后你可以为 webpack 配置创建一个单独的 TypeScript 配置文件，示例如下：</p> <p><strong>tsconfig-for-webpack-config.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>\n    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <blockquote class="tip"> <p>ts-node 可以根据 <code>tsconfig-paths</code> 提供的环境变量 <code>process.env.TS_NODE_PROJECT</code> 来找到 <code>tsconfig.json</code> 文件路径。</p> </blockquote> <p><code>process.env.TS_NODE_PROJECT</code> 变量的设置如下所示:</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"cross-env TS_NODE_PROJECT=\\"tsconfig-for-webpack-config.json\\" webpack"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>之所以要添加 <code>cross-env</code>，是因为我们在直接使用 <code>TS_NODE_PROJECT</code> 时遇到过 <code>"TS_NODE_PROJECT" unrecognized command</code> 报错的反馈，添加 <code>cross-env</code> 之后该问题也似乎得到了解决，你可以查看<a href="https://github.com/webpack/webpack.js.org/issues/2733">这个 issue</a>获取到关于该问题的更多信息。</p> <h2 id="coffeescript">CoffeeScript <a href="#coffeescript" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>与 <code>Typescript</code> 类似，在使用 CoffeeScript 前需要先安装其依赖，如下所示:</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev coffeescript</code></pre> <p>完成安装之后便可以开始编写 webpack 配置，示例如下:</p> <p><strong>webpack.config.coffee</strong></p> <pre><code class="hljs language-js">HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\nwebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\npath <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n\nconfig <span class="token operator">=</span>\n  mode<span class="token operator">:</span> <span class="token string">\'production\'</span>\n  entry<span class="token operator">:</span> <span class="token string">\'path/to/my/entry/file.js\'/*tpa=https://webpack.docschina.org/path/to/my/entry/file.js*/</span>\n  output<span class="token operator">:</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span>\n    filename<span class="token operator">:</span> <span class="token string">\'my-first-webpack.bundle.js\'/*tpa=https://webpack.docschina.org/my-first-webpack.bundle.js*/</span>\n  module<span class="token operator">:</span> rules<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(js|jsx)$</span><span class="token regex-delimiter">/</span></span>\n    use<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span>\n  <span class="token punctuation">}</span> <span class="token punctuation">]</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/src/index.html\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config</code></pre> <h2 id="babel-and-jsx">Babel and JSX <a href="#babel-and-jsx" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>下述的示例中使用了 JSX（用于 React 的 JavaScript 标记语言）和 babel 来创建格式为 json 的 webpack 配置文件。</p> <blockquote> <p>感谢 <a href="https://twitter.com/_developit">Jason Miller</a> 提供示例代码</p> </blockquote> <p>首先需要安装一些必要依赖，如下所示:</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-register jsxobj babel-preset-es2015</code></pre> <p><strong>.babelrc</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"es2015"</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>webpack.config.babel.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> jsxobj <span class="token keyword">from</span> <span class="token string">\'jsxobj\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 插件引入示例</span>\n<span class="token keyword">const</span> <span class="token function-variable function">CustomPlugin</span> <span class="token operator">=</span> <span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>config<span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">\'custom-plugin\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>\n  <span class="token operator">&#x3C;</span>webpack target<span class="token operator">=</span><span class="token string">"web"</span> watch mode<span class="token operator">=</span><span class="token string">"production"</span><span class="token operator">></span>\n    <span class="token operator">&#x3C;</span>entry path<span class="token operator">=</span><span class="token string">"src/index.js"/*tpa=https://webpack.docschina.org/src/index.js*/</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&#x3C;</span>resolve<span class="token operator">></span>\n      <span class="token operator">&#x3C;</span>alias <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span>\n        react<span class="token operator">:</span> <span class="token string">\'preact-compat\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'react-dom\'</span><span class="token operator">:</span> <span class="token string">\'preact-compat\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&#x3C;</span><span class="token operator">/</span>resolve<span class="token operator">></span>\n    <span class="token operator">&#x3C;</span>plugins<span class="token operator">></span>\n      <span class="token operator">&#x3C;</span>CustomPlugin foo<span class="token operator">=</span><span class="token string">"bar"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&#x3C;</span><span class="token operator">/</span>plugins<span class="token operator">></span>\n  <span class="token operator">&#x3C;</span><span class="token operator">/</span>webpack<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>如果你在其他地方也使用了 Babel 并且 <code>modules</code> 的值设置为 <code>false</code>，则必须维护两份 <code>.babelrc</code> 的文件，或者你也可以将上述示例中的 <code>import jsxobj from \'jsxobj\';</code> 替换为 <code>const jsxobj = require(\'jsxobj\');</code> 并将新的 <code>export</code> 语法替换为 <code>module.exports</code>，因为尽管 Node 目前已经支持了 ES6 的许多新特性，但是仍然没有支持 ES6 的模块语法。</p> '}}]);