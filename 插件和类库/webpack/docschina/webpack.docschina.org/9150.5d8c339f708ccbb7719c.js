(self.webpackChunk=self.webpackChunk||[]).push([[9150],{9150:function(n){n.exports='<p>webpack 用于编译 JavaScript 模块。一旦完成 <a href="guides/installation.htm"/*tpa=https://webpack.docschina.org/guides/installation*/>安装</a>，你就可以通过 webpack <a href="api/cli.htm"/*tpa=https://webpack.docschina.org/api/cli*/>CLI</a> 或 <a href="api/node.htm"/*tpa=https://webpack.docschina.org/api/node*/>API</a> 与其配合交互。如果你还不熟悉 webpack，请阅读 <a href="concepts.htm"/*tpa=https://webpack.docschina.org/concepts*/>核心概念</a> 和 <a href="comparison.htm"/*tpa=https://webpack.docschina.org/comparison*/>对比</a>，了解为什么要使用 webpack，而不是社区中的其他工具。</p> <blockquote class="warning"> <p>运行 webpack 5 的 Node.js 最低版本是 10.13.0 (LTS)。</p> </blockquote> <h2 id="basic-setup">基本安装 <a href="#basic-setup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>首先我们创建一个目录，初始化 npm，然后 <a href="guides/installation.htm#local-installation"/*tpa=https://webpack.docschina.org/guides/installation#local-installation*/>在本地安装 webpack</a>，接着安装 <a href="https://github.com/webpack/webpack-cli"><code>webpack-cli</code></a>（此工具用于在命令行中运行 webpack）：</p> <pre><code class="hljs language-bash"><span class="token function">mkdir</span> webpack-demo\n<span class="token builtin class-name">cd</span> webpack-demo\n<span class="token function">npm</span> init -y\n<span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli --save-dev</code></pre> <p>在整个指南中，我们将使用 <code>diff</code> 块，来展示对目录、文件和代码所做的修改。例如：</p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> this is a new line you shall copy into your code\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> and this is a line to be removed from your code\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> and this is a line not to touch. </span></span></code></pre> <p>现在，我们将创建以下目录结构、文件和内容：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- index.html\n</span><span class="token prefix inserted">+</span><span class="token line"> |- /src\n</span><span class="token prefix inserted">+</span><span class="token line">   |- index.js</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">function</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// lodash（目前通过一个 script 引入）对于执行这一行是必需的</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'webpack\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>index.html</strong></p> <pre><code class="hljs language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span>起步<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/lodash@4.17.20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre> <p>我们还需要调整 <code>package.json</code> 文件，以便确保我们安装包是 <code>private(私有的)</code>，并且移除 <code>main</code> 入口。这可以防止意外发布你的代码。</p> <blockquote class="tip"> <p>如果你想要了解 <code>package.json</code> 内在机制的更多信息，我们推荐阅读 <a href="https://docs.npmjs.com/files/package.json">npm 文档</a>。</p> </blockquote> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  "main": "index.js"/*tpa=https://webpack.docschina.org/index.js*/,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  "private": true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>在此示例中，<code>&#x3C;script></code> 标签之间存在隐式依赖关系。在 <code>index.js</code> 文件执行之前，还需要在页面中先引入 <code>lodash</code>。这是因为 <code>index.js</code> 并未显式声明它需要 <code>lodash</code>，只是假定推测已经存在一个全局变量 <code>_</code>。</p> <p>使用这种方式去管理 JavaScript 项目会有一些问题：</p> <ul> <li>无法直接体现，脚本的执行依赖于外部库。</li> <li>如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。</li> <li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。</li> </ul> <p>让我们使用 webpack 来管理这些脚本。</p> <h2 id="creating-a-bundle">创建一个 bundle <a href="#creating-a-bundle" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>首先，我们稍微调整下目录结构，创建分发代码(<code>./dist</code>)文件夹用于存放分发代码，源代码(<code>./src</code>)文件夹仍存放源代码。源代码是指用于书写和编辑的代码。分发代码是指在构建过程中，经过最小化和优化后产生的输出结果，最终将在浏览器中加载。调整后目录结构如下：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- /dist\n</span><span class="token prefix inserted">+</span><span class="token line">   |- index.html\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- index.html\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js</span></span></code></pre> <blockquote class="tip"> <p>细心的小伙伴可能不难发现，尽管 <code>index.html</code> 目前放在 <code>dist</code> 目录下，但它是手动创建的。在本指南接下来的章节中，我们会教你如何生成 <code>index.html</code> 而非手动编辑它。如此做，便可安全地清空 <code>dist</code> 目录并重新生成目录中的所有文件。</p> </blockquote> <p>要在 <code>index.js</code> 中打包 <code>lodash</code> 依赖，我们需要在本地安装 library：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save lodash</code></pre> <blockquote class="tip"> <p>在安装一个 package，而此 package 要打包到生产环境 bundle 中时，你应该使用 <code>npm install --save</code>。如果你在安装一个用于开发环境的 package 时（例如，linter, 测试库等），你应该使用 <code>npm install --save-dev</code>。更多信息请查看 <a href="https://docs.npmjs.com/cli/install">npm 文档</a>。</p> </blockquote> <p>现在，在我们的 script 中 import <code>lodash</code>：</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  // lodash（目前通过一个 script 引入）对于执行这一行是必需的\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // lodash，现在通过一个 script 引入\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>现在，我们将会打包所有脚本，我们必须更新 <code>index.html</code> 文件。由于现在是通过 <code>import</code> 引入 lodash，所以要将 lodash <code>&#x3C;script></code> 删除，然后修改另一个 <code>&#x3C;script></code> 标签来加载 bundle，而不是原始的 <code>./src</code> 文件：</p> <p><strong>dist/index.html</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#x3C;!DOCTYPE html>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;html>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;head>\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;meta charset="utf-8" />\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;title>起步&#x3C;/title>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="https://unpkg.com/lodash@4.17.20">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/head>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;body>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="src/index.js"/*tpa=https://webpack.docschina.org/src/index.js*/>&#x3C;/script>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="main.js"/*tpa=https://webpack.docschina.org/main.js*/>&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/body>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;/html></span></span></code></pre> <p>在这个设置中，<code>index.js</code> 显式要求引入的 <code>lodash</code> 必须存在，然后将它绑定为 <code>_</code>（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个优化过的 bundle，并且会以正确顺序执行。</p> <p>可以这样说，执行 <code>npx webpack</code>，会将我们的脚本 <code>src/index.js</code> 作为 <a href="concepts/entry-points.htm"/*tpa=https://webpack.docschina.org/concepts/entry-points*/>入口起点</a>，也会生成 <code>dist/main.js</code> 作为 <a href="concepts/output.htm"/*tpa=https://webpack.docschina.org/concepts/output*/>输出</a>。Node 8.2/npm 5.2.0 以上版本提供的 <code>npx</code> 命令，可以运行在初次安装的 webpack package 中的 webpack 二进制文件（即 <code>./node_modules/.bin/webpack</code>）：</p> <pre><code class="hljs language-bash">$ npx webpack\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.3</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1851</span> ms</code></pre> <blockquote class="tip"> <p>输出可能会稍有不同，但是只要构建成功，那么你就可以放心继续。</p> </blockquote> <p>在浏览器中打开 <code>dist</code> 目录下的 <code>index.html</code>，如果一切正常，你应该能看到以下文本：<code>\'Hello webpack\'</code>。</p> <h2 id="modules">模块 <a href="#modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://babeljs.io/learn-es2015/">ES2015</a> 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code>export</code></a> 语句已经被标准化。虽然大多数浏览器还无法支持它们，但是 webpack 却能够提供开箱即用般的支持。</p> <p>事实上，webpack 在幕后会将代码“<strong>转译</strong>”，以便旧版本浏览器可以执行。如果你检查 <code>dist/main.js</code>，你可以看到 webpack 具体如何实现，这是独创精巧的设计！除了 <code>import</code> 和 <code>export</code>，webpack 还能够很好地支持多种其他模块语法，更多信息请查看 <a href="api/module-methods.htm"/*tpa=https://webpack.docschina.org/api/module-methods*/>模块 API</a>。</p> <p>注意，webpack 不会更改代码中除 <code>import</code> 和 <code>export</code> 语句以外的部分。如果你在使用其它 <a href="http://es6-features.org/">ES2015 特性</a>，请确保你在 webpack <a href="concepts/loaders/index.htm"/*tpa=https://webpack.docschina.org/concepts/loaders/*/>loader 系统</a> 中使用了一个像是 <a href="https://babel.docschina.org/">Babel</a> 或 <a href="https://buble.surge.sh/guide/">Bublé</a> 的 <a href="loaders/index.htm#transpiling"/*tpa=https://webpack.docschina.org/loaders/#transpiling*/>transpiler(转译器)</a>。</p> <h2 id="using-a-configuration">使用一个配置文件 <a href="#using-a-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在 webpack v4 中，可以无须任何配置，然而大多数项目会需要很复杂的设置，这就是为什么 webpack 仍然要支持 <a href="concepts/configuration.htm"/*tpa=https://webpack.docschina.org/concepts/configuration*/>配置文件</a>。这比在 terminal(终端) 中手动输入大量命令要高效的多，所以让我们创建一个配置文件：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- webpack.config.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js</span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'main.js\'/*tpa=https://webpack.docschina.org/main.js*/</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>现在，让我们通过新的配置文件再次执行构建：</p> <pre><code class="hljs language-bash">$ npx webpack --config webpack.config.js \n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.3</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1934</span> ms</code></pre> <blockquote class="tip"> <p>如果 <code>webpack.config.js</code> 存在，则 <code>webpack</code> 命令将默认选择使用它。我们在这里使用 <code>--config</code> 选项只是向你表明，可以传递任何名称的配置文件。这对于需要拆分成多个文件的复杂配置是非常有用的。</p> </blockquote> <p>比起 CLI 这种简单直接的使用方式，配置文件具有更多的灵活性。我们可以通过配置方式指定 loader 规则(loader rule)、plugin(插件)、resolve 选项，以及许多其他增强功能。更多详细信息请查看 <a href="configuration.htm"/*tpa=https://webpack.docschina.org/configuration*/>配置文档</a>。</p> <h2 id="npm-scripts">npm scripts <a href="#npm-scripts" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>考虑到用 CLI 这种方式来运行本地的 webpack 副本并不是特别方便，我们可以设置一个快捷方式。调整 <em>package.json</em> 文件，添加一个 <a href="https://docs.npmjs.com/misc/scripts">npm script</a>：</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "private": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1",\n</span><span class="token prefix inserted">+</span><span class="token line">    "build": "webpack"\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "lodash": "https://webpack.docschina.org/^4.17.20"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>现在，可以使用 <code>npm run build</code> 命令，来替代我们之前使用的 <code>npx</code> 命令。注意，使用 npm <code>scripts</code>，我们可以像使用 <code>npx</code> 那样通过模块名引用本地安装的 npm packages。这是大多数基于 npm 的项目遵循的标准，因为它允许所有贡献者使用同一组通用脚本。</p> <p>现在运行以下命令，然后看看你的脚本别名是否正常运行：</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.3</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1940</span> ms</code></pre> <blockquote class="tip"> <p>Custom parameters can be passed to webpack by adding two dashes between the <code>npm run build</code> command and your parameters, e.g. <code>npm run build -- --color</code>.</p> </blockquote> <h2 id="conclusion">结论 <a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>现在，你已经有了一个基础构建配置，你应该移至下一章节 <a href="guides/asset-management.htm"/*tpa=https://webpack.docschina.org/guides/asset-management*/><code>资源管理</code></a> 指南，以了解如何通过 webpack 来管理资源，例如 images、fonts。此刻你的项目看起来应该如下：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- main.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- index.html\n</span></span>|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span>|- /node_modules</code></pre> <blockquote class="tip"> <p>如果你使用的是 npm 5+，你可能还会在目录中看到一个 <code>package-lock.json</code> 文件。</p> </blockquote> <blockquote class="warning"> <p>不要使用 webpack 编译不可信的代码。它可能会在你的计算机，远程服务器或者在你 web 应用程序使用者的浏览器中执行恶意代码。</p> </blockquote> <p>如果想要了解 webpack 设计思想，你应该看下 <a href="concepts.htm"/*tpa=https://webpack.docschina.org/concepts*/>基本概念</a> 和 <a href="configuration.htm"/*tpa=https://webpack.docschina.org/configuration*/>配置</a> 页面。此外，<a href="api.htm"/*tpa=https://webpack.docschina.org/api*/>API</a> 章节可以深入了解 webpack 提供的各种接口。</p> '}}]);