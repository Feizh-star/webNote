(self.webpackChunk=self.webpackChunk||[]).push([[4501],{4501:function(n){n.exports='<p><a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 可用于快速开发应用程序。请查阅 <a href="guides/development/index.htm"/*tpa=https://webpack.docschina.org/guides/development/*/>开发指南</a> 开始使用。</p> <p>当前页面记录了影响 <code>webpack-dev-server</code> (简写: <code>dev-server</code>)配置的选项。</p> <blockquote class="tip"> <p>与 <a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a> 兼容的配置项后面 🔑 标记。</p> </blockquote> <h2 id="devserver">开发服务器(<code>devServer</code>) <a href="#devserver" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>通过 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 的这些配置，能够以多种方式改变其行为。这是一个简单的示例，利用 <code>gzips</code> 压缩 <code>dist/</code> 目录当中的所有内容并提供一个本地服务(serve)：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    contentBase<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    compress<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    port<span class="token operator">:</span> <span class="token number">9000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>当服务(<code>server</code>)启动后，在解析模块列表之前输出一条消息：</p> <pre><code class="hljs language-bash">http://localhost:9000/\nwebpack output is served from /build/\nContent not from webpack is served from /path/to/dist/</code></pre> <p>这里将会给出服务启动位置以及内容的一些基本信息。</p> <p>如果你通过 Node.js API 使用 dev-server，则 <code>devServer</code> 中的配置选项将被忽略。但可以将配置选项作为第二个参数传入：<code>new WebpackDevServer(compiler，{...})</code>。<a href="https://github.com/webpack/webpack-dev-server/tree/master/examples/api/simple">此示例</a>展示了如何通过 Node.js API 使用 webpack-dev-server。</p> <blockquote class="warning"> <p>使用 <code>WebpackDevServer</code> 时，不能使用第二个 <code>compiler</code> 参数（一个回调）。</p> </blockquote> <blockquote class="warning"> <p>请注意，当<a href="configuration/configuration-types/index.htm#exporting-multiple-configurations"/*tpa=https://webpack.docschina.org/configuration/configuration-types/#exporting-multiple-configurations*/>导出多个配置对象</a>时，只会使用 <code>devServer</code> 的第一个配置选项，并将其应用于所有的配置当中。</p> </blockquote> <blockquote class="tip"> <p>如果你碰到了问题，请将路由导航至 <code>/webpack-dev-server</code> 将会为你展示服务文件的位置。例如： <code>http://localhost:9000/webpack-dev-server</code>。</p> </blockquote> <blockquote class="tip"> <p>如果你需要要手动重新编译 <code>bundle</code>，将路由导航至 <code>/invalidate</code> 使当前编译的 <code>bundle</code> 无效，并通过 <a href="https://github.com/webpack/webpack-dev-middleware#invalidate">webpack-dev-middleware</a> 为你重新编译。根据你的配置，URL 可能看起来像 <code>http://localhost:9000/invalidate</code>。</p> </blockquote> <blockquote class="tip"> <p>当启动本地服务的时候 HTML 模板是必须提供的，通常是 <code>index.html</code>。确保将脚本引用添加到 HTML 中，webpack-dev-server 不会自动注入它们。</p> </blockquote> <h2 id="devserverafter"><code>devServer.after</code> <a href="#devserverafter" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>function (app, server, compiler)</code></p> <p>提供自定义中间件，当 <code>devServer</code> 服务器内部的 所有中间件执行完成之后执行</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">after</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> server<span class="token punctuation">,</span> compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// do fancy stuff</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserverallowedhosts"><code>devServer.allowedHosts</code> <a href="#devserverallowedhosts" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>[string]</code></p> <p>该选项允许将允许访问开发服务器的服务列入白名单。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    allowedHosts<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">\'https://webpack.docschina.org/host.com\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'https://webpack.docschina.org/subdomain.host.com\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'https://webpack.docschina.org/subdomain2.host.com\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'https://webpack.docschina.org/host2.com\'</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>模仿 django 的<code>ALLOWED_HOSTS</code>，用 <code>.</code> 作为子域通配符。<code>.host.com</code> 会与 <code>host.com</code>，<code>www.host.com</code> 以及 <code>host.com</code> 等其他任何其他子域匹配。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// this achieves the same effect as the first example</span>\n    <span class="token comment">// with the bonus of not having to update your config</span>\n    <span class="token comment">// if new subdomains need to access the dev server</span>\n    allowedHosts<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">\'https://webpack.docschina.org/.host.com\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'https://webpack.docschina.org/host2.com\'</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>要将这个选项与 CLI 一起使用，请将 <code>--allowed-hosts</code> 的转换为用逗号分割的字符串并传入。</p> <pre><code class="hljs language-bash">webpack serve --entry ./entry/file --output-path ./output/path --allowed-hosts .host.com,host2.com</code></pre> <h2 id="devserverbefore"><code>devServer.before</code> <a href="#devserverbefore" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>function (app, server, compiler)</code></p> <p>提供了一个在 <code>devServer</code> 内部的 所有中间件执行之前的自定义执行函数。 例：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">before</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> server<span class="token punctuation">,</span> compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/some/path\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> custom<span class="token operator">:</span> <span class="token string">\'response\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserverbonjour"><code>devServer.bonjour</code> <a href="#devserverbonjour" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>这个配置用于在启动时通过 <a href="http://www.zeroconf.org/">ZeroConf</a> 网络广播你的开发服务器，用于服务发现。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    bonjour<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --bonjour</code></pre> <h2 id="devserverclientloglevel"><code>devServer.clientLogLevel</code> <a href="#devserverclientloglevel" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'info\': \'silent\' | \'trace\' | \'debug\' | \'info\' | \'warn\' | \'error\' | \'none\' | \'warning\'</code></p> <blockquote class="warning"> <p><code>none</code> 和 <code>warning</code> 将在下一个主要版本中弃用。</p> </blockquote> <p>当使用 <em>inline mode</em> 时， DevTools 会输出信息，例如：重新加载之前，出错之前或 <a href="concepts/hot-module-replacement/index.htm"/*tpa=https://webpack.docschina.org/concepts/hot-module-replacement/*/>Hot Module Replacement</a> 被开启时。</p> <p><code>devServer.clientLogLevel</code> 可能会导致日志过于冗余，你可以通过将其设置为 <code>\'silent\'</code> 来关闭日志。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    clientLogLevel<span class="token operator">:</span> <span class="token string">\'silent\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --client-log-level silent</code></pre> <h2 id="devservercompress"><code>devServer.compress</code> <a href="#devservercompress" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>为每个静态文件开启 <a href="https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/">gzip compression</a>：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    compress<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --compress</code></pre> <h2 id="devservercontentbase"><code>devServer.contentBase</code> <a href="#devservercontentbase" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean: false</code> <code>string</code> <code>[string]</code> <code>number</code></p> <p>告诉服务器内容的来源。仅在需要提供静态文件时才进行配置。<a href="#devserverpublicpath-"><code>devServer.publicPath</code></a> 将用于确定 bundle 的来源，并具有优先级高于 contentBase。</p> <blockquote class="tip"> <p>建议使用绝对路径。</p> </blockquote> <p>默认情况下，它将使用当前的工作目录来提供内容。 要禁用 <code>contentBase</code> ，请将其设置为 <code>false</code> 。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    contentBase<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'public\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>如果想使用 <a href="#devservercontentbasepublicpath"><code>contentBasePublicPath</code></a> 在多个 URL 上提供静态内容，也可以从多个目录提供服务：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    contentBase<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'public\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'assets\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --content-base ./path/to/content/dir</code></pre> <h2 id="devservercontentbasepublicpath"><code>devServer.contentBasePublicPath</code> <a href="#devservercontentbasepublicpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'/\'</code> <code>[string]</code></p> <p>告诉服务器使用哪个 URL 服务 <code>devServer.contentBase</code> 静态内容。如果有一个文件 <code>assets/manifest.json</code> ，它将在 <code>/serve-content-base-at-this-url/manifest.json</code> 中提供。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    contentBase<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'assets\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    contentBasePublicPath<span class="token operator">:</span> <span class="token string">\'/serve-content-base-at-this-url\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>如果在 <a href="#devservercontentbase"><code>contentBase</code></a> 中设置了多个静态文件夹，请提供一个字符串数组。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    contentBase<span class="token operator">:</span> <span class="token punctuation">[</span>contentBasePublic<span class="token punctuation">,</span> contentBaseOther<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    contentBasePublicPath<span class="token operator">:</span> <span class="token punctuation">[</span>\n      contentBasePublicPath<span class="token punctuation">,</span>\n      contentBasePublicOtherPath\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserverdisablehostcheck"><code>devServer.disableHostCheck</code> <a href="#devserverdisablehostcheck" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>当将此项配置设置为 <code>true</code> 时，将会跳过 host 检查. <strong>这是不推荐的</strong> 因为不检查host的应用容易受到DNS重新绑定攻击。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    disableHostCheck<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --disable-host-check</code></pre> <h2 id="devserverfilename-"><code>devServer.filename</code> 🔑 <a href="#devserverfilename-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>此选项可以减少在 <a href="#devserverlazy-">lazy 模式</a>中的编译操作。 默认情况下，在 <a href="#devserverlazy-">lazy 模式</a>中，每个请求都触发新的编译。使用 <code>filename</code> 仅当请求某个文件时才可执行编译。</p> <p>如果 <a href="configuration/output/index.htm#outputfilename"/*tpa=https://webpack.docschina.org/configuration/output/#outputfilename*/><code>output.filename</code></a> 设置为<code>\'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/</code>，则使用 <code>devServer.filename</code> 如下：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    lazy<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>现在它将仅在请求 <code>/bundle.js</code> 时编译该捆绑软件。</p> <blockquote class="tip"> <p>当不使用 <a href="#devserverlazy-">lazy 模式</a>时，<code>filename</code> 不会生效.</p> </blockquote> <h2 id="devserverheaders-"><code>devServer.headers</code> 🔑 <a href="#devserverheaders-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>为所有请求添加响应标头：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    headers<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'X-Custom-Foo\'</span><span class="token operator">:</span> <span class="token string">\'bar\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserverhistoryapifallback"><code>devServer.historyApiFallback</code> <a href="#devserverhistoryapifallback" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>object</code></p> <p>当使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History">HTML5 History API</a> 时, 所有的 <code>404</code> 请求都会响应 <code>index.html</code> 的内容。 将 <code>devServer.historyApiFallback</code> 设为 <code>true</code>开启：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    historyApiFallback<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过传递对象，可以使用配置选项诸如 <code>rewrites</code>:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    historyApiFallback<span class="token operator">:</span> <span class="token punctuation">{</span>\n      rewrites<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> to<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/views/landing.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/subpage</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> to<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/views/subpage.html\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> to<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/views/404.html\'</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>在路径中使用点时（与 Angular 相同），可能需要使用 <code>disableDotRule</code>：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    historyApiFallback<span class="token operator">:</span> <span class="token punctuation">{</span>\n      disableDotRule<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --history-api-fallback</code></pre> <p>有关更多选项和信息，请参见 <a href="https://github.com/bripkens/connect-history-api-fallback">connect-history-api-fallback</a> 文档。</p> <h2 id="devserverhost"><code>devServer.host</code> <a href="#devserverhost" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'localhost\'</code></p> <p>指定要使用的 host。如果你希望服务器可从外部访问，请按以下方式进行配置：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    host<span class="token operator">:</span> <span class="token string">\'0.0.0.0\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --host <span class="token number">0.0</span>.0.0</code></pre> <h2 id="devserverhot"><code>devServer.hot</code> <a href="#devserverhot" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>启用 webpack 的 <a href="concepts/hot-module-replacement/index.htm"/*tpa=https://webpack.docschina.org/concepts/hot-module-replacement/*/>Hot Module Replacement</a> 功能：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hot<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>请注意，要完全启用 HMR ，需要 <a href="plugins/hot-module-replacement-plugin/index.htm"/*tpa=https://webpack.docschina.org/plugins/hot-module-replacement-plugin/*/><code>webpack.HotModuleReplacementPlugin</code></a>。如果使用 --hot 选项启动 <code>webpack</code> 或 <code>webpack-dev-server</code>，该插件将自动添加，因此你可能不需要将其添加到 <code>webpack.config.js</code> 中。有关更多信息，请参见 <a href="concepts/hot-module-replacement/index.htm"/*tpa=https://webpack.docschina.org/concepts/hot-module-replacement/*/>HMR 概览章节</a>。</p> </blockquote> <h2 id="devserverhotonly"><code>devServer.hotOnly</code> <a href="#devserverhotonly" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>启用热模块替换（请参见 <a href="#devserverhot"><code>devServer.hot</code></a> ），而无需页面刷新作为构建失败时的回退。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hotOnly<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --hot only</code></pre> <h2 id="devserverhttp2"><code>devServer.http2</code> <a href="#devserverhttp2" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>使用 <a href="https://www.npmjs.com/package/spdy">spdy</a> 提供 HTTP/2 服务。对于 Node 10.0.0 及更高版本，此选项将被忽略，因为 spdy 在这些版本中已被破坏。一旦 <a href="https://expressjs.com/">Express</a> 支持，开发服务器将迁移到 Node 内置的 HTTP/2。</p> <p>如果未将 <code>devServer.http2</code> 显式设置为 false ，则在启用 <a href="#devserverhttps"><code>devServer.https</code></a> 时将默认为 true 。 如果启用 <code>devServer.http2</code>，但服务器无法通过 HTTP/2 提供服务，则服务器默认为 HTTPS。</p> <p>HTTP/2 带有自签名证书：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    http2<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过 <a href="#devserverhttps">https</a> 配置你自己的证书文件:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    http2<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    https<span class="token operator">:</span> <span class="token punctuation">{</span>\n      key<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'https://webpack.docschina.org/path/to/server.key\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      cert<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'https://webpack.docschina.org/path/to/server.crt\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      ca<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'https://webpack.docschina.org/path/to/ca.pem\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --http2</code></pre> <p>要通过CLI使用自己的证书，请使用以下选项</p> <pre><code class="hljs language-bash">webpack serve --http2 --key ./path/to/server.key --cert ./path/to/server.crt --cacert ./path/to/ca.pem</code></pre> <h2 id="devserverhttps"><code>devServer.https</code> <a href="#devserverhttps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code> <code>object</code></p> <p>默认情况下，开发服务器将通过HTTP提供服务。可以选择使用HTTPS通过HTTP/2提供服务：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    https<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>根据上述配置，将使用自签名证书，但是你也可以提供自己的证书：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    https<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    key<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'https://webpack.docschina.org/path/to/server.key\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    cert<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'https://webpack.docschina.org/path/to/server.crt\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    ca<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'https://webpack.docschina.org/path/to/ca.pem\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>该对象直接传递到 Node.js HTTPS 模块，因此请参阅 <a href="https://nodejs.org/api/https.html">HTTPS documentation</a> 以获取更多信息。</p> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --https</code></pre> <p>要通过 CLI 使用自己的证书，请使用以下选项</p> <pre><code class="hljs language-bash">webpack serve --https --key ./path/to/server.key --cert ./path/to/server.crt --cacert ./path/to/ca.pem</code></pre> <h2 id="devserverindex"><code>devServer.index</code> <a href="#devserverindex" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>设置 index 文件的文件名。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    index<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/index.html\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserverinfo---cli-only"><code>devServer.info</code> - CLI only <a href="#devserverinfo---cli-only" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>输出 cli 信息。默认情况下启用。</p> <pre><code class="hljs language-bash">webpack serve --info <span class="token boolean">false</span></code></pre> <h2 id="devserverinjectclient"><code>devServer.injectClient</code> <a href="#devserverinjectclient" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>function (compilerConfig) => boolean</code></p> <p>向 <code>devServer</code> 注入一个客户端。设置 <code>devServer.injectClient</code> 值为 <code>true</code> 时，会向服务注入客户端。也可以设置条件注入函数：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">injectClient</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">compilerConfig</span><span class="token punctuation">)</span> <span class="token operator">=></span> compilerConfig<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'only-include\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserverinjecthot"><code>devServer.injectHot</code> <a href="#devserverinjecthot" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>function (compilerConfig) => boolean</code></p> <p>告诉 <code>devServer</code> 注入热模块替换。设置 <code>devServer.injectHot</code> 值为 <code>true</code> 时，会始终注入。也可以设置条件注入函数：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">injectHot</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">compilerConfig</span><span class="token punctuation">)</span> <span class="token operator">=></span> compilerConfig<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'only-include\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>使用前请确保 <a href="#devserverhot"><code>devServer.hot</code></a> 的值设置为 <code>true</code>，因为 <code>devServer.injectHot</code> 仅适用于 HMR。</p> </blockquote> <h2 id="devserverinline"><code>devServer.inline</code> <a href="#devserverinline" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>在开发服务器的两种不同模式之间切换。默认情况下，应用程序将启用 <strong>inline模式</strong>。这意味着将在 bundle 中插入脚本以进行实时重新加载，并且构建消息将出现在浏览器控制台中。</p> <p>也可以使用 <strong>iframe模式</strong>，它在通知栏下使用带有有关构建消息的<code>&#x3C;iframe></code>。 切换到 <strong>iframe模式</strong>：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    inline<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --inline <span class="token boolean">false</span></code></pre> <blockquote class="tip"> <p>对于 <a href="plugins/hot-module-replacement-plugin/index.htm"/*tpa=https://webpack.docschina.org/plugins/hot-module-replacement-plugin/*/>Hot Module Replacement</a> ，建议使用串联模式，因为它包含来自 websocket 的 HMR 触发器。 轮询模式可以用作替代方法，但需要附加的入口点<code>\'webpack/hot/poll?1000\'</code>。</p> </blockquote> <h2 id="devserverlazy-"><code>devServer.lazy</code> 🔑 <a href="#devserverlazy-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>启用 <code>devServer.lazy</code> 时，开发服务器仅在收到请求时才编译捆绑软件。 这意味着webpack将不会监视任何文件更改。 我们称这种方式为“懒惰模式(<strong>lazy mode</strong>)”。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    lazy<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --lazy</code></pre> <blockquote class="tip"> <p><a href="#devserverwatchoptions-"><code>watchOptions</code></a> 不会有任何副作用当使用 <strong>lazy mode</strong> 时。</p> </blockquote> <blockquote class="tip"> <p>如果是通过命令行使用, 请确保 <strong>inline mode</strong> 处于禁用状态。</p> </blockquote> <h2 id="devserverlivereload"><code>devServer.liveReload</code> <a href="#devserverlivereload" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>默认情况下，检测到文件更改时，开发服务器将重新加载/刷新页面。 必须禁用 <a href="#devserverhot"><code>devServer.hot</code></a> 选项或必须启用 <a href="#devserverwatchcontentbase"><code>devServer.watchContentBase</code></a> 选项，才能使 liveReload 生效。 通过将其设置为 false 来禁用 devServer.liveReload：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    liveReload<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --no-live-reload</code></pre> <h2 id="devservermimetypes-"><code>devServer.mimeTypes</code> 🔑 <a href="#devservermimetypes-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>允许 dev-server 注册自定义的mime类型。 该对象被传递到底层的 <code>webpack-dev-middleware</code>。 有关使用说明，请参见 <a href="https://github.com/webpack/webpack-dev-middleware#mimetypes">documentation</a> 。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    mimeTypes<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">\'text/html\'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'phtml\'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devservernoinfo-"><code>devServer.noInfo</code> 🔑 <a href="#devservernoinfo-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>告诉开发服务器禁止显示诸如 Webpack 捆绑包信息之类的消息。 错误和警告仍将显示。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    noInfo<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserveronlistening"><code>devServer.onListening</code> <a href="#devserveronlistening" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>function (server)</code></p> <p>提供一个选项，当 <code>webpack-dev-server</code> 开始监听端口上的连接时，执行自定义功能。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">onListening</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> port <span class="token operator">=</span> server<span class="token punctuation">.</span>listeningApp<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>port<span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Listening on port:\'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserveropen"><code>devServer.open</code> <a href="#devserveropen" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>string</code> <code>object</code></p> <p>告诉 dev-server 在服务器启动后打开浏览器。 将其设置为 <code>true</code> 以打开默认浏览器。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    open<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>提供要使用的浏览器名称，而不是默认名称：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    open<span class="token operator">:</span> <span class="token string">\'Google Chrome\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>如果要在打开浏览器时使用标志，例如打开隐身窗口（ <code>--incognito</code> 标志），则可以将 <code>open</code> 设置为对象。 该对象接受所有 <a href="https://www.npmjs.com/package/open">open</a> 选项，<code>app</code> 属性必须是一个数组。 数组中的第一个元素必须是浏览器名称，其他后面的元素是要使用的标志。 例如：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    open<span class="token operator">:</span> <span class="token punctuation">{</span>\n      app<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'Google Chrome\'</span><span class="token punctuation">,</span> <span class="token string">\'--incognito\'</span><span class="token punctuation">,</span> <span class="token string">\'--other-flag\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --open <span class="token string">\'Google Chrome\'</span></code></pre> <blockquote class="tip"> <p>浏览器应用程序名称取决于平台。 不要在可重用模块中对其进行硬编码。 例如，<code>\'Chrome\'</code> 在macOS上是 <code>\'Google Chrome\'</code> ，在Linux上是 <code>\'Google Chrome\'</code> 在Windows上是 <code>\'Chrome\'</code> 。</p> </blockquote> <h2 id="devserveropenpage"><code>devServer.openPage</code> <a href="#devserveropenpage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>[string]</code></p> <p>指定打开浏览器时要浏览的页面。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    openPage<span class="token operator">:</span> <span class="token string">\'/different/page\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --open-page /different/page</code></pre> <p>如果希望指定多个页面在浏览器中打开。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    openPage<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'/different/page1\'</span><span class="token punctuation">,</span> <span class="token string">\'/different/page2\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --open-page /different/page1,/different/page2</code></pre> <h2 id="devserveroverlay"><code>devServer.overlay</code> <a href="#devserveroverlay" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>object: { errors boolean = false, warnings boolean = false }</code></p> <p>出现编译器错误或警告时，在浏览器中显示全屏覆盖。 如果只想显示编译器错误：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    overlay<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>如果要显示警告和错误：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    overlay<span class="token operator">:</span> <span class="token punctuation">{</span>\n      warnings<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      errors<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserverpfx"><code>devServer.pfx</code> <a href="#devserverpfx" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>通过CLI使用时，是SSL .pfx文件的路径。 如果在选项中使用，则它应该是.pfx文件的字节流。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    pfx<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/path/to/file.pfx\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --pfx ./path/to/file.pfx</code></pre> <h2 id="devserverpfxpassphrase"><code>devServer.pfxPassphrase</code> <a href="#devserverpfxpassphrase" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>将密码短语转换为SSL PFX文件。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    pfxPassphrase<span class="token operator">:</span> <span class="token string">\'passphrase\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --pfx-passphrase passphrase</code></pre> <h2 id="devserverport"><code>devServer.port</code> <a href="#devserverport" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number</code></p> <p>指定端口号以侦听以下请求：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    port<span class="token operator">:</span> <span class="token number">8080</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --port <span class="token number">8080</span></code></pre> <h2 id="devserverproxy"><code>devServer.proxy</code> <a href="#devserverproxy" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code> <code>[object, function]</code></p> <p>当拥有单独的API后端开发服务器并且希望在同一域上发送API请求时，代理某些URL可能会很有用。</p> <p>开发服务器使用功能强大的 <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a> 软件包。 查看其 <a href="https://github.com/chimurai/http-proxy-middleware#options">documentation</a> 了解更多高级用法。 请注意，<code>http-proxy-middleware</code> 的某些功能不需要<code>target</code>键，例如 它的 <code>router</code> 功能，但是仍然需要在此处的配置中包含<code>target</code>，否则<code>webpack-dev-server</code> 不会将其传递给 <code>http-proxy-middleware</code>）。</p> <p>使用后端在 <code>localhost:3000</code> 上，可以使用它来启用代理：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token operator">:</span> <span class="token string">\'http://localhost:3000/\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>现在，对 <code>/api/users</code> 的请求会将请求代理到 <code>http://localhost:3000/api/users</code>。</p> <p>如果不希望传递<code>/api</code>，则需要重写路径：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        target<span class="token operator">:</span> <span class="token string">\'http://localhost:3000/\'</span><span class="token punctuation">,</span>\n        pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">\'^/api\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>默认情况下，将不接受在 HTTPS 上运行且证书无效的后端服务器。 如果需要，可以这样修改配置：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        target<span class="token operator">:</span> <span class="token string">\'https://other-server.example.com\'</span><span class="token punctuation">,</span>\n        secure<span class="token operator">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>有时不想代理所有内容。 可以基于函数的返回值绕过代理。</p> <p>在该功能中，可以访问请求，响应和代理选项。</p> <ul> <li>返回 <code>null</code> 或 <code>undefined</code> 以继续使用代理处理请求。</li> <li>返回 <code>false</code> 会为请求产生404错误。</li> <li>返回提供服务的路径，而不是继续代理请求。</li> </ul> <p>例如。 对于浏览器请求，想要提供 HTML 页面，但是对于 API 请求，想要代理它。 可以执行以下操作：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        target<span class="token operator">:</span> <span class="token string">\'http://localhost:3000/\'</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">bypass</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> proxyOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>accept<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'html\'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Skipping proxy for browser request.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token string">\'https://webpack.docschina.org/index.html\'</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>如果想将多个特定路径代理到同一目标，则可以使用一个或多个带有 <code>context</code> 属性的对象的数组：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      context<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'/auth\'</span><span class="token punctuation">,</span> <span class="token string">\'/api\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      target<span class="token operator">:</span> <span class="token string">\'http://localhost:3000/\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>请注意，默认情况下不会代理对 root 的请求。 要启用根代理，应将 <code>devServer.index</code> 选项指定为虚假值：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    index<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// specify to enable root proxying</span>\n    host<span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    contentBase<span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">context</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      target<span class="token operator">:</span> <span class="token string">\'http://localhost:1234/\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>默认情况下，代理时会保留主机头的来源，可以将 <code>changeOrigin</code> 设置为 <code>true</code> 以覆盖此行为。 在某些情况下，例如使用 <a href="https://en.wikipedia.org/wiki/Virtual_hosting#Name-based">name-based virtual hosted sites</a>，它很有用。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'/api\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        target<span class="token operator">:</span> <span class="token string">\'http://localhost:3000/\'</span><span class="token punctuation">,</span>\n        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserverprogress---cli-only"><code>devServer.progress</code> - CLI only <a href="#devserverprogress---cli-only" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>将运行进度输出到控制台。</p> <pre><code class="hljs language-bash">webpack serve --progress</code></pre> <h2 id="devserverpublic"><code>devServer.public</code> <a href="#devserverpublic" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>使用 <em>inline模式</em> 并代理 dev-server 时，内联客户端脚本并不总是知道要连接到哪里。 它将尝试基于 <code>window.location</code> 猜测服务器的 URL，但是如果失败，则需要使用它。</p> <p>例如，开发服务器由 nginx 代理，并在 <code>myapp.test</code> 上可用：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span><span class="token operator">:</span> <span class="token string">\'myapp.test:80\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --public myapp.test:80</code></pre> <h2 id="devserverpublicpath-"><code>devServer.publicPath</code> 🔑 <a href="#devserverpublicpath-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'/\'</code></p> <p>捆绑的文件将在此路径下的浏览器中可用。</p> <p>假设服务器在 <code>http://localhost:8080</code> 下运行，并且 <a href="configuration/output/index.htm#outputfilename"/*tpa=https://webpack.docschina.org/configuration/output/#outputfilename*/><code>output.filename</code></a> 设置为 <code>bundle.js</code>。 默认情况下，<code>devServer.publicPath</code> 为 <code>\'/\'</code>，因此的捆绑软件可以作为 <code>http://localhost:8080/bundle.js</code> 获得。</p> <p>更改 <code>devServer.publicPath</code> 以将捆绑软件放在特定目录下：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'/assets/\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>该捆绑包现在将以 <code>http://localhost:8080/assets/bundle.js</code> 的形式提供。</p> <blockquote class="tip"> <p>确保 <code>devServer.publicPath</code> 始终以正斜杠开头和结尾。</p> </blockquote> <p>也可以使用完整的URL。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'http://localhost:8080/assets/\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>该捆绑包现在将以 <code>http://localhost:8080/assets/bundle.js</code> 的形式提供。</p> <blockquote class="tip"> <p>建议 <code>devServer.publicPath</code> 与 <a href="configuration/output/index.htm#outputpublicpath"/*tpa=https://webpack.docschina.org/configuration/output/#outputpublicpath*/><code>output.publicPath</code></a> 相同。</p> </blockquote> <h2 id="devserverquiet-"><code>devServer.quiet</code> 🔑 <a href="#devserverquiet-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>启用 <code>devServer.quiet</code> 后，除了初始启动信息外，什么都不会写入控制台。 这也意味着来自webpack的错误或警告是不可见的。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    quiet<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --quiet</code></pre> <h2 id="devserverserveindex"><code>devServer.serveIndex</code> <a href="#devserverserveindex" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>告诉开发服务器启用后使用 <a href="https://github.com/expressjs/serve-index"><code>serveIndex</code></a> 中间件。</p> <p><a href="https://github.com/expressjs/serve-index"><code>serveIndex</code></a> 中间件会在查看没有index.html文件的目录时生成目录列表。</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    serveIndex<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserversetup"><code>devServer.setup</code> <a href="#devserversetup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>function (app, server)</code></p> <blockquote class="warning"> <p>这个选项将被 <a href="#devserverbefore"><code>devServer.before</code></a> 所支持，并将在v3.0.0中删除。</p> </blockquote> <p>在这里，可以访问 Express 应用程序对象，并向其中添加自己的自定义中间件。 例如，为某些路径定义自定义处理程序：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">setup</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/some/path\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> custom<span class="token operator">:</span> <span class="token string">\'response\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserversockhost"><code>devServer.sockHost</code> <a href="#devserversockhost" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>告诉连接到 <code>devServer</code> 的客户端使用提供的套接字主机。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    sockHost<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/myhost.test\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserversockpath"><code>devServer.sockPath</code> <a href="#devserversockpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'/sockjs-node\'</code></p> <p>连接到重装插槽的路径。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    sockPath<span class="token operator">:</span> <span class="token string">\'/socket\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --sock-path /socket</code></pre> <h2 id="devserversockport"><code>devServer.sockPort</code> <a href="#devserversockport" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number</code> <code>string</code></p> <p>告诉连接到<code>devServer</code>的客户端使用提供的套接字端口。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    sockPort<span class="token operator">:</span> <span class="token number">8080</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserverstaticoptions"><code>devServer.staticOptions</code> <a href="#devserverstaticoptions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>可以配置高级选项以从 <code>contentBase</code> 提供静态文件。 有关可能的选项，请参见 <a href="http://expressjs.com/en/4x/api.html#express.static">Express documentation</a>。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    staticOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      redirect<span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>这仅在将 <a href="#devservercontentbase"><code>devServer.contentBase</code></a> 用作字符串时有效。</p> </blockquote> <h2 id="devserverstats-"><code>devServer.stats</code> 🔑 <a href="#devserverstats-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string: \'none\' | \'errors-only\' | \'minimal\' | \'normal\' | \'verbose\'</code> <code>object</code></p> <p>此选项使可以精确控制显示哪些捆绑软件信息。 如果需要一些捆绑软件信息，但又不是全部，这可能是一个很好的中间立场。</p> <p>要仅显示捆绑软件中的错误：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    stats<span class="token operator">:</span> <span class="token string">\'errors-only\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>有关更多信息，请参见 <a href="configuration/stats/index.htm"/*tpa=https://webpack.docschina.org/configuration/stats/*/><strong>stats documentation</strong></a>。</p> <blockquote class="tip"> <p>与 <code>quiet</code> 或 <code>noInfo</code> 一起使用时，该选项无效。</p> </blockquote> <h2 id="devserverstdin---cli-only"><code>devServer.stdin</code> - CLI only <a href="#devserverstdin---cli-only" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>当stdin结束时，此选项将关闭服务器。</p> <pre><code class="hljs language-bash">webpack serve --stdin</code></pre> <h2 id="devservertransportmode"><code>devServer.transportMode</code> <a href="#devservertransportmode" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'sockjs\': \'sockjs\' | \'ws\'</code> <code>object</code></p> <blockquote class="warning"> <p><code>transportMode</code> 是一个实验性选项，这意味着其用法可能会更改，而不会发出警告。</p> </blockquote> <blockquote class="tip"> <p>将字符串提供给d <code>devServer.transportMode</code> 是将 <code>devServer.transportMode.client</code> 和 <code>devServer.transportMode.server</code> 都设置为给定字符串值的快捷方式。</p> </blockquote> <p>这个选项允许我们要么为客户端/服务器分别选择当前的<code>devServer</code>传输模式，要么提供定制的客户端/服务器实现。 这允许指定浏览器或其他客户端如何与<code>devServer</code>通信。</p> <p>当前的默认模式是 <a href="https://www.npmjs.com/package/sockjs"><code>\'sockjs\'</code></a>。 此模式使用 <a href="https://github.com/sockjs/sockjs-node">SockJS-node</a> 作为服务器，并使用 <a href="https://www.npmjs.com/package/sockjs-client">SockJS-client</a> 在客户端上。</p> <p>在下一代主要的 <code>devServer</code> 版本中，<code>\'ws\'</code> 模式将成为默认模式。 此模式将 <a href="https://www.npmjs.com/package/ws">ws</a> 用作服务器，并在客户端上使用本机 WebSocket。</p> <p>Use <code>\'ws\'</code> mode:</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token operator">:</span> <span class="token string">\'ws\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>提供自定义客户端和服务器实现时，请确保它们彼此兼容，以成功进行通信。</p> </blockquote> <h3 id="devservertransportmodeclient"><code>devServer.transportMode.client</code> <a href="#devservertransportmodeclient" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>string</code> <code>path</code></p> <p>要创建自定义客户端实现，请创建一个扩展并继承 <a href="../github.com/webpack/webpack-dev-server/blob/master/client-src/clients/BaseClient.js"/*tpa=https://github.com/webpack/webpack-dev-server/blob/master/client-src/clients/BaseClient.js*/><code>BaseClient</code></a>.</p> <p>使用<code>CustomServer.js</code>导出的类实现自定义WebSocket客户端并兼容<code>ws</code>服务端：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token operator">:</span> <span class="token punctuation">{</span>\n      client<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./CustomClient\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      server<span class="token operator">:</span> <span class="token string">\'ws\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="devservertransportmodeserver"><code>devServer.transportMode.server</code> <a href="#devservertransportmodeserver" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>string</code> <code>path</code> <code>function</code></p> <p>要创建自定义服务器实现，请创建一个扩展并继承 <a href="../github.com/webpack/webpack-dev-server/blob/master/lib/servers/BaseServer.js"/*tpa=https://github.com/webpack/webpack-dev-server/blob/master/lib/servers/BaseServer.js*/><code>BaseServer</code></a>.</p> <p>使用<code>CustomServer.js</code>导出的类实现自定义WebSocket服务器并兼容<code>ws</code>客户端：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token operator">:</span> <span class="token punctuation">{</span>\n      client<span class="token operator">:</span> <span class="token string">\'ws\'</span><span class="token punctuation">,</span>\n      server<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./CustomServer\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>使用 <code>CustomServer.js</code> 导出的类实现自定义WebSocket服务器并兼容 <code>ws</code> 客户端：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token operator">:</span> <span class="token punctuation">{</span>\n      client<span class="token operator">:</span> <span class="token string">\'ws\'</span><span class="token punctuation">,</span>\n      server<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./CustomServer\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>使用自定义兼容的WebSocket客户端和服务器实现：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    transportMode<span class="token operator">:</span> <span class="token punctuation">{</span>\n      client<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./CustomClient\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      server<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./CustomServer\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="devserveruselocalip"><code>devServer.useLocalIp</code> <a href="#devserveruselocalip" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>此选项使浏览器可以使用的本地IP打开。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    useLocalIp<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --use-local-ip</code></pre> <h2 id="devserverwatchcontentbase"><code>devServer.watchContentBase</code> <a href="#devserverwatchcontentbase" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>告诉 dev-server 监听 [<code>devServer.contentBase</code>]（＃devservercontentbase）选项提供的文件。 默认情况下禁用。 启用后，文件更改将触发整个页面重新加载。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    watchContentBase<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过命令行使用</p> <pre><code class="hljs language-bash">webpack serve --watch-content-base</code></pre> <h2 id="devserverwatchoptions-"><code>devServer.watchOptions</code> 🔑 <a href="#devserverwatchoptions-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>控制监听文件的选项。</p> <p>webpack 使用文件系统来通知文件更改。 在某些情况下，这不起作用。 例如，使用网络文件系统（NFS）时。 <a href="https://www.vagrantup.com/">Vagrant</a> 也有很多问题。 在这些情况下，请使用轮询：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      poll<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>如果这对文件系统负荷太重，可以将其设置为整数用以调整轮询间隔（以毫秒为单位）。</p> <p>查阅 <a href="configuration/watch/index.htm"/*tpa=https://webpack.docschina.org/configuration/watch/*/>WatchOptions</a> 了解更多。</p> <h2 id="devserverwritetodisk-"><code>devServer.writeToDisk</code> 🔑 <a href="#devserverwritetodisk-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>function (filePath) => boolean</code></p> <p>告诉 <code>devServer</code> 将产生的文件写入硬盘。 写入位置为 <a href="configuration/output/index.htm#outputpath"/*tpa=https://webpack.docschina.org/configuration/output/#outputpath*/>output.path</a> 配置的目录。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    writeToDisk<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>可以给 <code>devServer.writeToDisk</code> 传入一个函数用来筛选哪些文件需要写入硬盘。传入函数的用法和<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><code>Array#filter</code></a> 的用法一致。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">writeToDisk</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">superman\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>有可能需要通过 <code>NODE_OPTIONS</code> 设置一些 Node.js 的标记，例如，配置 <code>HTTP_MAX_HEADER_SIZE</code>:</p> </blockquote> <p><strong>package.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token string">"NODE_OPTIONS=\'--max-http-header-size=100000\' webpack serve"</span>\n<span class="token punctuation">}</span></code></pre> '}}]);