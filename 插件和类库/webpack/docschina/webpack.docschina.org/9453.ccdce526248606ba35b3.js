(self.webpackChunk=self.webpackChunk||[]).push([[9453],{9453:function(a){a.exports='<p>webpack 可以监听文件变化，当它们修改后会重新编译。这个页面介绍了如何启用这个功能，以及当 watch 无法正常运行的时候你可以做的一些调整。</p> <h2 id="watch"><code>watch</code> <a href="#watch" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>启用 Watch 模式。这意味着在初始构建之后，webpack 将继续监听任何已解析文件的更改。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  watch<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p><a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 和 <a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a> 里 Watch 模式默认开启。</p> </blockquote> <h2 id="watchoptions"><code>watchOptions</code> <a href="#watchoptions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>一组用来定制 watch 模式的选项：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    aggregateTimeout<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n    poll<span class="token operator">:</span> <span class="token number">1000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="watchoptionsaggregatetimeout"><code>watchOptions.aggregateTimeout</code> <a href="#watchoptionsaggregatetimeout" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number = 200</code></p> <p>当第一个文件更改，会在重新构建前增加延迟。这个选项允许 webpack 将这段时间内进行的任何其他更改都聚合到一次重新构建里。以毫秒为单位：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    aggregateTimeout<span class="token operator">:</span> <span class="token number">600</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="watchoptionsignored"><code>watchOptions.ignored</code> <a href="#watchoptionsignored" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>RegExp</code> <code>string</code> <code>[string]</code></p> <p>对于某些系统，监听大量文件会导致大量的 CPU 或内存占用。可以使用正则排除像 <code>node_modules</code> 如此庞大的文件夹：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    ignored<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此外，还可以使用 glob 模式：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    ignored<span class="token operator">:</span> <span class="token string">\'node_modules/**\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>也可以使用多 glob 匹配模式：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    ignored<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'files/**/*.js\'</span><span class="token punctuation">,</span> <span class="token string">\'node_modules/**\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>如果你使用 <code>require.context</code>，webpack 会观察你的整个目录。你应该忽略一些文件和/或(and/or)目录，以便那些不需要监听的文件修改，不会触发重新构建。</p> </blockquote> <h2 id="watchoptionspoll"><code>watchOptions.poll</code> <a href="#watchoptionspoll" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>number</code></p> <p>通过传递 <code>true</code> 开启 <a href="https://whatis.techtarget.com/definition/polling">polling</a>，或者指定毫秒为单位进行轮询。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    poll<span class="token operator">:</span> <span class="token number">1000</span> <span class="token comment">// 每秒检查一次变动</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>如果监听没生效，试试这个选项吧。Watch 在 NFS 和 VirtualBox 机器上不适用。</p> </blockquote> <h2 id="troubleshooting">故障排除 <a href="#troubleshooting" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>如果您遇到任何问题，请查看以下注意事项。对于 webpack 为何会忽略文件修改，这里有多种原因。</p> <h3 id="changes-seen-but-not-processed">发现修改，但并未做处理 <a href="#changes-seen-but-not-processed" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在运行 webpack 时，通过使用 --progress 标志，来验证文件修改后，是否没有通知 webpack。如果进度显示保存，但没有输出文件，则可能是配置问题，而不是文件监视问题。</p> <pre><code class="hljs language-bash">webpack --watch --progress</code></pre> <h3 id="not-enough-watchers">没有足够的文件观察者 <a href="#not-enough-watchers" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>确认系统中有足够多的文件观察者。如果这个值太低，webpack 中的文件观察者将无法识别修改：</p> <pre><code class="hljs language-bash"><span class="token function">cat</span> /proc/sys/fs/inotify/max_user_watches</code></pre> <p>Arch 用户，请将 <code>fs.inotify.max_user_watches=524288</code> 添加到 <code>/etc/sysctl.d/99-sysctl.conf</code> 中，然后执行 <code>sysctl --system</code>。 Ubuntu 用户（可能还有其他用户）请执行：<code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &#x26;&#x26; sudo sysctl -p</code>。</p> <h3 id="macos-fsevents-bug">macOS fsevents Bug <a href="#macos-fsevents-bug" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在 macOS 中，某些情况下文件夹可能会损坏。请参阅<a href="https://github.com/livereload/livereload-site/blob/master/livereload.com/_articles/troubleshooting/os-x-fsevents-bug-may-prevent-monitoring-of-certain-folders.md">这篇文章</a>。</p> <h3 id="windows-paths">Windows Paths <a href="#windows-paths" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>因为 webpack 期望获得多个配置选项的绝对路径（如 <code>__dirname + \'/app/folder\'</code>），所以 Windows 的路径分隔符 <code>\\</code> 可能会破坏某些功能。</p> <p>使用正确的分隔符。即 <code>path.resolve(__dirname, \'app/folder\')</code> 或 <code>path.join(__dirname, \'app\', \'folder\')</code>。</p> <h3 id="vim">Vim <a href="#vim" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在某些机器上，Vim 预先将 <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#">backupcopy 选项</a> 设置为 <code>auto</code>。这可能会导致系统的文件监视机制出现问题。将此选项设置为 <code>yes</code> 可以确保创建文件的副本，并在保存时覆盖原始文件。</p> <p><code>:set backupcopy=yes</code></p> <h3 id="saving-in-webstorm">在 WebStorm 中保存 <a href="#saving-in-webstorm" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>使用 JetBrains WebStorm IDE 时，你可能会发现保存修改过的文件，并不会按照预期触发观察者。尝试在设置中禁用<code>安全写入(safe write)</code>选项，该选项确定在原文件被覆盖之前，文件是否先保存到临时位置：取消选中 <code>File > {Settings|Preferences} > Appearance &#x26; Behavior > System Settings > Use "safe write" (save changes to a temporary file first)</code>。</p> '}}]);