(self.webpackChunk=self.webpackChunk||[]).push([[5259],{5259:function(n){n.exports='<p><code>output</code> 位于对象最顶级键(key)，包括了一组选项，指示 webpack 如何去输出、以及在哪里输出你的「bundle、asset 和其他你所打包或使用 webpack 载入的任何内容」。</p> <h2 id="outputauxiliarycomment"><code>output.auxiliaryComment</code> <a href="#outputauxiliarycomment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>object</code></p> <p>在和 <a href="#outputlibrary"><code>output.library</code></a> 和 <a href="#outputlibrarytarget"><code>output.libraryTarget</code></a> 一起使用时，此选项允许用户向导出容器(export wrapper)中插入注释。要为 <code>libraryTarget</code> 每种类型都插入相同的注释，将 <code>auxiliaryComment</code> 设置为一个字符串：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'someLibName\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'someLibName.js\'/*tpa=https://webpack.docschina.org/someLibName.js*/</span><span class="token punctuation">,</span>\n    auxiliaryComment<span class="token operator">:</span> <span class="token string">\'Test Comment\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>将会生成如下：</p> <p><strong>someLibName.js</strong></p> <pre><code class="hljs language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&#x26;&#x26;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&#x26;&#x26;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'lodash\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    exports<span class="token punctuation">[</span><span class="token string">\'someLibName\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span>\n    root<span class="token punctuation">[</span><span class="token string">\'someLibName\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token string">\'_\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">__WEBPACK_EXTERNAL_MODULE_1__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>对于 <code>libraryTarget</code> 每种类型的注释进行更细粒度地控制，请传入一个对象：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    auxiliaryComment<span class="token operator">:</span> <span class="token punctuation">{</span>\n      root<span class="token operator">:</span> <span class="token string">\'Root Comment\'</span><span class="token punctuation">,</span>\n      commonjs<span class="token operator">:</span> <span class="token string">\'CommonJS Comment\'</span><span class="token punctuation">,</span>\n      commonjs2<span class="token operator">:</span> <span class="token string">\'CommonJS2 Comment\'</span><span class="token punctuation">,</span>\n      amd<span class="token operator">:</span> <span class="token string">\'AMD Comment\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputcharset"><code>output.charset</code> <a href="#outputcharset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>告诉 webpack 为 HTML 的 <code>&#x3C;script></code> 标签添加 <code>charset="utf-8"</code> 标识。</p> <blockquote class="tip"> <p>尽管 <code>&#x3C;script></code> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#Deprecated_attributes">已弃用</a>了 <code>charset</code> 属性，当 webpack 还是默认添加了它，目的是与非现代浏览器兼容。</p> </blockquote> <h2 id="outputchunkfilename"><code>output.chunkFilename</code> <a href="#outputchunkfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'[id].js\'/*tpa=https://webpack.docschina.org/[id].js*/</code> <code>function (pathData, assetInfo) => string</code></p> <p>此选项决定了非初始（non-initial）chunk 文件的名称。有关可取的值的详细信息，请查看 <a href="#outputfilename"><code>output.filename</code></a> 选项。</p> <p>注意，这些文件名需要在运行时根据 chunk 发送的请求去生成。因此，需要在 webpack runtime 输出 bundle 值时，将 chunk id 的值对应映射到占位符(如 <code>[name]</code> 和 <code>[chunkhash]</code>)。这会增加文件大小，并且在任何 chunk 的占位符值修改后，都会使 bundle 失效。</p> <p>默认使用 <code>[id].js</code> 或从 <a href="#outputfilename"><code>output.filename</code></a> 中推断出的值（<code>[name]</code> 会被预先替换为 <code>[id]</code> 或 <code>[id].</code>）。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkFilename<span class="token operator">:</span> <span class="token string">\'[id].js\'/*tpa=https://webpack.docschina.org/[id].js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Usage as a function:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">chunkFilename</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">pathData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> pathData<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'main\'</span> <span class="token operator">?</span> <span class="token string">\'[name].js\'/*tpa=https://webpack.docschina.org/[name].js*/</span><span class="token operator">:</span> <span class="token string">\'[name]/[name].js\'/*tpa=https://webpack.docschina.org/[name]/[name].js*/</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputchunkloadtimeout"><code>output.chunkLoadTimeout</code> <a href="#outputchunkloadtimeout" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number = 120000</code></p> <p>chunk 请求到期之前的毫秒数，默认为 120000。从 webpack 2.6.0 开始支持此选项。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkLoadTimeout<span class="token operator">:</span> <span class="token number">30000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputchunkloadingglobal"><code>output.chunkLoadingGlobal</code> <a href="#outputchunkloadingglobal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'webpackChunkwebpack\'</code></p> <p>webpack 用于加载 chunk 的全局变量。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkLoadingGlobal<span class="token operator">:</span> <span class="token string">\'myCustomFunc\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputchunkloading"><code>output.chunkLoading</code> <a href="#outputchunkloading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>false</code> <code>string: \'jsonp\' | \'import-scripts\' | \'require\' | \'async-node\' | &#x3C;any string></code></p> <p>加载 chunk 的方法（默认值有 \'jsonp\' (web)，\'importScripts\' (WebWorker)，\'require\' (sync node.js)，\'async-node\' (async node.js)，还有其他值可由插件添加)。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkLoading<span class="token operator">:</span> <span class="token string">\'async-node\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputchunkformat"><code>output.chunkFormat</code> <a href="#outputchunkformat" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>false</code> <code>string: \'array-push\' | \'commonjs\' | &#x3C;any string></code></p> <p>chunk 的格式（formats 默认包含 \'array-push\' (web/WebWorker)，\'commonjs\' (node.js)，还有其他情况可由插件添加）。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkFormat<span class="token operator">:</span> <span class="token string">\'commonjs\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputenabledchunkloadingtypes"><code>output.enabledChunkLoadingTypes</code> <a href="#outputenabledchunkloadingtypes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>[string: \'jsonp\' | \'import-scripts\' | \'require\' | \'async-node\' | &#x3C;any string>]</code></p> <p>为入口启用 chunk 加载类型列表。将由 webpack 自动填充。只有在使用函数作为入口选项并返回 chunkLoading 选项时才需要。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    enabledChunkLoadingTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'jsonp\'</span><span class="token punctuation">,</span> <span class="token string">\'require\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputcrossoriginloading"><code>output.crossOriginLoading</code> <a href="#outputcrossoriginloading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>string: \'anonymous\' | \'use-credentials\'</code></p> <p>告诉 webpack 启用 <a href="https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin">cross-origin 属性</a> 加载 chunk。仅在 <a href="configuration/target/index.htm"/*tpa=https://webpack.docschina.org/configuration/target/*/><code>target</code></a> 设置为 <code>\'web\'</code> 时生效，通过使用 JSONP 来添加脚本标签，实现按需加载模块。</p> <ul> <li><code>\'anonymous\'</code> - <strong>不带凭据(credential)</strong> 启用跨域加载</li> <li><code>\'use-credentials\'</code> - <strong>携带凭据(credential)</strong> 启用跨域加载</li> </ul> <h2 id="outputdevtoolfallbackmodulefilenametemplate"><code>output.devtoolFallbackModuleFilenameTemplate</code> <a href="#outputdevtoolfallbackmodulefilenametemplate" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>function (info)</code></p> <p>当上面的模板字符串或函数产生重复时使用的备用内容。</p> <p>查看 <a href="#outputdevtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a>。</p> <h2 id="outputdevtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code> <a href="#outputdevtoolmodulefilenametemplate" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'webpack://[namespace]/[resource-path]?[loaders]\'</code> <code>function (info) => string</code></p> <p>此选项仅在 「<a href="configuration/devtool.htm"/*tpa=https://webpack.docschina.org/configuration/devtool*/><code>devtool</code></a> 使用了需要模块名称的选项」时使用。</p> <p>自定义每个 source map 的 <code>sources</code> 数组中使用的名称。可以通过传递模板字符串(template string)或者函数来完成。例如，当使用 <code>devtool: \'eval\'</code>，默认值是：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    devtoolModuleFilenameTemplate<span class="token operator">:</span> <span class="token string">\'webpack://[namespace]/[resource-path]?[loaders]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>模板字符串(template string)中做以下替换（通过 webpack 内部的 <a href="../github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js"/*tpa=https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js*/><code>ModuleFilenameHelpers</code></a>）：</p> <table> <thead> <tr> <th>Template</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Template"><span>[absolute-resource-path]</span></td> <td data-th="Description"><span>绝对路径文件名</span></td> </tr> <tr> <td data-th="Template"><span>[all-loaders]</span></td> <td data-th="Description"><span>自动和显式的 loader，并且参数取决于第一个 loader 名称</span></td> </tr> <tr> <td data-th="Template"><span>[hash]</span></td> <td data-th="Description"><span>模块标识符的 hash</span></td> </tr> <tr> <td data-th="Template"><span>[id]</span></td> <td data-th="Description"><span>模块标识符</span></td> </tr> <tr> <td data-th="Template"><span>[loaders]</span></td> <td data-th="Description"><span>显式的 loader，并且参数取决于第一个 loader 名称</span></td> </tr> <tr> <td data-th="Template"><span>[resource]</span></td> <td data-th="Description"><span>用于解析文件的路径和用于第一个 loader 的任意查询参数</span></td> </tr> <tr> <td data-th="Template"><span>[resource-path]</span></td> <td data-th="Description"><span>不带任何查询参数，用于解析文件的路径</span></td> </tr> <tr> <td data-th="Template"><span>[namespace]</span></td> <td data-th="Description"><span>模块命名空间。在构建成为一个 library 之后，通常也是 library 名称，否则为空</span></td> </tr> </tbody> </table> <p>当使用一个函数，同样的选项要通过 <code>info</code> 参数并使用驼峰式(camel-cased)：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">devtoolModuleFilenameTemplate</span><span class="token operator">:</span> <span class="token parameter">info</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">webpack:///</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>resourcePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>loaders<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>如果多个模块产生相同的名称，使用 <a href="#outputdevtoolfallbackmodulefilenametemplate"><code>output.devtoolFallbackModuleFilenameTemplate</code></a> 来代替这些模块。</p> <h2 id="outputdevtoolnamespace"><code>output.devtoolNamespace</code> <a href="#outputdevtoolnamespace" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>此选项确定 <a href="#outputdevtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a> 使用的模块名称空间。未指定时的默认值为：<a href="#outputlibrary"><code>output.library</code></a>。在加载多个通过 webpack 构建的 library 时，用于防止 source map 中源文件路径冲突。</p> <p>例如，如果你有两个 library，分别使用命名空间 <code>library1</code> 和 <code>library2</code>，并且都有一个文件 <code>./src/index.js</code>（可能具有不同内容），它们会将这些文件暴露为 <code>webpack://library1/./src/index.js</code> 和 <code>webpack://library2/./src/index.js</code>。</p> <h2 id="outputfilename"><code>output.filename</code> <a href="#outputfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>function (pathData, assetInfo) => string</code></p> <p>此选项决定了每个输出 bundle 的名称。这些 bundle 将写入到 <a href="#outputpath"><code>output.path</code></a> 选项指定的目录下。</p> <p>对于单个<a href="configuration/entry-context.htm#entry"/*tpa=https://webpack.docschina.org/configuration/entry-context#entry*/><code>入口</code></a>起点，filename 会是一个静态名称。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>然而，当通过多个入口起点(entry point)、代码拆分(code splitting)或各种插件(plugin)创建多个 bundle，应该使用以下一种替换方式，来赋予每个 bundle 一个唯一的名称……</p> <p>使用入口名称：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>使用内部 chunk id</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[id].bundle.js\'/*tpa=https://webpack.docschina.org/[id].bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>使用由生成的内容产生的 hash：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[contenthash].bundle.js\'/*tpa=https://webpack.docschina.org/[contenthash].bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>结合多个替换组合使用：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].[contenthash].bundle.js\'/*tpa=https://webpack.docschina.org/[name].[contenthash].bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>使用函数返回 filename：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">pathData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> pathData<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'main\'</span> <span class="token operator">?</span> <span class="token string">\'[name].js\'/*tpa=https://webpack.docschina.org/[name].js*/</span><span class="token operator">:</span> <span class="token string">\'[name]/[name].js\'/*tpa=https://webpack.docschina.org/[name]/[name].js*/</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>请确保已阅读过 <a href="guides/caching.htm"/*tpa=https://webpack.docschina.org/guides/caching*/>指南 - 缓存</a> 的详细信息。这里涉及更多步骤，不仅仅是设置此选项。</p> <p>注意此选项被称为文件名，但是你还是可以使用像 <code>\'js/[name]/bundle.js\'/*tpa=https://webpack.docschina.org/js/[name]/bundle.js*/</code> 这样的文件夹结构。</p> <p>注意，此选项不会影响那些「按需加载 chunk」的输出文件。它只影响最初加载的输出文件。对于按需加载的 chunk文件，请使用 <a href="#outputchunkfilename"><code>output.chunkFilename</code></a> 选项来控制输出。通过 loader 创建的文件也不受影响。在这种情况下，你必须尝试 loader 特定的可用选项。</p> <h2 id="template-strings">Template strings <a href="#template-strings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>可以使用以下替换模板字符串（通过 webpack 内部的<a href="../github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js"/*tpa=https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js*/><code>TemplatedPathPlugin</code></a>）:</p> <p>可在编译层面进行替换的内容：</p> <table> <thead> <tr> <th>模板</th> <th>描述</th> </tr> </thead> <tbody> <tr> <td data-th="模板"><span>[fullhash]</span></td> <td data-th="描述"><span>compilation 完整的 hash 值</span></td> </tr> <tr> <td data-th="模板"><span>[hash]</span></td> <td data-th="描述"><span>同上，但已弃用</span></td> </tr> </tbody> </table> <p>可在 chunk 层面进行替换的内容：</p> <table> <thead> <tr> <th>模板</th> <th>描述</th> </tr> </thead> <tbody> <tr> <td data-th="模板"><span>[id]</span></td> <td data-th="描述"><span>此 chunk 的 ID</span></td> </tr> <tr> <td data-th="模板"><span>[name]</span></td> <td data-th="描述"><span>如果设置，则为此 chunk 的名称，否则使用 chunk 的 ID</span></td> </tr> <tr> <td data-th="模板"><span>[chunkhash]</span></td> <td data-th="描述"><span>此 chunk 的 hash 值，包含该 chunk 的所有元素</span></td> </tr> <tr> <td data-th="模板"><span>[contenthash]</span></td> <td data-th="描述"><span>此 chunk 的 hash 值，只包括该内容类型的元素（受 <code>optimization.realContentHash</code> 影响）</span></td> </tr> </tbody> </table> <p>可在模块层面替换的内容：</p> <table> <thead> <tr> <th>模板</th> <th>描述</th> </tr> </thead> <tbody> <tr> <td data-th="模板"><span>[id]</span></td> <td data-th="描述"><span>模块的 ID</span></td> </tr> <tr> <td data-th="模板"><span>[moduleid]</span></td> <td data-th="描述"><span>同上，但已弃用</span></td> </tr> <tr> <td data-th="模板"><span>[hash]</span></td> <td data-th="描述"><span>模块的 Hash 值</span></td> </tr> <tr> <td data-th="模板"><span>[modulehash]</span></td> <td data-th="描述"><span>同上，但已弃用</span></td> </tr> <tr> <td data-th="模板"><span>[contenthash]</span></td> <td data-th="描述"><span>模块内容的 Hash 值</span></td> </tr> </tbody> </table> <p>可在文件层面替换的内容：</p> <table> <thead> <tr> <th>模板</th> <th>描述</th> </tr> </thead> <tbody> <tr> <td data-th="模板"><span>[file]</span></td> <td data-th="描述"><span>filename和路径，不含 query 或 fragment</span></td> </tr> <tr> <td data-th="模板"><span>[query]</span></td> <td data-th="描述"><span>带前缀 <code>?</code> 的 query</span></td> </tr> <tr> <td data-th="模板"><span>[fragment]</span></td> <td data-th="描述"><span>带前缀 <code>#</code> 的 fragment</span></td> </tr> <tr> <td data-th="模板"><span>[base]</span></td> <td data-th="描述"><span>只有 filename（包含扩展名），不含 path</span></td> </tr> <tr> <td data-th="模板"><span>[filebase]</span></td> <td data-th="描述"><span>同上，但已弃用</span></td> </tr> <tr> <td data-th="模板"><span>[path]</span></td> <td data-th="描述"><span>只有 path，不含 filename</span></td> </tr> <tr> <td data-th="模板"><span>[name]</span></td> <td data-th="描述"><span>只有 filename，不含扩展名或 path</span></td> </tr> <tr> <td data-th="模板"><span>[ext]</span></td> <td data-th="描述"><span>带前缀 <code>.</code> 的扩展名</span></td> </tr> </tbody> </table> <p>可在 URL 层面替换的内容：</p> <table> <thead> <tr> <th>模块</th> <th>描述</th> </tr> </thead> <tbody> <tr> <td data-th="模块"><span>[url]</span></td> <td data-th="描述"><span>URL</span></td> </tr> </tbody> </table> <blockquote class="tip"> <p><code>[file]</code> 等价于 <code>[path][base]</code>。<code>[base]</code> 等价于 <code>[name][ext]</code>。完整的路径为 <code>[path][name][ext][query][fragment]</code> 或 <code>[path][base][query][fragment]</code> 或 <code>[file][query][fragment]</code>。</p> </blockquote> <p><code>[hash]</code>，<code>[contenthash]</code> 或者 <code>[chunkhash]</code> 的长度可以使用 <code>[hash:16]</code>（默认为 20）来指定。或者，通过指定<a href="#outputhashdigestlength"><code>output.hashDigestLength</code></a> 在全局配置长度。</p> <p>当你要在实际文件名中使用占位符时，webpack 会过滤出需要替换的占位符。例如，输出一个文件 <code>[name].js</code>， 你必须通过在括号之间添加反斜杠来转义<code>[name]</code>占位符。 因此，<code>[\\name\\]</code> 生成 <code>[name]</code> 而不是 <code>name</code>。</p> <p>例如：<code>[\\id\\]</code> 生成 <code>[id]</code> 而不是 <code>id</code>。</p> <p>如果将这个选项设为一个函数，函数将返回一个包含上面表格中含有替换信息数据的对象。 替换也会被应用到返回的字符串中。 传递的对象将具有如下类型（取决于上下文的属性）：</p> <pre><code class="hljs language-typescript"><span class="token keyword">type</span> <span class="token class-name">PathData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  hash<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">hashWithLength</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  chunk<span class="token operator">:</span> Chunk <span class="token operator">|</span> ChunkPathData<span class="token punctuation">,</span>\n  <span class="token keyword">module</span><span class="token operator">:</span> Module <span class="token operator">|</span> ModulePathData<span class="token punctuation">,</span>\n  contentHashType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  contentHash<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">contentHashWithLength</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  filename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  runtime<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> SortableSet<span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">,</span>\n  chunkGraph<span class="token operator">:</span> ChunkGraph\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">ChunkPathData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  hash<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">hashWithLength</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  contentHash<span class="token operator">:</span> Record<span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">,</span>\n  contentHashWithLength<span class="token operator">:</span> Record<span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token operator">></span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">ModulePathData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  hash<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">hashWithLength</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span></code></pre> <blockquote class="tip"> <p>在某些上下文中，属性将使用 JavaScript 代码表达式代替原始值。在此情况下，<code>WithLength</code> 变量是可用的，应该使用它来代替对原始值的分片操作。</p> </blockquote> <h2 id="outputassetmodulefilename"><code>output.assetModuleFilename</code> <a href="#outputassetmodulefilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'[hash][ext][query]\'</code></p> <p>参考 <a href="#outputfilename"><code>output.filename</code></a> 不过应用于 <a href="guides/asset-modules/index.htm"/*tpa=https://webpack.docschina.org/guides/asset-modules/*/>Asset Modules</a></p> <h2 id="outputglobalobject"><code>output.globalObject</code> <a href="#outputglobalobject" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'window\'</code></p> <p>当输出为 library 时，尤其是当 <code>libraryTarget</code> 为 <code>\'umd\'</code>时，此选项将决定使用哪个全局对象来挂载 library。为了使 UMD 构建在浏览器和 Node.js 上均可用，应将 <code>output.globalObject</code> 选项设置为 <code>\'this\'</code>。对于类似 web 的目标，默认为 <code>self</code>。</p> <p>示例：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'myLib\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'myLib.js\'/*tpa=https://webpack.docschina.org/myLib.js*/</span><span class="token punctuation">,</span>\n    globalObject<span class="token operator">:</span> <span class="token string">\'this\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputuniquename"><code>output.uniqueName</code> <a href="#outputuniquename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>在全局环境下为防止多个 webpack 运行时 冲突所使用的唯一名称。默认使用 <a href="configuration/output/index.htm#outputlibrary"/*tpa=https://webpack.docschina.org/configuration/output/#outputlibrary*/><code>output.library</code></a> 名称或者上下文中的 <code>package.json</code> 的 包名称(package name)， 如果两者都不存在，值为 <code>\'\'</code>。</p> <p><code>output.uniqueName</code> 将用于生成唯一全局变量:</p> <ul> <li><a href="configuration/output/index.htm#outputchunkloadingglobal"/*tpa=https://webpack.docschina.org/configuration/output/#outputchunkloadingglobal*/><code>output.chunkLoadingGlobal</code></a></li> </ul> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    uniqueName<span class="token operator">:</span> <span class="token string">\'my-package-xyz\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputhashdigest"><code>output.hashDigest</code> <a href="#outputhashdigest" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'hex\'</code></p> <p>在生成 hash 时使用的编码方式。支持 Node.js <a href="https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding"><code>hash.digest</code></a> 的所有编码。对文件名使用 <code>\'base64\'</code>，可能会出现问题，因为 base64 字母表中具有 <code>/</code> 这个字符(character)。同样的，<code>\'latin1\'</code> 规定可以含有任何字符(character)。</p> <h2 id="outputhashdigestlength"><code>output.hashDigestLength</code> <a href="#outputhashdigestlength" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number = 20</code></p> <p>散列摘要的前缀长度。</p> <h2 id="outputhashfunction"><code>output.hashFunction</code> <a href="#outputhashfunction" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'md4\'</code> <code>function</code></p> <p>散列算法。支持 Node.JS <a href="https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options"><code>crypto.createHash</code></a> 的所有功能。从 <code>4.0.0-alpha2</code> 开始，<code>hashFunction</code> 现在可以是一个返回自定义 hash 的构造函数。出于性能原因，你可以提供一个不加密的哈希函数(non-crypto hash function)。</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hashFunction<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'metrohash\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MetroHash64\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>确保 hash 函数有可访问的 <code>update</code> 和 <code>digest</code> 方法。</p> <h2 id="outputhashsalt"><code>output.hashSalt</code> <a href="#outputhashsalt" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>一个可选的加盐值，通过 Node.JS <a href="https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding"><code>hash.update</code></a> 来更新哈希。</p> <h2 id="outputhotupdatechunkfilename"><code>output.hotUpdateChunkFilename</code> <a href="#outputhotupdatechunkfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'[id].[fullhash].hot-update.js\'/*tpa=https://webpack.docschina.org/[id].[fullhash].hot-update.js*/</code></p> <p>自定义热更新 chunk 的文件名。可选的值的详细信息，请查看 <a href="#outputfilename"><code>output.filename</code></a> 选项。</p> <p>其中值唯一的占位符是 <code>[id]</code> 和 <code>[fullhash]</code>，其默认为：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hotUpdateChunkFilename<span class="token operator">:</span> <span class="token string">\'[id].[fullhash].hot-update.js\'/*tpa=https://webpack.docschina.org/[id].[fullhash].hot-update.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>通常，你不需要修改 <code>output.hotUpdateChunkFilename</code>.</p> </blockquote> <h2 id="outputhotupdateglobal"><code>output.hotUpdateGlobal</code> <a href="#outputhotupdateglobal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>只在 <a href="configuration/target/index.htm"/*tpa=https://webpack.docschina.org/configuration/target/*/><code>target</code></a> 设置为 <code>\'web\'</code> 时使用，用于加载热更新(hot update)的 JSONP 函数。</p> <p>JSONP 函数用于异步加载(async load)热更新(hot-update) chunk。</p> <p>欲了解详情，请查阅 <a href="#outputchunkloadingglobal"><code>output.chunkLoadingGlobal</code></a>。</p> <h2 id="outputhotupdatemainfilename"><code>output.hotUpdateMainFilename</code> <a href="#outputhotupdatemainfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'https://webpack.docschina.org/[runtime].[fullhash].hot-update.json\'</code> <code>function</code></p> <p>自定义热更新的主文件名(main filename)。<code>[fullhash]</code> 和 <code>[runtime]</code> 均可作为占位符。</p> <blockquote class="tip"> <p>通常，你不需要修改 <code>output.hotUpdateMainFilename</code>.</p> </blockquote> <h2 id="outputlibrary"><code>output.library</code> <a href="#outputlibrary" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>object</code></p> <blockquote class="tip"> <p><code>object</code> 从 webpack 3.1.0 开始应用。用于 <code>libraryTarget: \'umd\'</code>。</p> </blockquote> <p><code>output.library</code> 的值的作用，取决于<a href="#outputlibrarytarget"><code>output.libraryTarget</code></a> 选项的值；完整的详细信息请查阅该章节。注意，<code>output.libraryTarget</code> 的默认选项是 <code>var</code>，所以如果使用以下配置选项：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'MyLibrary\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>如果生成的输出文件，是在 HTML 页面中作为一个 script 标签引入，则变量 <code>MyLibrary</code> 将与入口文件的返回值绑定。</p> <blockquote class="warning"> <p>注意，如果将<code>数组</code>作为 <code>entry</code>，那么只会暴露数组中的最后一个模块。如果将<code>对象</code>作为 <code>entry</code>，还可以使用 <code>array</code> 语法暴露（具体查看<a href="https://github.com/webpack/webpack/tree/master/examples/multi-part-library">这个示例</a> for details)）。</p> </blockquote> <blockquote class="tip"> <p>有关 <code>output.library</code> 以及 <code>output.libraryTarget</code> 详细信息，请查看<a href="guides/author-libraries/index.htm"/*tpa=https://webpack.docschina.org/guides/author-libraries/*/>创建 library 指南</a>。</p> </blockquote> <h2 id="ouputscripttype">output.scriptType <a href="#ouputscripttype" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string: \'module\' | \'text/javascript\'</code> <code>boolean = false</code></p> <p>此选项允许加载使用自定义 srcipt 类型的异步 chunk，例如 <code>&#x3C;script type="module" ...></code>。</p> <blockquote class="tip"> <p>如果 <a href="#outputmodule"><code>output.module</code></a> 设置为 <code>true</code>，则 <code>output.scriptType</code> 会默认将 <code>\'module\'</code> 替换为 <code>false</code>。</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    scriptType<span class="token operator">:</span> <span class="token string">\'module\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputlibraryexport"><code>output.libraryExport</code> <a href="#outputlibraryexport" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>[string]</code></p> <p>通过配置 <code>libraryTarget</code> 决定暴露哪些模块。默认情况下为 <code>undefined</code>，如果你将 <code>libraryTarget</code> 设置为空字符串，则与默认情况具有相同的行为。例如，如果设置为 <code>\'\'</code>，将导出整个（命名空间）对象。下述 demo 演示了当设置 <code>libraryTarget: \'var\'</code> 时的效果。</p> <p>支持以下配置：</p> <p><code>libraryExport: \'default\'</code> - __入口的默认导出__将分配给 library target：</p> <pre><code class="hljs language-javascript"><span class="token comment">// if your entry has a default export of `MyDefaultModule`</span>\n<span class="token keyword">var</span> MyDefaultModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>default<span class="token punctuation">;</span></code></pre> <p><code>libraryExport: \'MyModule\'</code> - 这个 <strong>确定的模块</strong> 将被分配给 library target：</p> <pre><code class="hljs language-javascript"><span class="token keyword">var</span> MyModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>MyModule<span class="token punctuation">;</span></code></pre> <p><code>libraryExport: [\'MyModule\', \'MySubModule\']</code> - 数组将被解析为要分配给 library target 的 <strong>模块路径</strong>：</p> <pre><code class="hljs language-javascript"><span class="token keyword">var</span> MySubModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>MyModule<span class="token punctuation">.</span>MySubModule<span class="token punctuation">;</span></code></pre> <p>使用上述指定的 <code>libraryExport</code> 配置时，library 的结果可以这样使用：</p> <pre><code class="hljs language-javascript">MyDefaultModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMyModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMySubModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="outputlibrarytarget"><code>output.libraryTarget</code> <a href="#outputlibrarytarget" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'var\'</code></p> <p>配置如何暴露 library。可以使用下面的选项中的任意一个。注意，此选项与分配给 <a href="#outputlibrary"><code>output.library</code></a> 的值一同使用。对于下面的所有示例，都假定将 <code>output.library</code> 的值配置为 <code>MyLibrary</code>。</p> <blockquote class="tip"> <p>注意，下面的示例代码中的 <code>_entry_return_</code> 是入口起点返回的值。在 bundle 本身中，它是从入口起点、由 webpack 生成的函数的输出结果。</p> </blockquote> <h3 id="expose-a-variable">暴露为一个变量 <a href="#expose-a-variable" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这些选项将入口起点的返回值（例如，入口起点的任何导出值），在 bundle 包所引入的位置，赋值给 output.library 提供的变量名。</p> <p><code>libraryTarget: \'var\'</code> - （默认值）当 library 加载完成，__入口起点的返回值__将分配给一个变量：</p> <pre><code class="hljs language-javascript"><span class="token keyword">var</span> MyLibrary <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token comment">// 在一个单独的 script...</span>\nMyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>当使用此选项时，将 <code>output.library</code> 设置为空，会因为没有变量导致无法赋值。</p> </blockquote> <p><code>libraryTarget: \'assign\'</code> - 这将产生一个隐含的全局变量，可能会潜在地重新分配到全局中已存在的值（谨慎使用）。.</p> <pre><code class="hljs language-javascript">MyLibrary <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span></code></pre> <p>注意，如果 <code>MyLibrary</code> 在作用域中未在前面代码进行定义，则你的 library 将被设置在全局作用域内。</p> <blockquote class="warning"> <p>当使用此选项时，将 <code>output.library</code> 设置为空，将产生一个破损的输出 bundle。</p> </blockquote> <h3 id="expose-via-object-assignment">通过在对象上赋值暴露 <a href="#expose-via-object-assignment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这些选项将入口起点的返回值（例如，入口起点的任何导出值）赋值给一个特定对象的属性（此名称由 <code>output.library</code> 定义）下。</p> <p>如果 <code>output.library</code> 未赋值为一个非空字符串，则默认行为是，将入口起点返回的所有属性都赋值给一个对象（此对象由 <code>output.libraryTarget</code> 特定），通过如下代码片段：</p> <pre><code class="hljs language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>libraryTarget<span class="token punctuation">,</span> _entry_return_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>注意，不设置 <code>output.library</code> 将导致由入口起点返回的所有属性，都会被赋值给给定的对象；这里并不会检查现有的属性名是否存在。</p> </blockquote> <p><code>libraryTarget: "this"</code> - __入口起点的返回值__将分配给 this 的一个属性（此名称由 <code>output.library</code> 定义）下，<code>this</code> 的含义取决于你：</p> <pre><code class="hljs language-javascript"><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token comment">// 在一个单独的 script...</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果 this 是 window</span></code></pre> <p><code>libraryTarget: \'window\'</code> - __入口起点的返回值__将使用 <code>output.library</code> 中定义的值，分配给 <code>window</code> 对象的这个属性下。</p> <pre><code class="hljs language-javascript">window<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><code>libraryTarget: \'global\'</code> - __入口起点的返回值__将使用 <code>output.library</code> 中定义的值，分配给 <code>global</code> 对象的这个属性下。</p> <pre><code class="hljs language-javascript">global<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\nglobal<span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><code>libraryTarget: \'commonjs\'</code> - __入口起点的返回值__将使用 <code>output.library</code> 中定义的值，分配给 exports 对象。这个名称也意味着，模块用于 CommonJS 环境：</p> <pre><code class="hljs language-javascript">exports<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="module-definition-systems">模块定义系统 <a href="#module-definition-systems" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这些选项将使得 bundle 带有更完整的模块头，以确保与各种模块系统的兼容性。根据 <code>output.libraryTarget</code> 选项不同，<code>output.library</code> 选项将具有不同的含义。</p> <p><code>libraryTarget: \'commonjs2\'</code> - __入口起点的返回值__将分配给 <code>module.exports</code> 对象。这个名称也意味着模块用于 CommonJS 环境：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>注意，<code>output.library</code> 不能与 <code>output.libraryTarget</code> 一起使用，具体原因请参照<a href="https://github.com/webpack/webpack/issues/11800">此 issue</a>。</p> <blockquote class="tip"> <p>想要弄清楚 CommonJS 和 CommonJS2 之间的区别？虽然它们很相似，但二者之间存在一些微妙的差异，这通常与 webpack 上下文没有关联。（更多详细信息，请<a href="https://github.com/webpack/webpack/issues/1114">阅读此 issue</a>。）</p> </blockquote> <p><code>libraryTarget: \'amd\'</code> - 将你的 library 暴露为 AMD 模块。</p> <p>AMD 模块要求入口 chunk（例如使用 <code>&#x3C;script></code> 标签加载的第一个脚本）通过特定的属性定义，例如 <code>define</code> 和 <code>require</code>，它们通常由 RequireJS 或任何兼容的模块加载器提供（例如 almond）。否则，直接加载生成的 AMD bundle 将导致报错，如 <code>define is not defined</code>。</p> <p>所以，使用以下配置...</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'MyLibrary\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'amd\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>生成的 output 将会使用 "MyLibrary" 作为模块名定义，即</p> <pre><code class="hljs language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _entry_return_<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>可以在 script 标签中，将 bundle 作为一个模块整体引入，并且可以像这样调用 bundle：</p> <pre><code class="hljs language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">MyLibrary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用 library 做一些事……</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>如果 <code>output.library</code> 未定义，将会生成以下内容。</p> <pre><code class="hljs language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _entry_return_<span class="token punctuation">;</span> <span class="token comment">// 此模块返回值，是入口 chunk 返回的值</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>如果直接加载 <code>&#x3C;script></code> 标签，此 bundle 无法按预期运行，或者根本无法正常运行（在 almond loader 中）。只能通过文件的实际路径，在 RequireJS 兼容的异步模块加载器中运行，因此在这种情况下，如果这些设置直接暴露在服务器上，那么 <code>output.path</code> 和 <code>output.filename</code> 对于这个特定的设置可能变得很重要。</p> <p><code>libraryTarget: \'amd-require\'</code> - 这将使用立即执行的AMD <code>require(dependencies, factory)</code> 包装器包装您的输出。</p> <p><code>\'amd-require\'</code> 目标（target）允许使用AMD依赖项，而无需单独的后续调用。与 <code>\'amd\'</code> 目标（target）一样, 这取决于在加载 webpack 输出的环境中适当可用的 <a href="https://github.com/amdjs/amdjs-api/blob/master/require.md"><code>require</code> function</a> 。</p> <p>对于此目标，库名称将被忽略。</p> <p><code>libraryTarget: \'umd\'</code> - 将你的 library 暴露为所有的模块定义下都可运行的方式。它将在 CommonJS, AMD 环境下运行，或将模块导出到 global 下的变量。了解更多请查看 <a href="https://github.com/umdjs/umd">UMD 仓库</a>。</p> <p>在这个例子中，你需要 <code>library</code> 属性来命名你的模块：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'MyLibrary\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>最终输出如下：</p> <pre><code class="hljs language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&#x26;&#x26;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&#x26;&#x26;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    exports<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    root<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">\'undefined\'</span> <span class="token operator">?</span> self <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _entry_return_<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>注意，省略 <code>library</code> 会导致将入口起点返回的所有属性，直接赋值给 root 对象，就像<a href="#expose-via-object-assignment">对象分配章节</a>。例如：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>输出结果如下：</p> <pre><code class="hljs language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&#x26;&#x26;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&#x26;&#x26;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">?</span> exports <span class="token operator">:</span> root<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">\'undefined\'</span> <span class="token operator">?</span> self <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _entry_return_<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>从 webpack 3.1.0 开始，你可以将 <code>library</code> 指定为一个对象，用于给每个 target 起不同的名称：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token punctuation">{</span>\n      root<span class="token operator">:</span> <span class="token string">\'MyLibrary\'</span><span class="token punctuation">,</span>\n      amd<span class="token operator">:</span> <span class="token string">\'my-library\'</span><span class="token punctuation">,</span>\n      commonjs<span class="token operator">:</span> <span class="token string">\'my-common-library\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>libraryTarget: \'system\'</code> —— 这将暴露你的 library 作为一个由 <a href="https://github.com/systemjs/systemjs/blob/master/docs/system-register.md"><code>System.register</code></a> 的模块。此特性首次发布于 <a href="https://github.com/webpack/webpack/releases/tag/v4.30.0">webpack 4.30.0</a>。</p> <p>当 webpack bundle 被执行时，系统模块依赖全局的变量 <code>System</code>。编译为 <code>System.register</code> 形式后，你可以使用 <code>System.import(\'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/)</code> 而无需额外配置，并会将你的 webpack bundle 包加载到系统模块注册表中。</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'system\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Output:</p> <pre><code class="hljs language-javascript">System<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_export</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    setters<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>除了将 <code>output.libraryTarget</code> 设置为 <code>system</code> 之外，还可将 <code>output.library</code> 添加到配置中，输出 bundle 的 library 名将作为 <code>System.register</code> 的参数：</p> <pre><code class="hljs language-javascript">System<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">\'my-library\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_export</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    setters<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>你可以通过 <a href="https://github.com/systemjs/systemjs/blob/master/docs/system-register.md#format-definition">SystemJS context</a> 凭借 <code>__system_context__</code>:</p> <pre><code class="hljs language-javascript"><span class="token comment">// 记录当前系统模块的 URL</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__system_context__<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 导入一个系统模块，通过将当前的系统模块的 url 作为 parentUrl</span>\n__system_context__<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token string">\'other-file.js\'/*tpa=https://webpack.docschina.org/other-file.js*/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">m</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="other-targets">其他 Targets <a href="#other-targets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>libraryTarget: \'jsonp\'</code> - 这将把入口起点的返回值，包裹到一个 jsonp 包装容器中</p> <pre><code class="hljs language-javascript"><span class="token function">MyLibrary</span><span class="token punctuation">(</span>_entry_return_<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>你的 library 的依赖将由 <a href="configuration/externals/index.htm"/*tpa=https://webpack.docschina.org/configuration/externals/*/><code>externals</code></a> 配置定义。</p> <h2 id="outputimportfunctionname"><code>output.importFunctionName</code> <a href="#outputimportfunctionname" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'import\'</code></p> <p>内部 <code>import()</code> 函数的名称. 可用于 polyfilling, 例如 通过 <a href="https://github.com/GoogleChromeLabs/dynamic-import-polyfill"><code>dynamic-import-polyfill</code></a>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    importFunctionName<span class="token operator">:</span> <span class="token string">\'__import__\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputpath"><code>output.path</code> <a href="#outputpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = path.join(process.cwd(), \'dist\')</code></p> <p>output 目录对应一个__绝对路径__。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist/assets\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>注意，<code>[fullhash]</code> 在参数中被替换为编译过程(compilation)的 hash。详细信息请查看<a href="guides/caching/index.htm"/*tpa=https://webpack.docschina.org/guides/caching/*/>指南 - 缓存</a>。</p> <h2 id="outputpathinfo"><code>output.pathinfo</code> <a href="#outputpathinfo" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean=true</code> <code>string: \'verbose\'</code></p> <p>告知 webpack 在 bundle 中引入「所包含模块信息」的相关注释。此选项在 <code>development</code> <a href="configuration/mode/index.htm"/*tpa=https://webpack.docschina.org/configuration/mode/*/>模式</a>时的默认值为 <code>true</code>，而在 <code>production</code> <a href="configuration/mode/index.htm"/*tpa=https://webpack.docschina.org/configuration/mode/*/>模式</a>时的默认值为 <code>false</code>。当值为 <code>\'verbose\'</code> 时，会显示更多信息，如 export，运行时依赖以及 bailouts。</p> <blockquote class="warning"> <p>对于在开发环境(development)下阅读生成代码时，虽然通过这些注释可以提供有用的数据信息，但在生产环境(production)下，__不应该__使用。</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    pathinfo<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>这些注释也会被添加至经过 tree shaking 后生成的 bundle 中。</p> </blockquote> <h2 id="outputpublicpath"><code>output.publicPath</code> <a href="#outputpublicpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>function</code></p> <p>对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，output.publicPath 是很重要的选项。如果指定了一个错误的值，则在加载这些资源时会收到 404 错误。</p> <p>此选项指定在浏览器中所引用的「此输出目录对应的__公开 URL__」。相对 URL(relative URL) 会被相对于 HTML 页面（或 <code>&#x3C;base></code> 标签）解析。相对于服务的 URL(Server-relative URL)，相对于协议的 URL(protocol-relative URL) 或绝对 URL(absolute URL) 也可是可能用到的，或者有时必须用到，例如：当将资源托管到 CDN 时。</p> <p>该选项的值是以 runtime(运行时) 或 loader(载入时) 所创建的每个 URL 为前缀。因此，在多数情况下，<strong>此选项的值都会以 <code>/</code> 结束</strong>。</p> <p>简单规则如下：<a href="#outputpath"><code>output.path</code></a> 中的 URL 以 HTML 页面为基准。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'public/assets\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'https://cdn.example.com/assets/\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>对于这个配置：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'/assets/\'</span><span class="token punctuation">,</span>\n    chunkFilename<span class="token operator">:</span> <span class="token string">\'[id].chunk.js\'/*tpa=https://webpack.docschina.org/[id].chunk.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>对于一个 chunk 请求，看起来像这样 <code>/assets/4.chunk.js</code>。</p> <p>对于一个输出 HTML 的 loader 可能会像这样输出：</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/spinner.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre> <p>或者在加载 CSS 的一个图片时：</p> <pre><code class="hljs language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/assets/spinner.gif<span class="token punctuation">)</span></span><span class="token punctuation">;</span></code></pre> <p>webpack-dev-server 也会默认从 <code>publicPath</code> 为基准，使用它来决定在哪个目录下启用服务，来访问 webpack 输出的文件。</p> <p>注意，参数中的 <code>[fullhash]</code> 将会被替换为编译过程(compilation) 的 hash。详细信息请查看<a href="guides/caching.htm"/*tpa=https://webpack.docschina.org/guides/caching*/>指南 - 缓存</a>。</p> <p>示例：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// One of the below</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'https://cdn.example.com/assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// CDN（总是 HTTPS 协议）</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'//cdn.example.com/assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// CDN（协议相同）</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'/assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// 相对于服务(server-relative)</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// 相对于 HTML 页面</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'../assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// 相对于 HTML 页面</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 相对于 HTML 页面（目录相同）</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>在编译时(compile time)无法知道输出文件的 <code>publicPath</code> 的情况下，可以留空，然后在入口文件(entry file)处使用<a href="https://stackoverflow.com/questions/12934929/what-are-free-variables">自由变量(free variable)</a> <code>__webpack_public_path__</code>，以便在运行时(runtime)进行动态设置。</p> <pre><code class="hljs language-javascript">__webpack_public_path__ <span class="token operator">=</span> myRuntimePublicPath<span class="token punctuation">;</span>\n\n<span class="token comment">// 应用程序入口的其他部分</span></code></pre> <p>有关 <code>__webpack_public_path__</code> 的更多信息，请查看<a href="https://github.com/webpack/webpack/issues/2776#issuecomment-233208623">此讨论</a>。</p> <h2 id="outputsourcemapfilename"><code>output.sourceMapFilename</code> <a href="#outputsourcemapfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'[file].map[query]\'</code></p> <p>仅在 <a href="configuration/devtool/index.htm"/*tpa=https://webpack.docschina.org/configuration/devtool/*/><code>devtool</code></a> 设置为 <code>\'source-map\'</code> 时有效，此选项会向硬盘写入一个输出文件。</p> <p>可以使用 <a href="#output-filename">#output-filename</a> 中的 <code>[name]</code>, <code>[id]</code>, <code>[hash]</code> 和 <code>[chunkhash]</code> 替换符号。除此之外，还可以使用 <a href="configuration/output/index.htm#template-strings"/*tpa=https://webpack.docschina.org/configuration/output/#template-strings*/>Template strings</a> 在 Filename-level 下替换。</p> <h2 id="outputsourceprefix"><code>output.sourcePrefix</code> <a href="#outputsourceprefix" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'\'</code></p> <p>修改输出 bundle 中每行的前缀。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    sourcePrefix<span class="token operator">:</span> <span class="token string">\'\\t\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>使用一些缩进会使 bundle 看起来更美观，但会导致多行字符串的问题。</p> </blockquote> <blockquote class="tip"> <p>通常，你不需要修改 <code>output.sourcePrefix</code>。</p> </blockquote> <h2 id="outputstrictmoduleexceptionhandling"><code>output.strictModuleExceptionHandling</code> <a href="#outputstrictmoduleexceptionhandling" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>如果一个模块是在 <code>require</code> 时抛出异常，告诉 webpack 从模块实例缓存(<code>require.cache</code>)中删除这个模块。</p> <p>出于性能原因，默认为 <code>false</code>。</p> <p>当设置为 <code>false</code> 时，该模块不会从缓存中删除，这将造成仅在第一次 <code>require</code> 调用时抛出异常（会导致与 node.js 不兼容）。</p> <p>例如，设想一下 <code>module.js</code>：</p> <pre><code class="hljs language-javascript"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>将 <code>strictModuleExceptionHandling</code> 设置为 <code>false</code>，只有第一个 <code>require</code> 抛出异常：</p> <pre><code class="hljs language-javascript"><span class="token comment">// with strictModuleExceptionHandling = false</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;- 抛出</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;- 不抛出</span></code></pre> <p>相反，将 <code>strictModuleExceptionHandling</code> 设置为 <code>true</code>，这个模块所有的 <code>require</code> 都抛出异常：</p> <pre><code class="hljs language-javascript"><span class="token comment">// with strictModuleExceptionHandling = true</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;- 抛出</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;- 仍然抛出</span></code></pre> <h2 id="outputumdnameddefine"><code>output.umdNamedDefine</code> <a href="#outputumdnameddefine" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>当使用 <code>libraryTarget: "umd"</code> 时，设置 <code>output.umdNamedDefine</code> 为 <code>true</code> 将命名由 UMD 构建的 AMD 模块。否则将使用一个匿名的 <code>define</code>。</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    umdNamedDefine<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputworkerchunkloading"><code>output.workerChunkLoading</code> <a href="#outputworkerchunkloading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string: \'require\' | \'import-scripts\' | \'async-node\' | \'import\' | \'universal\'</code> <code>boolean: false</code></p> <p>新选项 <code>workerChunkLoading</code> 用于控制 workder 的 chunk 加载。</p> <blockquote class="tip"> <p>此选项默认值取决于 <code>target</code> 的设置。欲了解更多详情，请在 <a href="../github.com/webpack/webpack/blob/master/lib/config/defaults.js"/*tpa=https://github.com/webpack/webpack/blob/master/lib/config/defaults.js*/>webpack 默认值文件中搜索</a> <code>"workerChunkLoading"</code>。</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    workerChunkLoading<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputenabledLibraryTypes"><code>output.enabledLibraryTypes</code><a href="#outputenabledLibraryTypes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>[string]</code></p> <p>入口点可用的 library 类型列表.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    enabledLibraryTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'module\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputfutureemitassets"><code>output.futureEmitAssets</code> <a href="#outputfutureemitassets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>告诉 webpack 使用未来版本的资源文件 emit 逻辑，允许在 emit 后释放资源文件的内存。这可能会破坏那些认为资源文件 emit 后仍然可读的插件。</p> <blockquote class="warning"> <p>在 webpack v5.0.0 中 <code>output.futureEmitAssets</code> 选项被移除并且这种行为将被默认支持。</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    futureEmitAssets<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputenvironment"><code>output.environment</code> <a href="#outputenvironment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>告诉 webpack 在生成的运行时代码中可以使用哪个版本的 ES 特性。</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    environment<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The environment supports arrow functions (\'() => { ... }\').</span>\n      arrowFunction<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports BigInt as literal (123n).</span>\n      bigIntLiteral<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports const and let for variable declarations.</span>\n      <span class="token keyword">const</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports destructuring (\'{ a, b } = obj\').</span>\n      destructuring<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports an async import() function to import EcmaScript modules.</span>\n      dynamicImport<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports \'for of\' iteration (\'for (const x of array) { ... }\').</span>\n      forOf<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports ECMAScript Module syntax to import ECMAScript modules (import ... from \'...\').</span>\n      module<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputcomparebeforeemit"><code>output.compareBeforeEmit</code> <a href="#outputcomparebeforeemit" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>告诉 webpack 在写入输出文件系统（output file system）之前检查要发出的文件是否已经存在并且具有相同的内容。</p> <blockquote class="warning"> <p>当文件存在并且内容没有变更时，webpack 不会输出该文件。</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    compareBeforeEmit<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="output-wasm-loading"><code>output.wasmLoading</code> <a href="#output-wasm-loading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>string</code></p> <p>此选项用于设置加载 WebAssembly 模块的方式。默认可使用的方式有 <code>\'fetch\'</code>（web/WebWorker），<code>\'async-node\'</code>（Node.js），其他额外方式可由插件提供。</p> <p>其默认值会根据 <a href="configuration/target/index.htm"/*tpa=https://webpack.docschina.org/configuration/target/*/><code>target</code></a> 的变化而变化：</p> <ul> <li>如果 <a href="configuration/target/index.htm"/*tpa=https://webpack.docschina.org/configuration/target/*/><code>target</code></a> 设置为 <code>\'web\'</code>，<code>\'webworker\'</code>，<code>\'electron-renderer\'</code> 或 <code>\'node-webkit\'</code> 其中之一，其默认值为 <code>\'fetch\'</code>。</li> <li>如果 <a href="configuration/target/index.htm"/*tpa=https://webpack.docschina.org/configuration/target/*/><code>target</code></a> 设置为 <code>\'node\'</code>，<code>\'async-node\'</code>，<code>\'electron-main\'</code> 或 <code>\'electron-preload\'</code>，其默认值为 <code>\'async-node\'</code>。</li> </ul> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    wasmLoading<span class="token operator">:</span> <span class="token string">\'fetch\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="output-enabled-wasm-loading-types"><code>output.enabledWasmLoadingTypes</code> <a href="#output-enabled-wasm-loading-types" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>[string]</code></p> <p>用于设置入口支持的 wasm 加载类型的列表。</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    enabledWasmLoadingTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'fetch\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="output-iife"><code>output.iife</code> <a href="#output-iife" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>告诉 webpack 添加 <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE">IIFE</a> 外层包裹生成的代码.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    iife<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputmodule"><code>output.module</code> <a href="#outputmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>允许输出的 JavaScript 文件作为模块类型。 设置 <code>output.iife</code> 为 <code>false</code>, <code>output.libraryTarget</code> 为 <code>\'module\'</code>, <code>output.scriptType</code> 为 <code>\'module\'</code> 和 <code>terserOptions.module</code> 为 <code>true</code></p> <blockquote class="warning"> <p><code>output.module</code> 是一个实验性的功能， 想要使用的话，通过设置 <a href="configuration/experiments/index.htm#experiments"/*tpa=https://webpack.docschina.org/configuration/experiments/#experiments*/><code>experiments.outputModule</code></a> 为 <code>true</code>.</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    module<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> '}}]);