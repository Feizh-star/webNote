(self.webpackChunk=self.webpackChunk||[]).push([[2734],{2734:function(n){n.exports='<p><code>externals</code> 配置选项提供了「从输出的 bundle 中排除依赖」的方法。相反，所创建的 bundle 依赖于那些存在于用户环境(consumer\'s environment)中的依赖。此功能通常对 __library 开发人员__来说是最有用的，然而也会有各种各样的应用程序用到它。</p> <h2 id="externals"><code>externals</code> <a href="#externals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>[string]</code> <code>object</code> <code>function</code> <code>RegExp</code></p> <p>__防止__将某些 <code>import</code> 的包(package)__打包__到 bundle 中，而是在运行时(runtime)再去从外部获取这些_扩展依赖(external dependencies)_。</p> <p>例如，从 CDN 引入 <a href="https://jquery.com/">jQuery</a>，而不是把它打包：</p> <p><strong>index.html</strong></p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span>\n  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.0.js<span class="token punctuation">"</span></span>\n  <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=<span class="token punctuation">"</span></span>\n  <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    jquery<span class="token operator">:</span> <span class="token string">\'jQuery\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>这样就剥离了那些不需要改动的依赖模块，换句话，下面展示的代码还可以正常运行：</p> <pre><code class="hljs language-javascript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">\'jquery\'</span><span class="token punctuation">;</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">\'.my-element\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>具有外部依赖(external dependency)的 bundle 可以在各种模块上下文(module context)中使用，例如 <a href="concepts/modules.htm"/*tpa=https://webpack.docschina.org/concepts/modules*/>CommonJS, AMD, 全局变量和 ES2015 模块</a>。外部 library 可能是以下任何一种形式：</p> <ul> <li><strong>root</strong>：可以通过一个全局变量访问 library（例如，通过 script 标签）。</li> <li><strong>commonjs</strong>：可以将 library 作为一个 CommonJS 模块访问。</li> <li><strong>commonjs2</strong>：和上面的类似，但导出的是 <code>module.exports.default</code>.</li> <li><strong>amd</strong>：类似于 <code>commonjs</code>，但使用 AMD 模块系统。</li> </ul> <p>可以接受以下语法……</p> <h3 id="string">字符串 <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>请查看上面的例子。属性名称是 <code>jquery</code>，表示应该排除 <code>import $ from \'jquery\'</code> 中的 <code>jquery</code> 模块。为了替换这个模块，<code>jQuery</code> 的值将被用来检索一个全局的 <code>jQuery</code> 变量。换句话说，当设置为一个字符串时，它将被视为<code>全局的</code>（定义在上面和下面）。</p> <p>另一方面，如果你想将一个符合 CommonJS 模块化规则的类库外部化，你可以提供外联类库的类型以及类库的名称。</p> <p>如果你想将 <code>fs-extra</code> 从输出的 bundle 中剔除并在运行时中引入它，你可以如下定义：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'fs-extra\'</span><span class="token operator">:</span> <span class="token string">\'commonjs2 fs-extra\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>这样的做法会让任何依赖的模块都不变，正如以下所示的代码：</p> <pre><code class="hljs language-javascript"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">\'fs-extra\'</span><span class="token punctuation">;</span></code></pre> <p>会将代码编译成：</p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs-extra\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="string"><code>[string]</code> <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    subtract<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>subtract: [\'./math\', \'subtract\']</code> 转换为父子结构，其中 <code>./math</code> 是父模块，而 bundle 只引用 <code>subtract</code> 变量下的子集。该例子会编译成 <code>require(\'./math\').subtract;</code></p> <h3 id="object">对象 <a href="#object" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <blockquote class="warning"> <p>一个形如 <code>{ root, amd, commonjs, ... }</code> 的对象仅允许用于 <a href="configuration/output/index.htm#outputlibrarytarget"/*tpa=https://webpack.docschina.org/configuration/output/#outputlibrarytarget*/><code>libraryTarget: \'umd\'</code></a> 这样的配置.它不被允许 用于其它的 library targets 配置值.</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals <span class="token operator">:</span> <span class="token punctuation">{</span>\n    react<span class="token operator">:</span> <span class="token string">\'react\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 或者</span>\n\n  externals <span class="token operator">:</span> <span class="token punctuation">{</span>\n    lodash <span class="token operator">:</span> <span class="token punctuation">{</span>\n      commonjs<span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      amd<span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      root<span class="token operator">:</span> <span class="token string">\'_\'</span> <span class="token comment">// 指向全局变量</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 或者</span>\n\n  externals <span class="token operator">:</span> <span class="token punctuation">{</span>\n    subtract <span class="token operator">:</span> <span class="token punctuation">{</span>\n      root<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此语法用于描述外部 library 所有可用的访问方式。这里 <code>lodash</code> 这个外部 library 可以在 AMD 和 CommonJS 模块系统中通过 <code>lodash</code> 访问，但在全局变量形式下用 <code>_</code> 访问。<code>subtract</code> 可以通过全局 <code>math</code> 对象下的属性 <code>subtract</code> 访问（例如 <code>window[\'math\'][\'subtract\']</code>）。</p> <h3 id="function">函数 <a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function ({ context, request }, callback)</code></p> <p>对于 webpack 外部化，通过定义函数来控制行为，可能会很有帮助。例如，<a href="https://www.npmjs.com/package/webpack-node-externals">webpack-node-externals</a> 能够排除 <code>node_modules</code> 目录中所有模块，还提供一些选项，比如白名单 package(whitelist package)。</p> <p>函数接收两个入参：</p> <ul> <li><code>ctx</code> (<code>object</code>)：包含文件详情的对象。 <ul> <li><code>ctx.context</code> (<code>string</code>): 包含引用的文件目录。</li> <li><code>ctc.request</code> (<code>string</code>): 被请求引入的路径。</li> </ul> </li> <li><code>callback</code> (<code>function (err, result, type)</code>): 用于指明模块如何被外部化的回调函数</li> </ul> <p>回调函数接收三个入参：</p> <ul> <li><code>err</code> (<code>Error</code>): 被用于表明在外部外引用的时候是否会产生错误。如果有错误，这将会是唯一被用到的参数。</li> <li><code>result</code> (<code>string</code> <code>[string]</code> <code>object</code>): 描述外部化的模块。可以接受形如 <code>${type} ${path}</code> 格式的字符串，或者其它标准化外部化模块格式，(<a href="#string"><code>string</code></a>, <a href="#string-1"><code>[string]</code></a>，或 <a href="#object"><code>object</code></a>)。</li> <li><code>type</code> (<code>string</code>): 可选的参数，用于指明模块的类型（如果它没在 <code>result</code> 参数中被指明）。</li> </ul> <p>作为例子，要外部化所有匹配一个正则表达式的引入，你可以像下面那样处理：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context<span class="token punctuation">,</span> request <span class="token punctuation">}</span><span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^yourregex$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 使用 request 路径，将一个 commonjs 模块外部化</span>\n        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'commonjs \'</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// 继续下一步且不外部化引用</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>其它例子使用不同的模块格式：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 该外部化的模块，是一个 `commonjs2` 的模块，且放在 `@scope/library` 目录中</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'@scope/library\'</span><span class="token punctuation">,</span> <span class="token string">\'commonjs2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 该外部化模块是一个全局变量叫作 `nameOfGlobal`.</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'nameOfGlobal\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 该外部化模块是一个在`@scope/library`模块里的命名导出（named export）。</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'@scope/library\'</span><span class="token punctuation">,</span> <span class="token string">\'namedexport\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\'commonjs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 外部化模块是一个 UMD 模块</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        root<span class="token operator">:</span> <span class="token string">\'componentsGlobal\'</span><span class="token punctuation">,</span>\n        commonjs<span class="token operator">:</span> <span class="token string">\'@scope/components\'</span><span class="token punctuation">,</span>\n        commonjs2<span class="token operator">:</span> <span class="token string">\'@scope/components\'</span><span class="token punctuation">,</span>\n        amd<span class="token operator">:</span> <span class="token string">\'components\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="regexp">RegExp <a href="#regexp" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>匹配给定正则表达式的每个依赖，都将从输出 bundle 中排除。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(jquery|\\$)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>这个示例中，所有名为 <code>jQuery</code> 的依赖（忽略大小写），或者 <code>$</code>，都会被外部化。</p> <h3 id="combining-syntaxes">混用语法 <a href="#combining-syntaxes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>有时你需要混用上面介绍的语法。这可以像以下这样操作：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token comment">// 字符串</span>\n      react<span class="token operator">:</span> <span class="token string">\'react\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// 对象</span>\n      lodash <span class="token operator">:</span> <span class="token punctuation">{</span>\n        commonjs<span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n        amd<span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n        root<span class="token operator">:</span> <span class="token string">\'_\'</span> <span class="token comment">// indicates global variable</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// 字符串数组</span>\n      subtract<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 函数</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context<span class="token punctuation">,</span> request <span class="token punctuation">}</span><span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^yourregex$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'commonjs \'</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 正则表达式</span>\n    <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span>jquery<span class="token operator">|</span>\\$<span class="token punctuation">)</span>$<span class="token operator">/</span>i\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p><a href="configuration/externals/index.htm#externalstype"/*tpa=https://webpack.docschina.org/configuration/externals/#externalstype*/>Default type</a> will be used if you specify <code>externals</code> without a type e.g. <code>externals: { react: \'react\' }</code> instead of <code>externals: { react: \'commonjs-module react\' }</code>.</p> </blockquote> <p>关于如何使用此 externals 配置的更多信息，请参考 <a href="guides/author-libraries.htm"/*tpa=https://webpack.docschina.org/guides/author-libraries*/>如何编写 library</a>。</p> <h2 id="externalstype"><code>externalsType</code> <a href="#externalstype" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'var\'</code></p> <p>指定 externals 的默认类型。当 external 被设置为 <code>amd</code>，<code>umd</code>，<code>system</code> 以及 <code>jsonp</code> 时，<strong><a href="configuration/output/index.htm#outputlibrarytarget"/*tpa=https://webpack.docschina.org/configuration/output/#outputlibrarytarget*/><code>output.libraryTarget</code></a></strong> 的值也应相同。例如，你只能在 <code>amd</code> 库中使用 <code>amd</code> 的 externals。</p> <p>支持的类型如下：</p> <ul> <li><code>\'var\'</code></li> <li><code>\'module\'</code></li> <li><code>\'assign\'</code></li> <li><code>\'this\'</code></li> <li><code>\'window\'</code></li> <li><code>\'self\'</code></li> <li><code>\'global\'</code></li> <li><code>\'commonjs\'</code></li> <li><code>\'commonjs-module\'</code></li> <li><code>\'amd\'</code></li> <li><code>\'amd-require\'</code></li> <li><code>\'umd\'</code></li> <li><code>\'umd2\'</code></li> <li><code>\'jsonp\'</code></li> <li><code>\'system\'</code></li> <li><code>\'promise\'</code> - 与 <code>\'var\'</code> 相同，但会 awaits 结果（适用于 async 模块）</li> <li><code>\'import\'</code> - 使用 <code>import()</code> 加载原生的 EcmaScript 模块（适用于 async 模块）</li> <li><code>\'script\'</code> - 使用 HTML 的 <code>&#x3C;script></code> 元素加载 script，用于暴露预定义的全局变量</li> </ul> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externalsType<span class="token operator">:</span> <span class="token string">\'promise\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="script"><code>script</code> <a href="#script" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>External script can be loaded from any URL when <a href="#externalstype"><code>externalsType</code></a> is set to <code>\'script\'</code>. The <code>&#x3C;script></code> tag would be removed after the script has been loaded.</p> <h4 id="syntax">Syntax <a href="#syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    packageName<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'../example.com/script.js\'/*tpa=http://example.com/script.js*/</span><span class="token punctuation">,</span> <span class="token string">\'global\'</span><span class="token punctuation">,</span> <span class="token string">\'property\'</span><span class="token punctuation">,</span> <span class="token string">\'property\'</span><span class="token punctuation">]</span> <span class="token comment">// properties are optional</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>如果你不打算定义任何熟悉，你可以使用简写形式：</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    packageName<span class="token operator">:</span> <span class="token string">\'global@http://example.com/script.js\'</span> <span class="token comment">// no properties here</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p><a href="configuration/output/index.htm#outputpublicpath"/*tpa=https://webpack.docschina.org/configuration/output/#outputpublicpath*/><code>output.publicPath</code></a> 不会被添加到提供的 URL 中。</p> </blockquote> <h4 id="example">示例 <a href="#example" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>从 CDN 加载 <code>lodash</code>：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  externalsType<span class="token operator">:</span> <span class="token string">\'script\'</span><span class="token punctuation">,</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    lodash<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'https://cdn.jsdelivr.net/npm/lodash@4.17.19/lodash.min.js\'</span><span class="token punctuation">,</span> <span class="token string">\'_\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>然后，代码中使用方式如下：</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>下面示例是针对上面示例新增了属性配置：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  externalsType<span class="token operator">:</span> <span class="token string">\'script\'</span><span class="token punctuation">,</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    lodash<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'https://cdn.jsdelivr.net/npm/lodash@4.17.19/lodash.min.js\'</span><span class="token punctuation">,</span> <span class="token string">\'_\'</span><span class="token punctuation">,</span> <span class="token string">\'head\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>当你 <code>import \'loadsh\'</code> 时，局部变量 <code>head</code> 和全局变量 <code>window._</code> 都会被暴露：</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> head <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs 1 here</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>_<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs a here</span></code></pre> <blockquote class="tip"> <p>当加载带有 HTML <code>&#x3C;script></code> 标签的代码时，webpack 的 runtime 将试图寻找一个已经存在的 <code>&#x3C;script></code> 标签，此标签需与 <code>src</code> 的属性相匹配，或者具有特定的 <code>data-webpack</code> 属性。对于 chunk 加载来说，<code>data-webpack</code> 属性的值为 <code>\'[output.uniqueName]:chunk-[chunkId]\'</code>，而 external 脚本的值为 <code>\'[output.uniqueName]:[global]\'</code>。</p> </blockquote> <blockquote class="tip"> <p>像 <code>output.chunkLoadTimeout</code>，<code>output.crossOriginLoading</code> 以及 <code>output.scriptType</code> 等选项也会对这种方式加载的 external 脚本产生影响。</p> </blockquote> <h2 id="externals-presets"><code>externalsPresets</code> <a href="#externals-presets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>为特定的 target 启用 externals 的 preset。</p> <blockquote class="warning"> <p>在早期的 webpack 版本中，通过使用 <a href="configuration/target/index.htm"/*tpa=https://webpack.docschina.org/configuration/target/*/><code>target</code></a> 实现以下功能。</p> </blockquote> <table> <thead> <tr> <th>选项</th> <th>描述</th> <th>输入类型</th> </tr> </thead> <tbody> <tr> <td data-th="选项"><span><code>electron</code></span></td> <td data-th="描述"><span>将 main 和预加载上下文中常见的 electron 内置模块视为 external 模块（如 <code>electron</code>，<code>ipc</code> 或 <code>shell</code>），使用时通过 <code>require()</code> 加载。</span></td> <td data-th="输入类型"><span>boolean</span></td> </tr> <tr> <td data-th="选项"><span><code>electronMain</code></span></td> <td data-th="描述"><span>将 main 上下文中的 electron 内置模块视为 external 模块（如 <code>app</code>，<code>ipc-main</code> 或 <code>shell</code>），使用时通过 <code>require()</code> 加载。</span></td> <td data-th="输入类型"><span>boolean</span></td> </tr> <tr> <td data-th="选项"><span><code>electronPreload</code></span></td> <td data-th="描述"><span>将预加载上下文的 electron 内置模块视为 external 模块（如 <code>web-frame</code>，<code>ipc-renderer</code> 或 <code>shell</code>），使用时通过 <code>require()</code> 加载。</span></td> <td data-th="输入类型"><span>boolean</span></td> </tr> <tr> <td data-th="选项"><span><code>electronRenderer</code></span></td> <td data-th="描述"><span>将 renderer 上下文的 electron 内置模块视为 external 模块（如 <code>web-frame</code>、<code>ipc-renderer</code> 或 <code>shell</code>），使用时通过 <code>require()</code> 加载。</span></td> <td data-th="输入类型"><span>boolean</span></td> </tr> <tr> <td data-th="选项"><span><code>node</code></span></td> <td data-th="描述"><span>将 node.js 的内置模块视为 external 模块（如 <code>fs</code>，<code>path</code> 或 <code>vm</code>），使用时通过 <code>require()</code> 加载。</span></td> <td data-th="输入类型"><span>boolean</span></td> </tr> <tr> <td data-th="选项"><span><code>nwjs</code></span></td> <td data-th="描述"><span>将 <code>NW.js</code> 遗留的 <code>nw.gui</code> 模块视为 external 模块，使用时通过 <code>require()</code> 加载。</span></td> <td data-th="输入类型"><span>boolean</span></td> </tr> <tr> <td data-th="选项"><span><code>web</code></span></td> <td data-th="描述"><span>将 <code>http(s)://...</code> 以及 <code>std:...</code> 视为 external 模块，使用时通过 <code>import</code> 加载。<strong>（注意，这将改变执行顺序，因为 external 代码会在该块中的其他代码执行前被执行）</strong>。</span></td> <td data-th="输入类型"><span>boolean</span></td> </tr> <tr> <td data-th="选项"><span><code>webAsync</code></span></td> <td data-th="描述"><span>将 <code>http(s)://...</code> 以及 <code>std:...</code> 的引用视为 external 模块，使用时通过 <code>async import()</code> 加载。<strong>（注意，此 external 类型为 <code>async</code> 模块，它对执行会产生各种副作用）</strong>。</span></td> <td data-th="输入类型"><span>boolean</span></td> </tr> </tbody> </table> <p><strong>示例</strong></p> <p>使用 <code>node</code> 的 preset 不会构建内置模块，而会将其视为 external 模块，使用时通过 <code>require()</code> 加载。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  externalsPresets<span class="token operator">:</span><span class="token punctuation">{</span>\n    node<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> '}}]);