(self.webpackChunk=self.webpackChunk||[]).push([[2462],{2462:function(n){n.exports='<p>The <code>EnvironmentPlugin</code> is shorthand for using the <a href="plugins/define-plugin.htm"/*tpa=https://webpack.docschina.org/plugins/define-plugin*/><code>DefinePlugin</code></a> on <a href="https://nodejs.org/api/process.html#process_process_env"><code>process.env</code></a> keys.</p> <h2 id="usage">Usage <a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>The <code>EnvironmentPlugin</code> accepts either an array of keys or an object mapping its keys to their default values.</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'NODE_ENV\'</span><span class="token punctuation">,</span> <span class="token string">\'DEBUG\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>This is equivalent to the following <code>DefinePlugin</code> application:</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">\'process.env.NODE_ENV\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">\'process.env.DEBUG\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>Not specifying the environment variable raises an "<code>EnvironmentPlugin</code> - <code>${key}</code> environment variable is undefined" error.</p> </blockquote> <h2 id="usage-with-default-values">Usage with default values <a href="#usage-with-default-values" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Alternatively, the <code>EnvironmentPlugin</code> supports an object, which maps keys to their default values. The default value for a key is taken if the key is undefined in <code>process.env</code>.</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span> <span class="token comment">// use \'development\' unless process.env.NODE_ENV is defined</span>\n  <span class="token constant">DEBUG</span><span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>Variables coming from <code>process.env</code> are always strings.</p> </blockquote> <blockquote class="tip"> <p>Unlike <a href="plugins/define-plugin.htm"/*tpa=https://webpack.docschina.org/plugins/define-plugin*/><code>DefinePlugin</code></a>, default values are applied to <code>JSON.stringify</code> by the <code>EnvironmentPlugin</code>.</p> </blockquote> <blockquote class="tip"> <p>To specify an unset default value, use <code>null</code> instead of <code>undefined</code>.</p> </blockquote> <blockquote class="warning"> <p>If an environment variable is not found during bundling and no default value was provided, webpack will throw an error instead of a warning.</p> </blockquote> <p><strong>Example:</strong></p> <p>Let\'s investigate the result when running the previous <code>EnvironmentPlugin</code> configuration on a test file <code>entry.js</code>:</p> <pre><code class="hljs language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>When executing <code>NODE_ENV=production webpack</code> in the terminal to build, <code>entry.js</code> becomes this:</p> <pre><code class="hljs language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'production\'</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &#x3C;-- \'production\' from NODE_ENV is taken</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &#x3C;-- default value is taken</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>Running <code>DEBUG=false webpack</code> yields:</p> <pre><code class="hljs language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'development\'</span> <span class="token operator">===</span> <span class="token string">\'production\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &#x3C;-- default value is taken</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Welcome to production\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">\'false\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &#x3C;-- \'false\' from DEBUG is taken</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Debugging output\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="use-case-git-version">Use Case: Git Version <a href="#use-case-git-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>The following <code>EnvironmentPlugin</code> configuration provides <code>process.env.GIT_VERSION</code> (such as "v5.4.0-2-g25139f57f") and <code>process.env.GIT_AUTHOR_DATE</code> (such as "2020-11-04T12:25:16+01:00") corresponding to the last Git commit of the repository:</p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> child_process <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'child_process\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">git</span><span class="token punctuation">(</span><span class="token parameter">command</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> child_process<span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>command<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token operator">:</span> <span class="token string">\'utf8\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token constant">GIT_VERSION</span><span class="token operator">:</span> <span class="token function">git</span><span class="token punctuation">(</span><span class="token string">\'describe --always\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token constant">GIT_AUTHOR_DATE</span><span class="token operator">:</span> <span class="token function">git</span><span class="token punctuation">(</span><span class="token string">\'log -1 --format=%aI\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="dotenvplugin"><code>DotenvPlugin</code> <a href="#dotenvplugin" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>The third-party <a href="https://github.com/mrsteele/dotenv-webpack"><code>DotenvPlugin</code></a> (<code>dotenv-webpack</code>) allows you to expose (a subset of) <a href="https://www.npmjs.com/package/dotenv">dotenv variables</a>:</p> <pre><code class="hljs language-bash">// .env\n<span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1\n<span class="token assign-left variable">DB_PASS</span><span class="token operator">=</span>foobar\n<span class="token assign-left variable">S3_API</span><span class="token operator">=</span>mysecretkey</code></pre> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">Dotenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  path<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/.env\'</span><span class="token punctuation">,</span> <span class="token comment">// Path to .env file (this is the default)</span>\n  safe<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// load .env.example (defaults to "false" which does not use dotenv-safe)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> '}}]);