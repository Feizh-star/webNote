(self.webpackChunk=self.webpackChunk||[]).push([[6510],{6510:function(n){n.exports='<blockquote class="tip"> <p>本指南继续沿用 <a href="guides/asset-management.htm"/*tpa=https://webpack.docschina.org/guides/asset-management*/><code>管理资源</code></a> 指南中的代码示例。</p> </blockquote> <p>到目前为止，我们都是在 <code>index.html</code> 文件中手动引入所有资源，然而随着应用程序增长，并且一旦开始 <a href="guides/caching.htm"/*tpa=https://webpack.docschina.org/guides/caching*/>在文件名中使用 hash</a> 并输出 <a href="guides/code-splitting.htm"/*tpa=https://webpack.docschina.org/guides/code-splitting*/>多个 bundle</a>，如果继续手动管理 <code>index.html</code> 文件，就会变得困难起来。然而，通过一些插件可以使这个过程更容易管控。</p> <h2 id="preparation">预先准备 <a href="#preparation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>首先，调整一下我们的项目：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- print.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p>我们在 <code>src/print.js</code> 文件中添加一些逻辑：</p> <p><strong>src/print.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">printMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'I get called from print.js!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>并且在 <code>src/index.js</code> 文件中使用这个函数：</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import printMe from \'print.js\'/*tpa=https://webpack.docschina.org/print.js*/;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const btn = document.createElement(\'button\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix inserted">+</span><span class="token line">  btn.onclick = printMe;\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">  element.appendChild(btn);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>还要更新 <code>dist/index.html</code> 文件，来为 webpack 分离入口做好准备：</p> <p><strong>dist/index.html</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#x3C;!DOCTYPE html>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;html>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;head>\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;meta charset="utf-8" />\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;title>管理资源&#x3C;/title>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;title>管理输出&#x3C;/title>\n</span><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="print.bundle.js"/*tpa=https://webpack.docschina.org/print.bundle.js*/>&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/head>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;body>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="bundle.js"/*tpa=https://webpack.docschina.org/bundle.js*/>&#x3C;/script>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="index.bundle.js"/*tpa=https://webpack.docschina.org/index.bundle.js*/>&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/body>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;/html></span></span></code></pre> <p>现在调整配置。我们将在 entry 添加 <code>src/print.js</code> 作为新的入口起点（<code>print</code>），然后修改 output，以便根据入口起点定义的名称，动态地产生 bundle 名称：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  entry: {\n</span><span class="token prefix inserted">+</span><span class="token line">    index: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix inserted">+</span><span class="token line">    print: \'src/print.js\'/*tpa=https://webpack.docschina.org/src/print.js*/,\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    filename: \'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>执行 <code>npm run build</code>，然后看到生成如下：</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset index.bundle.js <span class="token number">69.5</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nasset print.bundle.js <span class="token number">316</span> bytes <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: print<span class="token punctuation">)</span>\nruntime modules <span class="token number">1.36</span> KiB <span class="token number">7</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">406</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/print.js <span class="token number">83</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1996</span> ms</code></pre> <p>我们可以看到，webpack 生成 <code>print.bundle.js</code> 和 <code>index.bundle.js</code> 文件，这也和我们在 <code>index.html</code> 文件中指定的文件名称相对应。如果你在浏览器中打开 <code>index.html</code>，就可以看到在点击按钮时会发生什么。</p> <p>但是，如果我们更改了我们的一个入口起点的名称，甚至添加了一个新的入口，会发生什么？会在构建时重新命名生成的 bundle，但是我们的 <code>index.html</code> 文件仍然引用旧的名称。让我们用 <a href="plugins/html-webpack-plugin.htm"/*tpa=https://webpack.docschina.org/plugins/html-webpack-plugin*/><code>HtmlWebpackPlugin</code></a> 来解决这个问题。</p> <h2 id="setting-up-htmlwebpackplugin">设置 HtmlWebpackPlugin <a href="#setting-up-htmlwebpackplugin" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>首先安装插件，并且调整 <code>webpack.config.js</code> 文件：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev html-webpack-plugin</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'src/print.js\'/*tpa=https://webpack.docschina.org/src/print.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  plugins: [\n</span><span class="token prefix inserted">+</span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">      title: \'管理输出\',\n</span><span class="token prefix inserted">+</span><span class="token line">    }),\n</span><span class="token prefix inserted">+</span><span class="token line">  ],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>在我们构建之前，你应该了解，虽然在 <code>dist/</code> 文件夹我们已经有了 <code>index.html</code> 这个文件，然而 <code>HtmlWebpackPlugin</code> 还是会默认生成它自己的 <code>index.html</code> 文件。也就是说，它会用新生成的 <code>index.html</code> 文件，替换我们的原有文件。我们看下执行 <code>npm run build</code> 后会发生什么：</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset index.bundle.js <span class="token number">69.5</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nasset print.bundle.js <span class="token number">316</span> bytes <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: print<span class="token punctuation">)</span>\nasset index.html <span class="token number">253</span> bytes <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nruntime modules <span class="token number">1.36</span> KiB <span class="token number">7</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">406</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/print.js <span class="token number">83</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">2189</span> ms</code></pre> <p>如果在代码编辑器中打开 <code>index.html</code>，你会看到 <code>HtmlWebpackPlugin</code> 创建了一个全新的文件，所有的 bundle 会自动添加到 html 中。</p> <p>如果你想要了解 <code>HtmlWebpackPlugin</code> 插件提供的全部的功能和选项，你就应该阅读 <a href="https://github.com/jantimon/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a> 仓库中的源码。</p> <h2 id="cleaning-up-the-dist-folder">清理 <code>/dist</code> 文件夹 <a href="#cleaning-up-the-dist-folder" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>你可能已经注意到，由于遗留了之前的指南和代码示例，我们的 <code>/dist</code> 文件夹显得相当杂乱。webpack 将生成文件并放置在 <code>/dist</code> 文件夹中，但是它不会追踪哪些文件是实际在项目中用到的。</p> <p>通常比较推荐的做法是，在每次构建前清理 <code>/dist</code> 文件夹，这样只会生成用到的文件。让我们实现这个需求。</p> <p><a href="https://www.npmjs.com/package/clean-webpack-plugin"><code>clean-webpack-plugin</code></a> 是一个流行的清理插件，安装和配置它。</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev clean-webpack-plugin</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'src/print.js\'/*tpa=https://webpack.docschina.org/src/print.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    new CleanWebpackPlugin(),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      title: \'Output Management\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>现在，执行 <code>npm run build</code>，检查 <code>/dist</code> 文件夹。如果一切顺利，现在只会看到构建后生成的文件，而没有旧文件！</p> <h2 id="the-manifest">manifest <a href="#the-manifest" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>你可能会很感兴趣，webpack 和 webpack 插件似乎“知道”应该生成哪些文件。答案是，webpack 通过 manifest，可以追踪所有模块到输出 bundle 之间的映射。如果你想要知道如何以其他方式来控制 webpack <a href="configuration/output.htm"/*tpa=https://webpack.docschina.org/configuration/output*/><code>输出</code></a>，了解 manifest 是个好的开始。</p> <p>通过 <a href="https://github.com/shellscape/webpack-manifest-plugin"><code>WebpackManifestPlugin</code></a> 插件，可以将 manifest 数据提取为一个容易使用的 json 文件。</p> <p>我们不会在此展示一个如何在项目中使用此插件的完整示例，你可以在 <a href="concepts/manifest.htm"/*tpa=https://webpack.docschina.org/concepts/manifest*/>manifest</a> 概念页面深入阅读，以及在 <a href="guides/caching.htm"/*tpa=https://webpack.docschina.org/guides/caching*/>缓存</a> 指南中，了解它与长效缓存有何关系。</p> <h2 id="conclusion">结论 <a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>现在，你已经了解如何向 HTML 动态添加 bundle，让我们深入 <a href="guides/development.htm"/*tpa=https://webpack.docschina.org/guides/development*/>开发环境</a> 指南。或者如果你想要深入更多相关高级话题，我们推荐你前往 <a href="guides/code-splitting.htm"/*tpa=https://webpack.docschina.org/guides/code-splitting*/>代码分离</a> 指南。</p> '}}]);