(self.webpackChunk=self.webpackChunk||[]).push([[5122],{5122:function(n){n.exports='<p><a href="https://npmjs.com/package/worker-loader"><img src="https://img.shields.io/npm/v/worker-loader.svg" alt="npm"></a> <a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/worker-loader.svg" alt="node"></a> <a href="https://david-dm.org/webpack-contrib/worker-loader"><img src="https://david-dm.org/webpack-contrib/worker-loader.svg" alt="deps"></a> <a href="https://github.com/webpack-contrib/worker-loader/actions"><img src="https://github.com/webpack-contrib/worker-loader/workflows/worker-loader/badge.svg" alt="tests"></a> <a href="https://codecov.io/gh/webpack-contrib/worker-loader"><img src="https://codecov.io/gh/webpack-contrib/worker-loader/branch/master/graph/badge.svg" alt="coverage"></a> <a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a> <a href="https://packagephobia.now.sh/result?p=worker-loader"><img src="https://packagephobia.now.sh/badge?p=worker-loader" alt="size"></a></p> <p>webpack 的 worker loader 模块</p> <h2 id="getting-started">快速开始 <a href="#getting-started" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>开始之前你需要安装 <code>worker-loader</code> ：</p> <pre><code class="hljs language-console">$ npm install worker-loader --save-dev\n</code></pre> <h3 id="inlined">内敛 <a href="#inlined" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>App.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"worker-loader!./Worker.js"/*tpa=https://webpack.docschina.org/worker-loader!./Worker.js*/</span><span class="token punctuation">;</span></code></pre> <h3 id="config">配置 <a href="#config" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">{</span> loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>App.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"file.worker.js"/*tpa=https://webpack.docschina.org/file.worker.js*/</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>然后，通过你的首选方式去运行 <code>webpack</code>。</p> <h2 id="options">选项 <a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th align="center">选项名</th> <th align="center">类型</th> <th align="center">默认值</th> <th align="left">描述</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="选项名"><span><strong><a href="#worker"><code>worker</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{String|Object}</code></span></td> <td align="center" data-th="默认值"><span><code>Worker</code></span></td> <td align="left" data-th="描述"><span>允许设置 web worker 构造函数的名称和选项</span></td> </tr> <tr> <td align="center" data-th="选项名"><span><strong><a href="#publicpath"><code>publicPath</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{String|Function}</code></span></td> <td align="center" data-th="默认值"><span>与 <code>output.publicPath</code> 相同</span></td> <td align="left" data-th="描述"><span>在浏览器中引用时，指定输出文件的 public url 地址</span></td> </tr> <tr> <td align="center" data-th="选项名"><span><strong><a href="#filename"><code>filename</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{String|Function}</code></span></td> <td align="center" data-th="默认值"><span>与 <code>output.filename</code> 相同</span></td> <td align="left" data-th="描述"><span>web worker 入口 chunk 的文件名</span></td> </tr> <tr> <td align="center" data-th="选项名"><span><strong><a href="#chunkfilename"><code>chunkFilename</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="center" data-th="默认值"><span>与 <code>output.chunkFilename</code> 相同</span></td> <td align="left" data-th="描述"><span>web worker 非入口 chunk 的文件名</span></td> </tr> <tr> <td align="center" data-th="选项名"><span><strong><a href="#inline"><code>inline</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>\'no-fallback\'|\'fallback\'</code></span></td> <td align="center" data-th="默认值"><span><code>undefined</code></span></td> <td align="left" data-th="描述"><span>允许将内联的 web worker 作为 <code>BLOB</code></span></td> </tr> <tr> <td align="center" data-th="选项名"><span><strong><a href="#esmodule"><code>esModule</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{Boolean}</code></span></td> <td align="center" data-th="默认值"><span><code>true</code></span></td> <td align="left" data-th="描述"><span>使用 ES 模块语法</span></td> </tr> </tbody> </table> <h3 id="worker"><code>worker</code> <a href="#worker" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>String|Object</code> 默认值：<code>Worker</code></p> <p>设置 worker 的类型，</p> <h4 id="string"><code>String</code> <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>允许为 web worker 设置 constructor 的名字。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          worker<span class="token operator">:</span> <span class="token string">"SharedWorker"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="object"><code>Object</code> <a href="#object" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>为 web worker 设置 constructor 的名字和选项。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          worker<span class="token operator">:</span> <span class="token punctuation">{</span>\n            type<span class="token operator">:</span> <span class="token string">"SharedWorker"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              type<span class="token operator">:</span> <span class="token string">"classic"</span><span class="token punctuation">,</span>\n              credentials<span class="token operator">:</span> <span class="token string">"omit"</span><span class="token punctuation">,</span>\n              name<span class="token operator">:</span> <span class="token string">"my-custom-worker-name"</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="publicpath"><code>publicPath</code> <a href="#publicpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>String|Function</code> 默认值：与 <code>output.publicPath</code> 相同</p> <p>在浏览器中引用时，<code>publicPath</code> 用于指定输出文件的 public URL 地址。 如未定义，则使用与其他 webpack 资源相同的 public 地址。</p> <h4 id="string"><code>String</code> <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          publicPath<span class="token operator">:</span> <span class="token string">"/scripts/workers/"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="function"><code>Function</code> <a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">publicPath</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">pathData<span class="token punctuation">,</span> assetInfo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/scripts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pathData<span class="token punctuation">.</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/workers/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="filename"><code>filename</code> <a href="#filename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>String|Function</code> 默认值：与 <code>output.filename</code> 相同，会添加 <code>worker</code> 后缀，示例 —— <code>output.filename: \'[name].js\'/*tpa=https://webpack.docschina.org/[name].js*/</code> 的选项会变成 <code>[name].worker.js</code></p> <p>web worker 入口 chunk 的文件名。</p> <h4 id="string"><code>String</code> <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          filename<span class="token operator">:</span> <span class="token string">"[name].[contenthash].worker.js"/*tpa=https://webpack.docschina.org/[name].[contenthash].worker.js*/</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="function"><code>Function</code> <a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">pathData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>\n              <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>pathData<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>entryModule<span class="token punctuation">.</span>resource<span class="token punctuation">)</span>\n            <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token string">"[name].custom.worker.js"/*tpa=https://webpack.docschina.org/[name].custom.worker.js*/</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token string">"[name].js"/*tpa=https://webpack.docschina.org/[name].js*/</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="chunkfilename"><code>chunkFilename</code> <a href="#chunkfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>String</code> 默认值：与 <code>output.chunkFilename</code> 相同，并在基础上添加 <code>worker</code> 后缀，示例 —— <code>output.chunkFilename: \'[id].js\'/*tpa=https://webpack.docschina.org/[id].js*/</code> 选项值会变为 <code>[id].worker.js</code></p> <p>web worker 非入口 chunk 的文件名。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          chunkFilename<span class="token operator">:</span> <span class="token string">"[id].[contenthash].worker.js"/*tpa=https://webpack.docschina.org/[id].[contenthash].worker.js*/</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="inline"><code>inline</code> <a href="#inline" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>\'fallback\' | \'no-fallback\'</code> 默认值：<code>undefined</code></p> <p>允许将内联的 web worker 作为 <code>BLOB</code>。</p> <p>当 inline 模式设置为 <code>fallback</code> 时，会为不支持 web worker 的浏览器创建文件，要禁用此行为，只需将其设置为 <code>no-fallback</code> 即可。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          inline<span class="token operator">:</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="esmodule"><code>esModule</code> <a href="#esmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>Boolean</code> 默认值：<code>true</code></p> <p>默认情况下，<code>worker-loader</code> 会生成使用 ES 模块语法的 JS 模块.</p> <p>如果想启用 CommonJS 模块语法，可使用如下配置:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="examples">Examples <a href="#examples" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="basic">Basic <a href="#basic" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>worker 文件可以像其他文件导入依赖那样来导入依赖：</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"my.worker.js"/*tpa=https://webpack.docschina.org/my.worker.js*/</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> result<span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  result<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbutton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> postMessage<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>my.worker.js</strong></p> <pre><code class="hljs language-js"><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> workerResult <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n\n  workerResult<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n  <span class="token function">postMessage</span><span class="token punctuation">(</span>workerResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="integrating-with-es6-features">集成 ES6+ 特性 <a href="#integrating-with-es6-features" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>如果使用 <a href="https://github.com/babel/babel-loader"><code>babel-loader</code></a> 配置，甚至可以使用 ES6+ 的特性。</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"my.worker.js"/*tpa=https://webpack.docschina.org/my.worker.js*/</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> result<span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  result<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbutton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> postMessage<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>my.worker.js</strong></p> <pre><code class="hljs language-js"><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> workerResult <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n\n  workerResult<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n  <span class="token function">postMessage</span><span class="token punctuation">(</span>workerResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.worker\\.(c|m)?js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="integrating-with-typescript">集成 TypeScript <a href="#integrating-with-typescript" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>要与 TypeScript 集成，你需要为 worker 导出一个自定义模块。</p> <p><strong>typings/worker-loader.d.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"worker-loader!*"</span> <span class="token punctuation">{</span>\n  <span class="token comment">// You need to change `Worker`, if you specified a different value for the `workerType` option</span>\n  <span class="token keyword">class</span> <span class="token class-name">WebpackWorker</span> <span class="token keyword">extends</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Uncomment this if you set the `esModule` option to `false`</span>\n  <span class="token comment">// export = WebpackWorker;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> WebpackWorker<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>my.worker.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">const</span> ctx<span class="token operator">:</span> Worker <span class="token operator">=</span> self <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 发送数据到父线程</span>\nctx<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">"foo"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 响应父线程的消息</span>\nctx<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>index.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"worker-loader!./Worker"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nworker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="cross-origin-policy">跨域策略 <a href="#cross-origin-policy" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"><code>WebWorkers</code></a> 受到 <a href="https://en.wikipedia.org/wiki/Same-origin_policy">同源策略</a> 的限制， 如果 <code>webpack</code> 资源的访问服务和应用程序不是同源，浏览器就会拦截其下载。 如果在 CDN 域下托管资源， 通常就会出现这种情况。 甚至从 <code>webpack-dev-server</code> 下载时都会被拦截。</p> <p>有两种解决方法：</p> <p>第一种，通过配置 <a href="#inline"><code>inline</code></a> 参数，将 worker 作为 blob 内联， 而不是将其作为外部脚本下载</p> <p><strong>App.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"file.worker.js"/*tpa=https://webpack.docschina.org/file.worker.js*/</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span> inline<span class="token operator">:</span> <span class="token string">"fallback"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>第二种，通过配置 <a href="#publicpath"><code>publicPath</code></a> 选项， 重写 worker 脚本的基础下载 URL</p> <p><strong>App.js</strong></p> <pre><code class="hljs language-js"><span class="token comment">// 这会使 worker 从 `/workers/file.worker.js` 下载</span>\n<span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">"file.worker.js"/*tpa=https://webpack.docschina.org/file.worker.js*/</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">"worker-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span> publicPath<span class="token operator">:</span> <span class="token string">"/workers/"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="contributing">Contributing <a href="#contributing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>如果你从未阅读过我们的贡献指南，请在上面花点时间。</p> <p><a href="https://github.com/webpack-contrib/worker-loader/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p> <h2 id="license">License <a href="#license" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/webpack-contrib/worker-loader/blob/master/LICENSE">MIT</a></p> '}}]);