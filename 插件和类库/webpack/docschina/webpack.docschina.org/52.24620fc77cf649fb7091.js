(self.webpackChunk=self.webpackChunk||[]).push([[52],{52:function(e){e.exports='<p>本指南目标是帮助你在使用 webpack 的时候直接迁移到 webpack 5。如果你使用运行 webpack 更底层的工具，请 参考工具有关迁移的指引。</p> <h2 id="preparations">准备工作 <a href="#preparations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack 5 要求至少 Node.js 10.13.0 (LTS)。</p> <blockquote class="tip"> <p>使用较新的 Node.js 版本能够改善构建性能。</p> </blockquote> <h3 id="upgrade-webpack-and-its-dependencies">升级 webpack 以及它的依赖 <a href="#upgrade-webpack-and-its-dependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <h4 id="upgrade-webpack-4-to-the-latest-available-version">将 webpack 4 升级到最新的可用版本 <a href="#upgrade-webpack-4-to-the-latest-available-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>当使用 webpack >= 4 的版本, 升级到最新的 webpack 4 版本不需要额外的指南。 如果你使用低于 4 的 webpack 版本，请参考 <a href="migrate/4/index.htm"/*tpa=https://webpack.docschina.org/migrate/4/*/>webpack 4 迁移指南</a>。</p> <h4 id="upgrade-webpack-cli-to-the-latest-available-version-when-used">将 webpack-cli 升级到最新的可用版本 (当有使用的时候) <a href="#upgrade-webpack-cli-to-the-latest-available-version-when-used" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <h4 id="upgrade-all-used-plugins-and-loaders-to-the-latest-available-version">将所有使用的 plugin 和 loader 升级到最新的可用版本 <a href="#upgrade-all-used-plugins-and-loaders-to-the-latest-available-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>必须使用已适配 webpack 5 的 plugin 和 loader，它们可能存在 beta 版本。</p> <blockquote class="warning"> <p>当你升级到重大版本的时候，请参考相关 plugin 和 loader 的迁移指南。一些常用的 loader，如 <code>raw-loader</code>，<code>url-loader</code> 以及 <code>file-loader</code>，应使用新的内置<a href="guides/asset-modules/index.htm"/*tpa=https://webpack.docschina.org/guides/asset-modules/*/>资源模块</a>替换。</p> </blockquote> <blockquote class="warning"> <p>ExtendedAPIPlugin 已被移除，它的逻辑已经被整合到 <a href="../github.com/webpack/webpack/blob/master/lib/APIPlugin.js"/*tpa=https://github.com/webpack/webpack/blob/master/lib/APIPlugin.js*/><code>APIPlugin</code></a> 当中。</p> </blockquote> <h4 id="make-sure-your-build-has-no-errors-or-warnings">确保你的构建没有错误与警告 <a href="#make-sure-your-build-has-no-errors-or-warnings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>可能生成新的错误或警告，这是由于 webpack, webpack-cli，plugin 或 loader 升级版本导致。 请关注构建时相关的废弃警告。</p> <p>你可以使用如下方式调用 webpack，以追踪废弃告警的栈堆信息，并推断出是由哪个 plugin 或 loader 引起的。</p> <pre><code class="hljs language-bash">node --trace-deprecation node_modules/webpack/bin/webpack.js</code></pre> <blockquote class="warning"> <p>webpack 5 会移除所有废弃的特性。为了无障碍的推进，应保证在构建时再无任何的废弃警告。</p> </blockquote> <h4 id="make-sure-you-are-using-entry-point-information-from-stats">确保你使用的是 stats 中的入口信息 <a href="#make-sure-you-are-using-entry-point-information-from-stats" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <blockquote class="tip"> <p>如果你正使用 <a href="plugins/html-webpack-plugin/index.htm"/*tpa=https://webpack.docschina.org/plugins/html-webpack-plugin/*/>HtmlWebpackPlugin</a>，可跳过该步骤。</p> </blockquote> <p>当使用静态 HTML 或通过其它的方式生成 HTML 时，请确保使用的 entry 是从 stats 的 JSON 中获取到的，再生成 <code>&#x3C;script></code>，<code>&#x3C;style></code> 以及 <code>&#x3C;link></code> 标签。</p> <p>如果无法做到这一点，请不要设置 <code>splitChunks.chunks: \'all\'</code> 和 <code>splitChunks.maxSize</code>。请注意，这是并不是最理想的解决方案。</p> <h4 id="make-sure-to-use-mode">请确保设置了 <code>mode</code> <a href="#make-sure-to-use-mode" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>将 mode 设置成 <a href="configuration/mode/index.htm#mode-production"/*tpa=https://webpack.docschina.org/configuration/mode/#mode-production*/><code>production</code></a> 或 <a href="configuration/mode/index.htm#mode-development"/*tpa=https://webpack.docschina.org/configuration/mode/#mode-development*/><code>development</code></a> 以确保相应的默认值被设置。</p> <h4 id="update-outdated-options">升级废弃的配置项 <a href="#update-outdated-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>如有使用以下的配置项，请升级至最新的版本：</p> <ul> <li><code>optimization.hashedModuleIds: true</code> ↦ <code>optimization.moduleIds: \'deterministic\'</code></li> <li><code>optimization.namedChunks: true</code> ↦ <code>optimization.chunkIds: \'named\'</code></li> <li><code>optimization.namedModules: true</code> ↦ <code>optimization.moduleIds: \'named\'</code></li> <li><code>NamedModulesPlugin</code> ↦ <code>optimization.moduleIds: \'named\'</code></li> <li><code>NamedChunksPlugin</code> ↦ <code>optimization.chunkIds: \'named\'</code></li> <li><code>HashedModuleIdsPlugin</code> ↦ <code>optimization.moduleIds: \'deterministic\'</code></li> <li><code>optimization.noEmitOnErrors: false</code> ↦ <code>optimization.emitOnErrors: true</code></li> <li><code>optimization.occurrenceOrder: true</code> ↦ <code>optimization: { chunkIds: \'total-size\', moduleIds: \'size\' }</code></li> <li><code>optimization.splitChunks.cacheGroups.vendors</code> ↦ <code>optimization.splitChunks.cacheGroups.defaultVendors</code></li> <li><code>Compilation.entries</code> ↦ <code>Compilation.entryDependencies</code></li> <li><code>serve</code> ↦ <code>serve</code> 已被移除，推荐使用 <a href="configuration/dev-server/index.htm"/*tpa=https://webpack.docschina.org/configuration/dev-server/*/><code>DevServer</code></a></li> </ul> <h4 id="test-webpack-5-compatibility">测试 webpack 5 兼容性 <a href="#test-webpack-5-compatibility" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>尝试在 webpack 4 的配置中添加如下选项，检查一下构建是否仍然正确的运行。</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  node<span class="token operator">:</span> <span class="token punctuation">{</span>\n    Buffer<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    process<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>webpack 5 移除的配置会永远设置成 <code>false</code>。</p> </blockquote> <p>在升级至 webpack 5 时，必须删除这些配置。</p> <h4 id="upgrade-webpack-version">升级 webpack 版本 <a href="#upgrade-webpack-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>npm：<code>npm install webpack@next --dev</code></p> <p>Yarn：<code>yarn add webpack@next -D</code></p> <h4 id="clean-up-configuration">清理配置 <a href="#clean-up-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <ul> <li> <p>请考虑将 <code>optimization.moduleIds</code> 和 <code>optimization.chunkIds</code> 从你 webpack 配置中移除。使用默认值会更合适，因为它们会在 <a href="configuration/mode/index.htm#mode-production"/*tpa=https://webpack.docschina.org/configuration/mode/#mode-production*/><code>production 模式</code></a> 下支持长效缓存且可以在 <a href="configuration/mode/index.htm#mode-development"/*tpa=https://webpack.docschina.org/configuration/mode/#mode-development*/><code>development</code> 模式</a>下进行调试。</p> </li> <li> <p>当 webpack 配置中使用了 <code>[hash]</code> 占位符时，请考虑将它改为 <code>[contenthash]</code>。效果一致，但事实证明会更为有效。</p> </li> <li> <p>如果你使用了 Yarn 的 PnP 以及 <code>pnp-webpack-plugin</code> 插件，你可以将其从配置中移除，因为它已被默认支持。</p> </li> <li> <p>如果你使用了带有正则表达式参数的 <code>IgnorePlugin</code>，现已支持传入一个 <code>options</code> 对象：<code>new IgnorePlugin({ resourceRegExp: /regExp/ })</code>。</p> </li> <li> <p>如果你使用了 <code>node.something: \'empty\'</code>，请使用 <code>resolve.fallback.something: false</code> 代替。</p> </li> <li> <p>如果你在 webpack 的 Node.js API 中使用了 <code>watch: true</code>，请移除它。无需按编译器的提示设置它，当执行 <code>watch()</code> 时为 <code>true</code>，当执行 <code>run()</code> 的时候为 <code>false</code>。</p> </li> <li> <p>如果你定义了 <code>rules</code>，以使用 <code>raw-loader</code>，<code>url-loader</code> 或 <code>file-loader</code> 来加载资源，则可以使用 <a href="guides/asset-modules/index.htm"/*tpa=https://webpack.docschina.org/guides/asset-modules/*/>资源模块</a> 替代。</p> </li> <li> <p>如果你将 <code>target</code> 设置为函数，则应将其更新为 <code>false</code>，然后在 <code>plugins</code> 选项中使用该函数。具体示例如下：</p> <pre><code class="hljs language-json"><span class="token comment">// for webpack 4</span>\n<span class="token punctuation">{</span>\n    target<span class="token operator">:</span> WebExtensionTarget(nodeConfig)\n<span class="token punctuation">}</span>\n\n<span class="token comment">// for webpack 5</span>\n<span class="token punctuation">{</span>\n    target<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        WebExtensionTarget(nodeConfig)\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre> </li> </ul> <p>如果通过 import 使用了 WebAssembly，应遵循以下两点：</p> <ul> <li>在配置增加 <code>experiments.syncWebAssembly: true</code> 配置，以启用废弃提醒，获得在 webpack 4 中的相同行为。</li> <li>在成功升级至 webpack 5 以后，应将 <code>experiments</code> 的值改为 <code>experiments: { asyncWebAssembly: true }</code> 以使用最新规范的 WASM。</li> </ul> <p>重新考虑 <code>optimization.splitChunks</code> 的配置：</p> <ul> <li>推荐使用默认配置或使用 <code>optimization.splitChunks: { chunks: \'all\' }</code> 配置。</li> <li>当使用自定义配置时，请删除 <code>name: false</code>，并将 <code>name: string | function</code> 替换为 <code>idHint: string | function</code>。</li> <li>使用 <code>optimization.splitChunks: { default: false, vendors: false }</code> 配置可以关闭默认值。但我们不推荐这么做，如果你需要在 webpack 5 中获得与之相同的效果：请将配置改为 <code>optimization.splitChunks: { default: false, defaultVendors: false }</code>。</li> </ul> <p>考虑移除的默认值：</p> <ul> <li>当设置 <code>entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/</code> 时，你可以省略它，此为默认值。</li> <li>当设置 <code>output.path: path.resolve(__dirname, \'dist\')</code> 时：你可以省略它，此为默认值。</li> <li>当设置 <code>output.filename: \'[name].js\'/*tpa=https://webpack.docschina.org/[name].js*/</code> 时：你可以省略它，此为默认值。</li> </ul> <p>需要旧版浏览器的支持？</p> <ul> <li>默认情况下，webpack 会使用你的 browserslist 配置来决定 emit 哪种代码样式。</li> <li>如果未使用 browserslist，则默认为 ES6 风格。你可以使用 <code>target: ["web", "es5"]</code> 将其改为 ES5。</li> <li>对于 Node.js 来说，在构建时支持在 <code>target</code> 中配置版本，webpack 会自动找出支持的语法，例如，<code>target: \'node8.6\'</code>。</li> </ul> <h4 id="cleanup-the-code">清理代码 <a href="#cleanup-the-code" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>使用 <code>/* webpackChunkName: \'...\' */</code> 时：请确保你了解其意图：</p> <ul> <li>此处 chunk 的名称本意是 public 的。</li> <li>它不只是用于开发模式的名称。</li> <li>webpack 会在 production 以及 development 的模式中使用它对文件进行命名。</li> <li>即使不使用 <code>webpackChunkName</code>，webpack 5 也会自动在 <code>development</code> 模式下分配有意义的文件名。</li> </ul> <p>对 JSON 模块使用命名导出：新规范中已不再支持此功能，因此会收到警告。请使用 <code>import package from \'https://webpack.docschina.org/package.json\'; console.log(package.version);</code> 替换 <code>import { version } from \'https://webpack.docschina.org/package.json\'; console.log(version);</code>。</p> <h4 id="cleanup-the-build-code">清理构建代码 <a href="#cleanup-the-build-code" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <ul> <li>当使用 <code>const compiler = webpack(...);</code>，确保在使用完毕后，使用 <code>compiler.close(callback);</code> 关闭编译器。 <ul> <li>这不适用于自动关闭的 <code>webpack(..., callback)</code>。</li> <li>如果你在监听模式下使用 webpack，直到用户结束进程，此为可选。在监听模式下的空闲阶段将被用于执行此工作。</li> </ul> </li> </ul> <h4 id="run-a-single-build-and-follow-advises">运行单个构建并遵循以下建议 <a href="#run-a-single-build-and-follow-advises" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>请务必仔细阅读错误/警告。</p> <p>如果没有相关的建议？请创建一个 issue，我们会尝试解决它。重复以下的步骤，直到你至少解决到 Level 3 或 Level 4：</p> <ul> <li> <p>Level 1: 模式（Schema）校验失败。配置选项已更改。应该要有校验失败的信息且附上 <code>BREAKING CHANGE:</code> 提示，或提示应该使用哪个选项。</p> </li> <li> <p>Level 2: webpack 异常退出并出现错误。错误信息应告诉你哪里需要进行修改。</p> </li> <li> <p>Level 3: 构建错误。错误信息应该要有 <code>BREAKING CHANGE:</code> 提示。</p> </li> <li> <p>Level 4: 构建警告。警告信息应该告诉你哪里需要进行修改。</p> </li> <li> <p>Level 5: 运行时错误。这很棘手，你可以要调试才能找到问题所在。一般的建议在这很难有用。</p> </li> <li> <p>Level 6: 弃用警告。你可能会收到很多弃用警告，插件需要时间来赶上内核的变化。请将这些弃用上报给插件。这些弃用只是警告，构建仍然可以正常工作，只是会有小瑕疵（比如性能降低）。</p> </li> <li> <p>Level 7: 性能问题，一般来说，webpack 5 的性能应该会有所提高，但也存在少数情况性能会变差。</p> </li> <li> <p>关于运行时错误：</p> <ul> <li><code>process</code> 未定义。 <ul> <li>webpack 5 不再引入 Node.js 变量的 polyfill，在前端代码中应避免使用。</li> <li>想支持前端和浏览器的用法？使用 <code>exports</code> 或 <code>imports</code> 中的 package.json 字段，会根据环境不同使用不同的代码。 <ul> <li>也可以使用 <code>browser</code> 字段来支持旧的 bundlers。</li> <li>替代方案。用 <code>typeof process</code> 检查包裹的代码块。请注意，这将对 bundle 大小产生负面影响。</li> </ul> </li> <li>想要使用环境变量，如 <code>process.env.VARIABLE</code>？你需要使用 <code>DefinePlugin</code> 或 <code>EnvironmentPlugin</code> 在配置中定义这些变量。 <ul> <li>考虑使用 <code>VARIABLE</code> 代替，但需要检查 <code>typeof VARIABLE !== \'undefined\'</code>。<code>process.env</code> 是 Node.js 特有，应避免在前端中使用。</li> </ul> </li> </ul> </li> <li>404 的 error 将指向含有 <code>auto</code> 的 URL <ul> <li>并非所有生态系统工具都已设置好新的 <code>publicPath</code> 的默认值 <code>output.publicPath: "auto"</code> <ul> <li>使用静态的 <code>output.publicPath: ""</code> 代替。</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>关于弃用警告：</p> <ul> <li>你使用带有 <code>--no-deprecation</code> 选项的 node 运行 webpack，可以隐藏废弃告警，例如：<code>node --no-deprecation node_modules/webpack/bin/webpack.js</code>。但这只能作为临时的解决方案。</li> <li>plugin 和 loader 的开发者，应遵循弃用信息中的建议以改进代码。</li> </ul> </li> <li> <p>关于性能问题：</p> <ul> <li>通过 Profile 检查时间耗费在哪里。 <ul> <li><code>--profile --progress</code> 可以展示一个简单的性能曲线。</li> <li><code>node --inspect-brk node_modules/webpack/bin/webpack.js</code> + <a href="chrome://inspect"><code>chrome://inspect</code></a> / <a href="edge://inspect"><code>edge://inspect</code></a>（查看 profiler 选项）。 <ul> <li>你可以将这些性能文件保存到文件中，并在 issues 中提供它们。</li> <li>尝试使用 <code>--no-turbo-inlining</code> 选项，在某些情况下可以获得更好的堆栈信息。</li> </ul> </li> </ul> </li> <li>在增量构建时，构建模块的世界可以通过使用像 webpack 4 中的不安全缓存来改善： <ul> <li><code>module.unsafeCache: true</code></li> <li>但这可能会影响处理代码库的一些变化能力。</li> </ul> </li> <li>全量构建 <ul> <li>与新功能相比，弃用特性的向后兼容层通常性能很差。</li> <li>创建许多警告会影响构建性能，即使它们被忽略。</li> <li>Source Maps 的代价很昂贵。请在文档中查看 <a href="configuration/devtool/index.htm"/*tpa=https://webpack.docschina.org/configuration/devtool/*/><code>devtool</code></a> 选项以比较使用不同选项的代价。</li> <li>Anti-Virus（反病毒）保护可能会影响文件系统的访问性能。</li> <li>持久缓存可以帮助改善重复性的完整构建。</li> <li>Module Federation 允许将应用程序分割成多个较小的构建。</li> </ul> </li> </ul> </li> </ul> <h4 id="turn-off-es2015-syntax-in-runtime-code-if-necessary">如有需要，在 runtime 代码中禁用 ES2015 语法 <a href="#turn-off-es2015-syntax-in-runtime-code-if-necessary" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>默认地，webpack 的 runtime 代码会使用 ES2015 语法以使得构建出来的包体积更小。如果你构建的目标环境中不支持这种语法（比如 IE11），你需要设置 <code>target: [\'web\', \'es5\']</code> 将代码转换为 ES5 语法（如果 target 环境是浏览器，设置为 <code>\'web\'</code> ）。</p> <h4 id="everything-works">所有情况都运行如常？ <a href="#everything-works" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>如果你成功地迁移至 webpack 5。请<a href="https://twitter.com/intent/tweet?source=https://webpack.js.org/migrate/5/">发推 @ 我们</a>。</p> <h4 id="it-is-not-working">运行异常？ <a href="#it-is-not-working" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>创建一个 <a href="https://github.com/webpack/webpack/issues/new?template=Bug_report.md">issue</a> 并告诉我们在迁移过程中你遇到的问题。</p> <h4 id="something-missing-in-this-guide">发现本指南中缺失的东西？ <a href="#something-missing-in-this-guide" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>请提交 Pull Request 以帮助其他开发者更好地使用该指南。</p> <h2 id="changes-to-internals">内核的改变 <a href="#changes-to-internals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>如果你对内核感兴趣，此处会列出 webpack 内核相关的变更，如：添加类型，代码重构和方法重命名等。但这些变化并不会作为迁移通用案例的一部份。</p> <ul> <li><code>Module.nameForCondition</code>，<code>Module.updateCacheModule</code> 以及 <code>Module.chunkCondition</code> 不再可选。</li> </ul> <h3 id="getoptions-method-for-loaders">loader 的 getOptions 方法 <a href="#getoptions-method-for-loaders" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 5 发布后，在 loader 的上下文中，会带有内置的 <a href="api/loaders/index.htm#thisgetoptionsschema"/*tpa=https://webpack.docschina.org/api/loaders/#thisgetoptionsschema*/><code>this.getOptions</code></a> 方法。这对于那些使用之前推荐 <a href="https://github.com/webpack/schema-utils">schema-utils</a> 中的 <code>getOptions</code> 方法的 loader 而言，这是一个重大更新：</p> <ul> <li><code>this.getOptions</code> 自 webpack 5 起支持使用</li> <li>它支持将 JSON 作为查询字符串，而不仅仅是 JSON5：如 <code>?{arg:true}</code> ↦ <code>?{"arg":true}</code>。在相应的 loader 文档中，应推荐使用 JSON 并不推荐使用 JSON5。</li> <li><a href="https://github.com/webpack/loader-utils"><code>loader-utils</code></a> 拥有解析查询字符串的特定行为（如 <code>true</code>，<code>false</code> 以及 <code>null</code> 不会被解析成 <code>string</code> 而是原始类型的值）。这对于新的内置 <code>this.getOptions</code> 方法来说，不再适用，它使用 Node 原生的 <a href="https://nodejs.org/api/querystring.html"><code>querystring</code></a> 方法进行解析。此时，需在 loader 中使用 <code>this.getOptions</code> 获取配置选项之后，根据情况添加自定义行为。</li> <li>模式(Schema) 参数对新的 <code>this.getOptions</code> 方法而言是可选的，但我们强烈建议给你的 loader 选项添加模式校验。模式中的 <code>title</code> 字段，可用于自定义校验的错误信息，比如 <code>"title": "My Loader ooooptions"</code> 会在这种方式展示错误信息：<code>Invalid ooooptions object. My Loader has been initialised using an ooooptions object that does not match the API schema. - ooooptions.foo.bar.baz should be a string.</code>。</li> </ul> '}}]);