(self.webpackChunk=self.webpackChunk||[]).push([[2603],{2603:function(e){e.exports='<p>webpack 4 于 2018 年 2 月发布。 从那时起，我们在没有重大更新的情况下，推出了很多功能。 我们知道，人们不喜欢带有突破性的重大变化。 尤其是 webpack，人们通常一年只接触两次，剩下的时间就 "只管用 "了。 但是，在不做突破性改动的情况下推出功能也是有成本的： 我们不能做重大的 API 或架构改进。</p> <p>所以时不时就会有一个点，困难堆积起来，我们不得不做突破性的改动，才不至于把一切都搞乱。 这时候就需要一个新的主要版本了。 所以 webpack 5 包含了这些架构上的改进，以及没有这些改进就不可能实现的功能。</p> <p>这个主要版本也是修改一些默认值的机会，并与此同时出现的建议和规范保持一致。</p> <p>所以今天（2020-10-10）webpack 5.0.0 发布了，但这并不意味着它已经完成了，没有 bug，甚至功能完整。 就像 webpack 4 一样，我们通过修复问题以及增加新特性来延续开发。 在接下来的日子里，可能会有很多 bug 修复。新特性可能也会出现。</p> <h2 id="common-questions">疑问解答 <a href="#common-questions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="so-what-does-the-release-mean">那么发布意味着什么呢？<a href="#so-what-does-the-release-mean" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这意味着我们完成了重大的变更。 许多重构已经完成，以提高架构的水平，并为未来的功能（和当前的功能）创建一个良好的基础。</p> <h3 id="so-when-is-the-time-to-upgrade">那么什么时候是升级的时候呢？<a href="#so-when-is-the-time-to-upgrade" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这要看情况。有一个很好的机会，升级失败，你需要给它第二次或第三次尝试。 如果你愿意的话，现在就尝试升级，并向 webpack、插件和加载器提供反馈。 我们很想解决这些问题。总得有人开始，而你将是第一批受益者之一。</p> <h2 id="sponsoring-update">赞助情况 <a href="#sponsoring-update" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack 是完全基于<a href="https://opencollective.com/webpack">赞助</a>的。 它不像其他一些开源项目那样与大公司挂钩（并由其支付费用）。 99% 的赞助收入是根据贡献者和维护者的贡献来分配的。 我们相信将这些钱投资于使 webpack 变得更好。</p> <p>但是由于疫情的原因，公司已经不怎么愿意赞助了。 在这种情况下，Webpack 也受到了影响（就像许多其他公司和人一样）。</p> <p>我们从来没有能力支付给我们的贡献者我们认为他们应得的金额，但现在我们只有一半的钱，所以我们需要更严重的削减。 在情况好转之前，我们将只向贡献者和维护者支付前 10 天或每个月的工资。 其余的日子，他们可以自愿工作，由雇主支付工资，从事其他工作，或者休息一些日子。 这样我们就可以在前 10 天的工作中支付更多相当于投入时间的报酬。</p> <p>我们最感激的是 <a href="https://tech.trivago.com/opensource">trivago</a>，他们在过去的 3 年里为 webpack 提供了大量的赞助。 遗憾的是，由于受到 Covid-19 的冲击，他们今年无法继续赞助了。 希望有其他公司站出来，跟随这些（巨头）的脚步。</p> <p>感谢所有的赞助者。</p> <h2 id="general-direction">整体方向 <a href="#general-direction" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>这个版本的重点在于以下几点。</p> <ul> <li>尝试用持久性缓存来提高构建性能。</li> <li>尝试用更好的算法和默认值来改进长期缓存。</li> <li>尝试用更好的 Tree Shaking 和代码生成来改善包大小。</li> <li>尝试改善与网络平台的兼容性。</li> <li>尝试在不引入任何破坏性变化的情况下，清理那些在实现 v4 功能时处于奇怪状态的内部结构。</li> <li>试图通过现在引入突破性的变化来为未来的功能做准备，使其能够尽可能长时间地保持在 v5 版本上。</li> </ul> <h2 id="migration-guide">__迁移__指南 {#<strong>migration</strong>-guide}<a href="#migration-guide" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="migrate/5.htm"/*tpa=https://webpack.docschina.org/migrate/5*/>在这里可查阅迁移指南</a></p> <h2 id="major-changes-removals">重大变更: 功能清除 <a href="#major-changes-removals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="removed-deprecated-items">清理弃用的能力 <a href="#removed-deprecated-items" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>所有在 v4 中被废弃的能力都被移除。</p> <p>迁移: 确保你的 webpack 4 构建没有打印废弃警告。</p> <p>以下是一些被移除但在 v4 中没有废弃警告的东西：</p> <ul> <li>IgnorePlugin 和 BannerPlugin 现在必须只传递一个参数，这个参数可以是对象、字符串或函数。</li> </ul> <h3 id="deprecation-codes">废弃代码 <a href="#deprecation-codes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>新的弃用包括一个弃用代码，这样他们更容易被引用。</p> <h3 id="syntax-deprecated">语法废弃 <a href="#syntax-deprecated" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>require.include</code>已被废弃，使用时默认会发出警告。</p> <p>可以通过 <code>Rule.parser.requireInclude</code> 将行为改为允许、废弃或禁用。</p> <h3 id="automatic-nodejs-polyfills-removed">不再为 Node.js 模块 自动引用 Polyfills <a href="#automatic-nodejs-polyfills-removed" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在早期，webpack 的目的是为了让大多数的 Node.js 模块运行在浏览器中，但如今模块的格局已经发生了变化，现在许多模块主要是为前端而编写。webpack &#x3C;= 4 的版本中提供了许多 Node.js 核心模块的 polyfills，一旦某个模块引用了任何一个核心模块（如 <code>cypto</code> 模块），webpack 就会自动引用这些 polyfills。</p> <p>尽管这会使得使用为 Node.js 编写模块变得容易，但它在构建时给 bundle 附加了庞大的 polyfills。在大部分情况下，这些 polyfills 并非必须。</p> <p>从 webpack 5 开始不再自动填充这些 polyfills，而会专注于前端模块兼容。我们的目标是提高 web 平台的兼容性。</p> <p>迁移：</p> <ul> <li>尽量使用前端兼容的模块。</li> <li>可以手动为 Node.js 核心模块添加 polyfill。错误提示会告诉你如何实现。</li> <li>Package 作者：在 <code>package.json</code> 中添加 <code>browser</code> 字段，使 package 与前端兼容。为浏览器提供其他的实现/dependencies。</li> </ul> <h2 id="major-changes-long-term-caching">重大变更：长期缓存 <a href="#major-changes-long-term-caching" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="deterministic-chunk-module-ids-and-export-names">确定的 Chunk、模块 ID 和导出名称 <a href="#deterministic-chunk-module-ids-and-export-names" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>新增了长期缓存的算法。这些算法在生产模式下是默认启用的。</p> <p><code>chunkIds: "deterministic"</code> <code>moduleIds: "deterministic"</code> <code>mangleExports: "deterministic"</code></p> <p>该算法以确定性的方式为模块和分块分配短的（3 或 5 位）数字 ID， 这是包大小和长期缓存之间的一种权衡。</p> <p><code>moduleIds/chunkIds/mangleExports: false</code> 禁用默认行为，你可以通过插件提供一个自定义算法。请注意，在 webpack 4 中，<code>moduleIds/chunkIds: false</code> 如果没有自定义插件，则可以正常运行，而在 webpack 5 中，你必须提供一个自定义插件。</p> <p><strong>迁移</strong>：最好使用 <code>chunkIds</code>、<code>moduleIds</code> 和 <code>mangleExports</code> 的默认值。你也可以选择使用旧的默认值<code>chunkIds: "size"，moduleIds: "size", mangleExports: "size"</code>，这将会生成更小的包，但为了缓存，会更频繁地将其失效。</p> <p>注意：在 webpack 4 中，散列的模块 id 会导致 gzip 性能降低。这与模块顺序的改变有关，已经被修正。</p> <p>注意：在 webpack 5 中，<code>deterministic</code> Ids 在生产模式下是默认启用的。</p> <h3 id="real-content-hash">真正的内容哈希 <a href="#real-content-hash" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>当使用 <code>[contenthash]</code> 时，Webpack 5 将使用真正的文件内容哈希值。之前它 "只" 使用内部结构的哈希值。 当只有注释被修改或变量被重命名时，这对长期缓存会有积极影响。这些变化在压缩后是不可见的。</p> <h2 id="major-changes-development-support">重大变更：开发支持 <a href="#major-changes-development-support" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="named-chunk-ids">命名代码块 ID <a href="#named-chunk-ids" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在开发模式下，默认启用的新命名代码块 ID 算法为模块（和文件名）提供了人类可读的名称。 模块 ID 由其路径决定，相对于 <code>context</code>。 代码块 ID 由代码块的内容决定。</p> <p>所以你不再需要使用<code>import(/* webpackChunkName: "name" */ "module")</code>来调试。 但如果你想控制生产环境的文件名，还是有意义的。</p> <p>可以在生产环境中使用 <code>chunkIds: "named"</code> 在生产环境中使用，但要确保不要不小心暴露模块名的敏感信息。</p> <p>迁移：如果你不喜欢在开发中改变文件名，你可以通过 <code>chunkIds: "natural"</code> 来使用旧的数字模式。</p> <h3 id="module-federation">模块联邦 <a href="#module-federation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Webpack 5 增加了一个新的功能 "模块联邦"，它允许多个 webpack 构建一起工作。 从运行时的角度来看，多个构建的模块将表现得像一个巨大的连接模块图。 从开发者的角度来看，模块可以从指定的远程构建中导入，并以最小的限制来使用。</p> <p>更多细节请参见<a href="concepts/module-federation.htm"/*tpa=https://webpack.docschina.org/concepts/module-federation*/>本单独指南</a>。</p> <h2 id="major-changes-new-web-platform-features">重大变更：支持崭新的 Web 平台特性 <a href="#major-changes-new-web-platform-features" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="json-modules">JSON 模块 <a href="#json-modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>JSON 模块现在与提案保持一致，并在使用非默认导出时发出警告。 当从严格的 ECMAScript 模块导入时，JSON 模块不再有命名的导出。</p> <p>迁移: 使用默认导出。</p> <p>即使使用默认导出，未使用的属性也会被 <code>optimization.usedExports</code> 优化丢弃，属性会被 <code>optimization.mangleExports</code> 优化打乱。</p> <p>可以在 <code>Rule.parser.parse</code> 中指定一个自定义的 JSON 解析器来导入类似 JSON 的文件（例如针对 toml、yaml、json5 等）。</p> <h3 id="importmeta">import.meta <a href="#importmeta" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <ul> <li><code>import.meta.webpackHot</code> 是 <code>module.hot</code> 的别名，在严格的 ESM 中也可以使用。</li> <li><code>import.meta.webpack</code> 是 webpack 的主要版本号。</li> <li><code>import.meta.url</code> 是当前文件的 <code>file:</code> url(类似于<code>__filename</code>，但作为文件 url)。</li> </ul> <h3 id="asset-modules">资源模块 <a href="#asset-modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Webpack 5 现在已经对表示资源的模块提供了内置支持。 这些模块可以向输出文件夹发送一个文件，或者向 javascript 包注入一个 DataURI。 无论哪种方式，它们都会给出一个 URL 来工作。</p> <p>它们可以通过多种方式被使用：</p> <ul> <li><code>import url from "image.png"/*tpa=https://webpack.docschina.org/image.png*/</code> 和 在<code>module.rule</code> 中设置 <code>type: "asset"</code> 当匹配这样的导入时。(老方法)</li> <li><code>new URL("image.png"/*tpa=https://webpack.docschina.org/image.png*/, import.meta.url)</code> (新方式)</li> </ul> <p>选择 "新的方式 "语法是为了允许在没有打包工具的情况下运行代码。这种语法也可以在浏览器中的原生 ECMAScript 模块中使用。</p> <h3 id="native-worker-support">原生 Worker 支持 <a href="#native-worker-support" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>当把资源的 <code>new URL</code> 和 <code>new Worker</code>/<code>new SharedWorker</code>/<code>navigator.serviceWorker.register</code> 结合起来时，webpack 会自动为 web worker 创建一个新的入口点（entrypoint）。</p> <p><code>new Worker(new URL("worker.js"/*tpa=https://webpack.docschina.org/worker.js*/, import.meta.url))</code></p> <p>选择这种语法也是为了允许在没有打包工具的情况下运行代码。这种语法在浏览器的原生 ECMAScript 模块中也可以使用。</p> <h3 id="uris">URIs <a href="#uris" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Webpack 5 支持在请求中处理协议。</p> <ul> <li>支持<code>data:</code>。支持 Base64 或原始编码。Mimetype 可以在<code>module.rule</code>中被映射到加载器和模块类型。例如：<code>import x from "data:text/javascript,export default 42"</code>。</li> <li>支持<code>file:</code>。</li> <li>支持<code>http(s):</code>，但需要通过<code>new webpack.experiments.s schemesHttp(s)UriPlugin()</code>选择加入。 <ul> <li>默认情况下，当目标为 "web "时，这些 URI 会导致对外部资源的请求（它们是外部资源）。</li> </ul> </li> </ul> <p>支持请求中的片段。例如：<code>./file.js#fragment</code>。</p> <h3 id="async-modules">异步模块 <a href="#async-modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Webpack 5 支持所谓的 "异步模块"。 这些模块并不是同步解析的，而是基于异步和 Promise 的。</p> <p>通过 "import "导入它们会被自动处理，不需要额外的语法，而且几乎看不出区别。</p> <p>通过<code>require()</code>导入它们会返回一个解析到导出的 Promise。</p> <p>在 webpack 中，有多种方式来拥有异步模块。</p> <ul> <li>异步的外部资源(async externals)</li> <li>新规范中的 WebAssembly 模块</li> <li>使用顶层 Await 的 ECMAScript 模块。</li> </ul> <h3 id="externals">外部资源 <a href="#externals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Webpack 5 增加了更多的外部类型来覆盖更多的应用：</p> <p><code>promise</code>: 一个评估为 Promise 的表达式。外部模块是一个异步模块，解析值作为模块导出使用。</p> <p><code>import</code>。原生的 <code>import()</code> 用于加载指定的请求，外部模块是一个异步模块，解析值作为模块导出。外部模块是一个异步模块。</p> <p><code>module</code>: 尚未实现，但计划通过 <code>import x from "..."</code> 加载模块。</p> <p><code>script</code>: 通过 <code>&#x3C;script></code> 标签加载一个 url，并从一个全局变量（以及它的可选属性）中获取输出。外部模块是一个异步模块。</p> <h2 id="major-changes-new-nodejs-ecosystem-features">重大变更：支持全新的 Node.js 生态特性 <a href="#major-changes-new-nodejs-ecosystem-features" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="resolving">解析 <a href="#resolving" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>现在支持 package.json 中的 <code>exports</code> 和 <code>imports</code> 字段。</p> <p>原生支持 Yarn PnP。</p> <p>更多细节请参见<a href="guides/package-exports/index.htm"/*tpa=https://webpack.docschina.org/guides/package-exports/*/>package exports</a>。</p> <h2 id="major-changes-development-experience">重大变更：开发体验 <a href="#major-changes-development-experience" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="improved-target">经过优化的构建目标(target) <a href="#improved-target" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Webpack 5 允许传递一个目标列表，并且支持目标的版本。</p> <p>例如 <code>target: "node14"``target: ["web", "es2020"]</code>。</p> <p>这是一个简单的方法，为 webpack 提供它需要确定的所有信息：</p> <ul> <li>代码块加载机制，以及</li> <li>支持的语法，如箭头函数</li> </ul> <h3 id="stats">Stats <a href="#stats" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>改进了统计测试格式的可读性和冗余性。改进了默认值，使其不那么冗长，也适合大型构建。</p> <ul> <li>现在默认情况下，代码块关系是隐藏的，可以用 <code>stats.chunkRelations</code> 来切换。</li> <li>Stats 现在可以区分 <code>files</code> 和 <code>auxiliaryFiles</code>。</li> <li>Stats 现在默认隐藏模块和代码块的 id。这可以通过 <code>stats.ids</code> 来切换。</li> <li>现在所有模块的列表是按照到入口点的距离排序的。这可以通过 <code>stats.modulesSort</code> 来改变。</li> <li>代码块模块的列表现在按模块名称排序。这可以通过 <code>stats.chunkModulesSort</code> 来改变。</li> <li>嵌套模块的列表现在是按拓扑结构排序的。这可以通过 <code>stats.nestedModulesSort</code> 来改变。</li> <li>现在，代码块和资源会显示代码块 id 提示。</li> <li>资产和模块将以树状而不是列表/表格的形式显示。</li> <li>一般信息现在会在最后的摘要中显示。它显示了 webpack 版本，配置名称和警告/错误计数。</li> <li>哈希值现在默认是隐藏的。这可以通过 <code>stats.hash</code> 来改变。</li> <li>默认情况下不再显示构建的时间戳，这可以通过 <code>stats.builtAt</code> 开启。它会在摘要中显示时间戳。</li> <li>默认情况下，不再显示子编译。它们可以用 <code>stats.children</code> 来显示。</li> </ul> <h3 id="progress">进度 <a href="#progress" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>对 <code>ProgressPlugin</code> 做了一些改进，它被 CLI 在参数 <code>--progress</code> 开启时使用，但也可以作为插件手动使用。</p> <p>以前它只计算已处理的模块。现在它可以计算 "入口"、"依赖" 和 "模块"。 现在所有的模块都默认显示了。</p> <p>以前它只显示当前处理的模块。这造成了很多 stderr 输出，在一些控制台上产生了性能问题。 现在这个功能被默认关闭（<code>activeModules</code> 选项）。这也减少了控制台的垃圾信息量。 现在，在构建模块的过程中，向 stderr 写入的时间被控制在 500ms 以内。</p> <p>剖析模式也得到了升级，将显示嵌套进度消息的时间。 这使得它更容易弄清楚，当插件导致了性能问题。</p> <p>新增加的 <code>percentBy</code> -选项告知 <code>ProgressPlugin</code> 如何计算进度百分比。</p> <pre><code class="hljs language-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> percentBy<span class="token operator">:</span> <span class="token string">\'entries\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>为了使进度百分比更准确，<code>ProgressPlugin</code> 会缓存最后已知的总模块数，并在下一次构建时重新使用这个值。第一次构建将预热缓存，但后续构建将使用并更新这个值。</p> <h3 id="automatic-unique-naming">自动添加唯一命名 <a href="#automatic-unique-naming" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在 webpack 4 中，多个 webpack 运行时可能会在同一个 HTML 页面上发生冲突，因为它们使用同一个全局变量进行代码块加载。为了解决这个问题，需要为 <code>output.jsonpFunction</code> 配置提供一个自定义的名称。</p> <p>Webpack 5 确实会从 <code>package.json</code> <code>name</code> 中自动推断出一个唯一的构建名称，并将其作为 <code>output.uniqueName</code> 的默认值。</p> <p>这个值用于使所有潜在的冲突的全局变量成为唯一。</p> <p>迁移: 由于 <code>package.json</code> 中有唯一的名称，可将 <code>output.jsonpFunction</code> 删除。</p> <h3 id="automatic-public-path">自动添加公共路径 <a href="#automatic-public-path" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Webpack 5 会在可能的情况下自动确定 <code>output.publicPath</code>。</p> <h3 id="typescript-typings">Typescript 类型 <a href="#typescript-typings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Webpack 5 从源码中生成 typescript 类型，并通过 npm 包暴露它们。</p> <p>迁移：删除<code>@types/webpack</code>。当名称不同时更新引用。</p> <h2 id="major-changes-optimization">重大变更: 构建优化 <a href="#major-changes-optimization" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="nested-tree-shaking">嵌套的 tree-shaking <a href="#nested-tree-shaking" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 现在能够跟踪对导出的嵌套属性的访问。这可以改善重新导出命名空间对象时的 Tree Shaking（清除未使用的导出和混淆导出）。</p> <pre><code class="hljs language-js"><span class="token comment">// inner.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// module.js</span>\n<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">as</span> inner <span class="token keyword">from</span> <span class="token string">\'./inner\'</span><span class="token punctuation">;</span>\n<span class="token comment">// 或 import * as inner from \'./inner\'; export { inner };</span>\n\n<span class="token comment">// user.js</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> module <span class="token keyword">from</span> <span class="token string">\'./module\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>inner<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>在这个例子中，可以在生产模式下删除导出的<code>b</code>。</p> <h3 id="inner-module-tree-shaking">内部模块 tree-shaking <a href="#inner-module-tree-shaking" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 4 没有分析模块的导出和引用之间的依赖关系。webpack 5 有一个新的选项 <code>optimization.innerGraph</code>，在生产模式下是默认启用的，它可以对模块中的标志进行分析，找出导出和引用之间的依赖关系。</p> <p>在这样的模块中：</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> something <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./something\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">usingSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> something<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">usingSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>内部依赖图算法会找出 <code>something</code> 只有在使用 <code>test</code> 导出时才会使用。这允许将更多的出口标记为未使用，并从代码包中省略更多的代码。</p> <p>当设置<code>"sideEffects": false</code>时，可以省略更多的模块。在这个例子中，当 <code>test</code> 导出未被使用时，<code>./something</code> 将被省略。</p> <p>要获得未使用的导出信息，需要使用 <code>optimization.unusedExports</code>。要删除无副作用的模块，需要使用<code>optimization.sideEffects</code>。</p> <p>可以分析以下标记。</p> <ul> <li>函数声明</li> <li>类声明</li> <li><code>默认导出export default</code> 或定义变量以下的： <ul> <li>函数表达式</li> <li>类表达式</li> <li>顺序表达式</li> <li><code>/*#__PURE__*/</code> 表达式</li> <li>局部变量</li> <li>引入的捆绑(bindings)</li> </ul> </li> </ul> <p>反馈：如果你发现这个分析中缺少什么，请报告一个问题，我们会考虑增加它。</p> <p>使用 <code>eval()</code> 将为一个模块放弃这个优化，因为经过 eval 的代码可以引用范围内的任何标记。</p> <p>这种优化也被称为深度范围分析。</p> <h3 id="commonjs-tree-shaking">CommonJs Tree Shaking <a href="#commonjs-tree-shaking" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 曾经不进行对 CommonJs 导出和 <code>require()</code> 调用时的导出使用分析。</p> <p>webpack 5 增加了对一些 CommonJs 构造的支持，允许消除未使用的 CommonJs 导出，并从 <code>require()</code> 调用中跟踪引用的导出名称。</p> <p>支持以下构造：</p> <ul> <li><code>exports|this|module.exports.xxx = ...</code></li> <li><code>exports|this|module.exports = require("...")</code> (reexport)</li> <li><code>exports|this|module.exports.xxx = require("...").xxx</code> (reexport)</li> <li><code>Object.defineProperty(exports|this|module.exports, "xxx", ...)</code></li> <li><code>require("abc").xxx</code></li> <li><code>require("abc").xxx()</code></li> <li>从 ESM 导入</li> <li><code>require()</code> 一个 ESM 模块</li> <li>被标记的导出类型 (对非严格 ESM 导入做特殊处理): <ul> <li><code>Object.defineProperty(exports|this|module.exports, "__esModule", { value: true|!0 })</code></li> <li><code>exports|this|module.exports.__esModule = true|!0</code></li> </ul> </li> <li>未来计划支持更多的构造</li> </ul> <p>当检测到不可分析的代码时，webpack 会放弃，并且完全不跟踪这些模块的导出信息（出于性能考虑）。</p> <h3 id="side-effect-analysis">副作用分析 <a href="#side-effect-analysis" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在 package.json 中的 <code>"sideEffects"</code> 标志允许手动将模块标记为无副作用，这就允许在不使用时放弃它们。</p> <p>webpack 5 也可以根据对源代码的静态分析，自动将模块标记为无副作用。</p> <h3 id="optimization-per-runtime">每个运行时的优化 <a href="#optimization-per-runtime" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Webpack 5 现在能够（默认情况下也是如此）分析和优化每个运行时的模块（一个运行时通常等于一个入口点）。 这允许只在真正需要的地方导出这些入口点。 入口点之间不会相互影响 (只要每个入口点使用一个运行时)</p> <h3 id="module-concatenation">模块合并 <a href="#module-concatenation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>模块合并也可以在每个运行时工作，允许每个运行时进行不同的合并</p> <p>模块合并已经成为一等公民，现在任何模块和依赖都可以实现它。 在初始时 webpack 5 已经添加了对 ExternalModules 和 json 模块的支持，更多的模块可能很快就会发布。</p> <h3 id="general-tree-shaking-improvements">通用 Tree Shaking 改进 <a href="#general-tree-shaking-improvements" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>export *</code> 已经得到改进，可以跟踪更多的信息，并且不再将<code>默认</code>导出标记为使用。</p> <p><code>export *</code> 现在会在 webpack 确定有冲突的导出时显示警告。</p> <p><code>import()</code> 允许通过 <code>/* webpackExports: ["abc", "default"] */</code> 该魔法注释手动 tree shake 模块。</p> <h3 id="development-production-similarity">开发与生产的一致性问题 <a href="#development-production-similarity" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>我们试图通过改善两种模式的相似性，在开发模式的构建性能和避免仅在生产模式的产生的问题之间找到一个很好的平衡点。</p> <p>Webpack 5 默认在两种模式下都启用了 "sideEffects "优化。在 webpack 4 中，由于 package.json 中的<code>"sideEffects"</code>标记不正确，这种优化导致了一些只在生产模式下出现的错误。在开发过程中启用这个优化可以更快更容易地发现这些问题。</p> <p>在很多情况下，开发和生产都是在不同的操作系统上进行的，文件系统的大小写敏感度不同，所以 webpack 5 增加了一些奇怪的大小写的警告/错误。</p> <h3 id="improved-code-generation">改进代码生成 <a href="#improved-code-generation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>当 ASI 发生时，webpack 会检测到，当没有分号插入时，会生成更短的代码。<code>Object(...)</code>-><code>(0, ...)</code>。</p> <p>webpack 将多个导出的 getters 合并为一个运行时函数调用。<code>r.d(x, "a", () => a); r.d(x, "b", () => b);</code> -> <code>r.d(x, {a: () => a, b: () => b});</code>。</p> <p>现在在 <code>output.environment</code> 中有额外的选项。 它们允许指定哪些 ECMAScript 特性可以用于 webpack 生成的运行时代码。</p> <p>通常人们不会直接指定这个选项，而是会使用 <code>target</code> 选项。</p> <p>webpack 4 之前只生成 ES5 的代码。 webpack 5 则现在既可以生成 ES5 又可以生成 ES6/ES2015 代码。</p> <p>只支持现代浏览器，将使用箭头函数生成更短的代码，使用 <code>const</code> 声明与 TDZ 为 <code>export default</code> 生成更符合规范的代码。</p> <h3 id="improved-target-option">改进 <code>target</code> 配置 <a href="#improved-target-option" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在 webpack 4 中，"target "是在 <code>"web"</code> 和 <code>"node"</code> 之间的一个粗略的选择（还有一些其他的）。 Webpack 5 给你更多的选择。</p> <p><code>target</code>选项现在比以前影响了更多关于生成代码的事情。</p> <ul> <li>代码块加载方法</li> <li>代码块的格式</li> <li>wasm 加载方法</li> <li>代码块与 wasm 在 workers 中加载方法</li> <li>被使用的全局对象</li> <li>publicPath 是否应该被自动确定</li> <li>生成的代码中使用的 ECMAScript 特性/语法</li> <li><code>externals</code> 是否默认被启用</li> <li>一些 Node.js 兼容层的行为(<code>global</code>, <code>__filename</code>, <code>__dirname</code>)</li> <li>模块解析(<code>browser</code> 字段、<code>exports</code> 和 <code>imports</code> 条件)</li> <li>一些加载器可能会基于此改变行为</li> </ul> <p>对于其中的一些情况，在 <code>"web"</code> 和 <code>"node"</code> 之间的选择过于粗略，我们需要更多的信息。 因此，我们允许指定最低版本，例如 <code>"https://webpack.docschina.org/node10.13"</code>，并推断出更多关于目标环境的属性。</p> <p>现在也允许用一个数组组合多个目标，webpack 将确定所有目标的最小属性。使用数组也很有用，当使用像 <code>"web"</code> 或 <code>"node"</code> 这样没有提供完整信息的目标时（没有版本号）。例如，<code>["web", "es2020"]</code> 结合了这两个部分目标。</p> <p>有一个目标 <code>"browserslist"</code>，它将使用 browserslist 类库的数据来确定环境的属性。 当项目中存在可用的 browserslist 配置时，这个目标也会被默认使用。当没有可用的配置时，默认使用 <code>"web"</code> 目标。</p> <p>有些组合和功能还没有实现，会导致错误。它们是为未来的功能做准备。例如：</p> <ul> <li><code>["web", "node"]</code> 将导致一个通用的代码块加载方法，而这个方法还没有实现。</li> <li><code>["web", "node"]</code> + <code>output.module: true</code>将导致一个模块代码块加载方法，该方法尚未实现。</li> <li><code>"web"</code>会导致<code>http(s):</code>的导入被视为<code>模块</code>外部资源，而这些外部还没有实现(变通方法：<code>externalsPresets.{ web: false, webAsync: true }</code>，将使用<code>import()</code>代替)。</li> </ul> <h3 id="splitchunks-and-module-sizes">代码块拆分与模块大小 <a href="#splitchunks-and-module-sizes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>现在模块的尺寸比单一的数字更好的表达方式。现在有不同类型的大小。</p> <p>SplitChunksPlugin 现在知道如何处理这些不同的大小，并将它们用于 <code>minSize</code> 和 <code>maxSize</code>。 默认情况下，只有 <code>javascript</code> 大小被处理，但你现在可以传递多个值来管理它们：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n      minSize<span class="token operator">:</span> <span class="token punctuation">{</span>\n        javascript<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>\n        webassembly<span class="token operator">:</span> <span class="token number">50000</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>你仍然可以使用一个数字来表示大小。在这种情况下，webpack 会自动使用默认的大小类型。</p> <p><code>mini-css-extract-plugin</code> 使用 <code>css/mini-extra</code> 作为大小类型，并将此大小类型自动添加到默认类型中。</p> <h2 id="major-changes-performance">重大变更：性能优化 <a href="#major-changes-performance" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="persistent-caching">持久缓存 <a href="#persistent-caching" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>现在有一个文件系统缓存。它是可选的，可以通过以下配置启用：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  cache<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 1. 将缓存类型设置为文件系统</span>\n    type<span class="token operator">:</span> <span class="token string">\'filesystem\'</span><span class="token punctuation">,</span>\n\n    buildDependencies<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 2. 将你的 config 添加为 buildDependency，以便在改变 config 时获得缓存无效</span>\n      config<span class="token operator">:</span> <span class="token punctuation">[</span>__filename<span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 3. 如果你有其他的东西被构建依赖，你可以在这里添加它们</span>\n      <span class="token comment">// 注意，webpack、加载器和所有从你的配置中引用的模块都会被自动添加</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>重要说明：</p> <p>默认情况下，webpack 假定 webpack 所在的 <code>node_modules</code> 目录只被包管理器修改。对 <code>node_modules</code> 来说，哈希值和时间戳会被跳过。 出于性能考虑，只使用包名和版本。 只要不指定<code>resolve.symlinks: false</code>，Symlinks(即<code>npm/yarn link</code>)就没有问题(无论如何都要避免)。 不要直接编辑 <code>node_modules</code> 中的文件，除非你用 <code>snapshot.managedPaths: []</code>以剔除该优化。 当使用 Yarn PnP 时，webpack 假设 yarn 缓存是不可改变的（通常是这样）。 你可以使用 <code>snapshot.immutablePaths: []</code> 来退出这个优化。</p> <p>缓存将默认存储在 <code>node_modules/.cache/webpack</code>（当使用 node_modules 时）或 <code>.yarn/.cache/webpack</code>（当使用 Yarn PnP 时）中。 当所有的插件都正确处理缓存时，你可能永远都不需要手动删除它。</p> <p>许多内部插件也会使用持久性缓存。例如 <code>SourceMapDevToolPlugin</code> (缓存 SourceMap 的生成)或 <code>ProgressPlugin</code> (缓存模块数量)</p> <p>持久性缓存将根据使用情况自动创建多个缓存文件，以优化对缓存的读写访问。</p> <p>默认情况下，时间戳将用于开发模式的快照，而文件哈希将用于生产模式。 文件哈希也允许在 CI 中使用持久性缓存。</p> <h3 id="compiler-idle-and-close">编译器闲置和关闭 <a href="#compiler-idle-and-close" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>编译器现在需要在使用后关闭。编译器现在会进入和离开空闲状态，并且有这些状态的钩子。插件可能会使用这些钩子来做不重要的工作。(即将持久缓存缓慢地将缓存存储到磁盘上)。在编译器关闭时--所有剩余的工作应该尽可能快地完成。一个回调标志着关闭完成。</p> <p>插件和它们各自的作者应该预料到，有些用户可能会忘记关闭编译器。所以，所有的工作最终也应该在空闲状态下完成。当工作正在进行时，应该防止进程退出。</p> <p><code>webpack()</code> 用法在被传递回调时自动调用<code>close</code>。</p> <p>迁移：在使用 Node.js API 时，一定要在完成工作后调用 <code>Compiler.close</code>。</p> <h3 id="file-emitting">文件生成 <a href="#file-emitting" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 过去总是在第一次构建时发出所有的输出文件，但在增量（观察）构建时跳过了写入未更改的文件。 假设在 webpack 运行时，没有任何其他东西改变输出文件。</p> <p>增加了持久性缓存后，即使在重启 webpack 进程时，也应该会有类似监听的体验，但如果认为即使在 webpack 不运行时也没有其他东西改变输出目录，那这个假设就太强了。</p> <p>所以 webpack 现在会检查输出目录中现有的文件，并将其内容与内存中的输出文件进行比较。只有当文件被改变时，它才会写入文件。 这只在第一次构建时进行。任何增量构建都会在运行中的 webpack 进程中生成新的资产时写入文件。</p> <p>我们假设 webpack 和插件只有在内容被改变时才会生成新的资产。应该使用缓存来确保在输入相同时不会生成新的资产。 不遵循这个建议会降低性能。</p> <p>被标记为 <code>[不可变]</code> 的文件（包括内容哈希），当已经存在一个同名文件时，将永远不会被写入。 我们假设当文件内容发生变化时，内容哈希会发生变化。 这在一般情况下是正确的，但在 webpack 或插件开发过程中可能并不总是如此。</p> <h2 id="major-changes-long-outstanding-problems">重大变更：长期未解决的问题 <a href="#major-changes-long-outstanding-problems" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="code-splitting-for-single-file-targets">单一文件目标的代码分割 <a href="#code-splitting-for-single-file-targets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>只允许启动单个文件的目标（如 node、WebWorker、electron main）现在支持运行时自动加载引导所需的依赖代码片段。</p> <p>这允许对这些目标使用 <code>chunks: "all"</code> 和 <code>optimization.runtimeChunk</code>。</p> <p>请注意，如果目标的代码块加载是异步的，这使得初始评估也是异步的。当使用 <code>output.library</code> 时，这可能是一个问题，因为现在导出的值是一个 Promise。</p> <h3 id="updated-resolver">更新了解析器 <a href="#updated-resolver" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>enhanced-resolve</code> 更新到了 v5，有以下改进：</p> <ul> <li>追踪更多的依赖关系，比如丢失的文件。</li> <li>别名可能有多种选择</li> <li>现在可以别名为 <code>false</code> 了。</li> <li>支持 <code>exports</code> 和 <code>imports</code> 字段等功能。</li> <li>性能提高</li> </ul> <h3 id="chunks-without-js">没有 JS 的代码块 <a href="#chunks-without-js" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>不包含 JS 代码的块，将不再生成 JS 文件。 这就允许有只包含 CSS 的代码块。</p> <h2 id="major-changes-future">重大变更：未来计划 <a href="#major-changes-future" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="experiments">实验特性 <a href="#experiments" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>并不是所有的功能都是一开始就稳定的。在 webpack 4 中，我们添加了实验性功能，并在变更日志中注明它们是实验性的，但从配置中并不总是能清楚地看到这些功能是实验性的。</p> <p>在 webpack 5 中，有一个新的 <code>experiments</code> 配置选项，允许启用实验性功能。这使得哪些功能被启用/使用变得很清楚。</p> <p>虽然 webpack 遵循语义版本化，但它会对实验性功能进行例外处理。实验性功能可能会在 webpack 的次要版本中包含破坏性的变化。当这种情况发生时，我们会在变更日志中添加一个明确的注释。这将使我们能够更快地迭代实验性功能，同时也使我们能够在主要版本上为稳定的功能停留更长时间。</p> <p>以下的实验功能将随 webpack 5 一起发布。</p> <ul> <li>旧的 WebAssembly 支持，就像 webpack 4 一样 (<code>experiments.syncWebAssembly</code>)</li> <li>根据<a href="https://github.com/WebAssembly/esm-integration">更新的规范</a>(<code>experiments.asyncWebAssembly</code>)，新增 WebAssembly 支持。 <ul> <li>这使得一个 WebAssembly 模块成为一个异步模块。</li> </ul> </li> <li><a href="https://github.com/tc39/proposal-top-level-await">顶层的 Await</a>第三阶段提案(<code>experiments.topLevelAwait</code>) <ul> <li>在顶层使用 <code>await</code> 使该模块成为一个异步模块。</li> </ul> </li> <li>以模块的形式生成代码包 (<code>experiments.outputModule</code>) <ul> <li>这就从代码包中移除了包装器 IIFE，执行严格模式，通过 <code>&#x3C;script type="module"></code> 进行懒惰加载，并在模块模式下最小化压缩。</li> </ul> </li> </ul> <p>请注意，这也意味着 WebAssembly 的支持现在被默认禁用。</p> <h3 id="minimum-nodejs-version">最小 Node.js 版本 <a href="#minimum-nodejs-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>最低支持的 Node.js 版本从 6 增加到 10.13.0(LTS)。</p> <p>迁移：升级到最新的 Node.js 版本。</p> <h2 id="changes-to-the-configuration">配置变更 <a href="#changes-to-the-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="changes-to-the-structure">结构的变化 <a href="#changes-to-the-structure" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <ul> <li><code>entry: {}</code> 现在可以赋值一个空对象（允许使用插件来修改入口）。</li> <li><code>target</code> 支持数组，版本及 browserslist</li> <li>移除了 <code>cache: Object</code>：不能再设置内存缓存对象</li> <li>添加了 <code>cache.type</code>：现在可以在 <code>"memory"</code> 和 <code>"filesystem"</code> 间进行选择</li> <li>在 <code>cache.type = "filesystem"</code> 时，增加了新配置项： <ul> <li><code>cache.cacheDirectory</code></li> <li><code>cache.name</code></li> <li><code>cache.version</code></li> <li><code>cache.store</code></li> <li><code>cache.hashAlgorithm</code></li> <li><code>cache.idleTimeout</code></li> <li><code>cache.idleTimeoutForIntialStore</code></li> <li><code>cache.buildDependencies</code></li> </ul> </li> <li>添加了 <code>snapshot.resolveBuildDependencies</code></li> <li>添加了 <code>snapshot.resolve</code></li> <li>添加了 <code>snapshot.module</code></li> <li>添加了 <code>snapshot.managedPaths</code></li> <li>添加了 <code>snapshot.immutablePaths</code></li> <li>添加了 <code>resolve.cache</code>：此选项可禁用/启用 safe 解析缓存</li> <li>移除了 <code>resolve.concord</code></li> <li><code>resolve.alias</code> 值可以为数组或 <code>false</code></li> <li>添加了 <code>resolve.restrictions</code>：允许限制可能存在的结果</li> <li>添加了 <code>resolve.fallback</code>：允许为处理不了的别名请求设置降级</li> <li>添加了 <code>resolve.preferRelative</code>：允许处理模块请求</li> <li>移除了针对于 Node.js 原生模块的自动 polyfills <ul> <li>移除了 <code>node.Buffer</code></li> <li>移除了 <code>node.console</code></li> <li>移除了 <code>node.process</code></li> <li>移除了 <code>node.*</code>（Node.js 原生模块）</li> <li>迁移：<code>resolve.alias</code> 和 <code>ProvidePlugin</code>。错误会给出提示。（可以参考 <a href="https://github.com/webpack/node-libs-browser">node-libs-browser</a>，了解 v4 中 polyfill 和 mock 的方式）</li> </ul> </li> <li><code>output.filename</code> 可以设置为函数</li> <li>添加了 <code>output.assetModuleFilename</code></li> <li><code>output.jsonpScriptType</code> 更名为 <code>output.scriptType</code></li> <li><code>devtool</code> 更加严格 <ul> <li>格式化：<code>false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code></li> </ul> </li> <li>添加了 <code>optimization.chunkIds: "deterministic"</code></li> <li>添加了 <code>optimization.moduleIds: "deterministic"</code></li> <li><code>optimization.moduleIds: "hashed"</code> 已弃用</li> <li>移除了 <code>optimization.moduleIds: "total-size"</code></li> <li>废弃了模块的 flag 并移除了 chunk id <ul> <li>移除了 <code>optimization.hashedModuleIds</code></li> <li>移除了 <code>optimization.namedChunks</code> (<code>NamedChunksPlugin</code> too)</li> <li>移除了 <code>optimization.namedModules</code> (<code>NamedModulesPlugin</code> too)</li> <li>移除了 <code>optimization.occurrenceOrder</code></li> <li>迁移：使用 <code>chunkIds</code> 和 <code>moduleIds</code></li> </ul> </li> <li><code>optimization.splitChunks</code> <code>test</code> 不再匹配 chunk 名 <ul> <li>迁移：使用 test 函数</li> </ul> <code>(module, { chunkGraph }) => chunkGraph.getModuleChunks(module).some(chunk => chunk.name === "name")</code></li> <li>添加了 <code>optimization.splitChunks</code> <code>minRemainingSize</code></li> <li><code>optimization.splitChunks</code> 的 <code>filename</code> 可以设置为函数</li> <li><code>optimization.splitChunks</code> 的大小现在可以设置为每个源类型大小的对象 <ul> <li><code>minSize</code></li> <li><code>minRemainingSize</code></li> <li><code>maxSize</code></li> <li><code>maxAsyncSize</code></li> <li><code>maxInitialSize</code></li> </ul> </li> <li><code>optimization.splitChunks</code> 中的 <code>maxAsyncSize</code> 和 <code>maxInitialSize</code> 添加了 <code>maxSize</code>：允许为初始和异步 chunk 指定不同的 maxSize</li> <li>移除了 <code>optimization.splitChunks</code> 的 <code>name: true</code>：不再支持自动命名 <ul> <li>迁移：使用默认值。<code>chunkIds: "named"</code> 会为你的文件取一个有用的名字，以便于调试</li> </ul> </li> <li>添加了 <code>optimization.splitChunks.cacheGroups[].idHint</code>：会给出提示，如果选择命名的 chunk id</li> <li>移除了 <code>optimization.splitChunks</code> 的 <code>automaticNamePrefix</code> <ul> <li>迁移：使用 <code>idHint</code> 代替</li> </ul> </li> <li><code>optimization.splitChunks</code> 的 <code>filename</code> 不再局限于初始 chunk</li> <li>添加了 <code>optimization.splitChunks</code> 的 <code>usedExports</code>，以便在比较模块时引入使用过的 export</li> <li>添加了 <code>optimization.splitChunks.defaultSizeTypes</code>：当使用数字表示 size 时，可以指定 size 的类型</li> <li>添加了 <code>optimization.mangleExports</code></li> <li><code>optimization.minimizer</code> <code>"..."</code> 可以用于引入默认值</li> <li><code>optimization.usedExports</code> <code>"global"</code> 增加了一个值，以允许在每个运行时中禁用分析，而在全局范围内进行分享（性能更好）</li> <li><code>optimization.noEmitOnErrors</code> 更名为 <code>optimization.emitOnErrors</code>，逻辑颠倒</li> <li>添加了 <code>optimization.realContentHash</code></li> <li>移除了 <code>output.devtoolLineToLine</code> <ul> <li>迁移：没有替代项</li> </ul> </li> <li>现已允许 <code>output.chunkFilename: Function</code></li> <li><code>output.hotUpdateChunkFilename: Function</code> 已被禁止：反正也没什么用。</li> <li><code>output.hotUpdateMainFilename: Function</code> 已被禁止：反正也没什么用。</li> <li><code>output.importFunctionName: string</code> 指定用于替换 <code>import()</code> 的名称，以允许在不支持的环境中进行 polyfilling</li> <li>添加了 <code>output.charset</code>：将其设置为 false，会省略 script 标签上的 <code>charset</code> 属性</li> <li><code>output.hotUpdateFunction</code> 更名为 <code>output.hotUpdateGlobal</code></li> <li><code>output.jsonpFunction</code> 更名为 <code>output.chunkLoadingGlobal</code></li> <li><code>output.chunkCallbackFunction</code> 更名为 <code>output.chunkLoadingGlobal</code></li> <li>添加了 <code>output.chunkLoading</code></li> <li>添加了 <code>output.enabledChunkLoadingTypes</code></li> <li>添加了 <code>output.chunkFormat</code></li> <li><code>module.rules</code> 中的 <code>resolve</code> 和 <code>parser</code> 将以不同的方式进行合并（对象会进行深度合并，数组可能会使用 <code>"..."</code> 的形式来引用之前的值）</li> <li>添加了 <code>module.rules</code> <code>parser.worker</code>：允许为支持的 worker 添加配置</li> <li><code>module.rules</code> 中的 <code>query</code> 和 <code>loaders</code> 被移除</li> <li>向 <code>module.rules</code> 中的 <code>options</code> 传递字符串的形式被废弃 <ul> <li>迁移：使用传递选项对象的方式代替，当不支持这种方式时，请在对应的 loader 中开启一个 issues</li> </ul> </li> <li>添加了 <code>module.rules</code> <code>mimetype</code>：允许匹配 DataURI 的 mimetype</li> <li>添加了 <code>module.rules</code> <code>descriptionData</code>：允许匹配来自 package.json 中的数据</li> <li><code>module.defaultRules</code> <code>"..."</code> 可以用于引用默认值</li> <li>添加了 <code>stats.chunkRootModules</code>：用于显示根模块的 chunk</li> <li>添加了 <code>stats.orphanModules</code>：用于显示为 emit 的模块</li> <li>添加了 <code>stats.runtime</code>：用于显示 runtime 模块</li> <li>添加了 <code>stats.chunkRelations</code>：用于显示 parent/children/sibling 的 chunk</li> <li>添加了 <code>stats.errorStack</code>：用于显示追踪 webpack 内部的堆栈错误</li> <li>添加了 <code>stats.preset</code>：选择 preset</li> <li>添加了 <code>stats.relatedAssets</code>：用于显示与其他 asset 相关的 asset（如，SourceMaps）</li> <li><code>stats.warningsFilter</code> 已被弃用，请改用 <code>ignoreWarnings</code></li> <li><code>BannerPlugin.banner</code> 签名已变更 <ul> <li>移除了 <code>data.basename</code></li> <li>移除了 <code>data.query</code></li> <li>迁移：从 <code>filename</code> 中获取</li> </ul> </li> <li>移除了 <code>SourceMapDevToolPlugin</code> 的 <code>lineToLine</code> <ul> <li>迁移：无可替代项</li> </ul> </li> <li><code>[hash]</code> 作为完整的编译 hash 值，现已被弃用 <ul> <li>迁移：使用 <code>[fullhash]</code> 代替，或最好选用其他 hash 选项</li> </ul> </li> <li><code>[modulehash]</code> 已被弃用 <ul> <li>迁移：使用 <code>[hash]</code> 代替</li> </ul> </li> <li><code>[moduleid]</code> 已被弃用 <ul> <li>迁移：使用 <code>[id]</code> 代替</li> </ul> </li> <li>移除了 <code>[filebase]</code> <ul> <li>迁移：使用 <code>[base]</code> 代替</li> </ul> </li> <li>基于文件模板的新 placeholders（例如 SourceMapDevToolPlugin） <ul> <li><code>[name]</code></li> <li><code>[base]</code></li> <li><code>[path]</code></li> <li><code>[ext]</code></li> </ul> </li> <li>当给 <code>externals</code> 传递一个函数时，现在有一个不同的签名 <code>({ context, request }, callback)</code> <ul> <li>迁移：改变函数签名</li> </ul> </li> <li>添加了 <code>externalsPresets</code></li> <li>添加了 <code>experiments</code>（见上述实验部分）</li> <li>添加了 <code>watchOptions.followSymlinks</code></li> <li><code>watchOptions.ignored</code> 可以使用正则匹配</li> <li>暴露了 <code>webpack.util.serialization</code></li> </ul> <h3 id="changes-to-the-defaults">默认值变更 <a href="#changes-to-the-defaults" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <ul> <li>当 browserslist 配置可用时，<code>target</code> 默认为 <code>"browserslist"</code></li> <li><code>module.unsafeCache</code> 现默认只对 <code>node_modules</code> 启用</li> <li><code>optimization.moduleIds</code> 在生产环境下默认为 <code>deterministic</code>，而不再是 <code>size</code></li> <li><code>optimization.chunkIds</code> 在生产环境下默认为 <code>deterministic</code>，而不再是 <code>total-size</code></li> <li><code>optimization.nodeEnv</code> 在 <code>none</code> 模式下，默认为 <code>false</code></li> <li><code>optimization.splitChunks.minSize</code> 在生产环境下默认为 <code>20k</code></li> <li><code>optimization.splitChunks.enforceSizeThreshold</code> 在生产环境下默认为 <code>50k</code></li> <li><code>optimization.splitChunks</code> 中的 <code>minRemainingSize</code> 在生产环境下默认为 <code>minSize</code> <ul> <li>这将导致在剩余部分过小的情况下，创建更少的 chunk</li> </ul> </li> <li><code>optimization.splitChunks</code> 中的 <code>maxAsyncRequests</code> 和 <code>maxInitialRequests</code> 默认值增加到了 30</li> <li><code>optimization.splitChunks.cacheGroups.vendors</code> 更名为 <code>optimization.splitChunks.cacheGroups.defaultVendors</code></li> <li><code>optimization.splitChunks.cacheGroups.defaultVendors.reuseExistingChunk</code> 默认为 <code>true</code></li> <li><code>optimization.minimizer</code> 的 target 默认在 terser 选项中使用 <code>compress.passes: 2</code></li> <li>当使用 <code>cache</code> 时， <code>resolve(Loader).cache</code> 默认为 <code>true</code></li> <li><code>resolve(Loader).cacheWithContext</code> 默认为 <code>false</code></li> <li><code>resolveLoader.extensions</code> 移除了 <code>.json</code></li> <li><code>node.global</code> 中的 <code>node.__filename</code> 和 <code>node.__dirname</code> 默认为 <code>false</code></li> <li><code>stats.errorStack</code> 默认为 <code>false</code></li> </ul> <h2 id="loader-related-changes">加载器相关变更 <a href="#loader-related-changes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="thisgetoptions"><code>this.getOptions</code> <a href="#thisgetoptions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这个新的 API 应该可以简化加载器中选项的使用。 它允许传递 JSON 模式进行验证。 详情请见<a href="https://github.com/webpack/webpack/pull/10017">PR</a></p> <h3 id="thisexec"><code>this.exec</code> <a href="#thisexec" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这一点已从加载器上下文中删除</p> <p>迁移：这可以在加载器本身实现。</p> <h3 id="thisgetresolve"><code>this.getResolve</code> <a href="#thisgetresolve" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>loader API 中的 <code>getResolve(options)</code> 将以另一种方式合并选项，参见<code>module.rule``resolve</code>。</p> <p>由于 webpack 5 在不同的发布依赖关系之间存在差异，所以传递一个 <code>dependencyType</code> 作为选项可能是有意义的（例如 <code>"esm"</code>，<code>"commonjs"</code>，或者其他）。</p> <h2 id="major-internal-changes">重大内部变更 <a href="#major-internal-changes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <blockquote class="todo"> <p>这一部分可能需要更多的完善。</p> </blockquote> <p>以下改动只与插件作者有关：</p> <h3 id="new-plugin-order">新的插件运行顺序 <a href="#new-plugin-order" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>现在 webpack 5 中的插件在应用配置默认值 <strong>之前</strong> 就会被应用。 这使得插件可以应用自己的默认值，或者作为配置预设。</p> <p>但这也是一个突破性的变化，因为插件在应用时不能依赖配置值的设置。</p> <p>迁移：只在插件钩子中访问配置。或者最好完全避免访问配置，并通过构造函数获取选项。</p> <h3 id="runtime-modules">运行时模块 <a href="#runtime-modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>大部分的运行时代码被移到了所谓的"运行时模块"中。这些特殊模块负责添加运行时代码。它们可以被添加到任何块中，但目前总是被添加到运行时块中。"运行时需求"控制哪些运行时模块（或核心运行时部件）被添加到代码包中。这确保了只有使用的运行时代码才会被添加到代码包中。未来，运行时模块也可以添加到按需加载的块中，以便在需要时加载运行时代码。</p> <p>在大多数情况下，核心运行代码时允许内联入口模块，而不是用 <code>__webpack_require__</code> 来调用它。如果代码包中没有其他模块，则根本不需要使用 <code>__webpack_require__</code>。这与模块合并很好地结合在一起，即多个模块被合并成一个模块。</p> <p>在最好的情况下，根本不需要运行时代码。</p> <p>迁移：如果你在插件中注入运行时代码到 webpack 运行时，可以考虑使用 RuntimeModules 来代替。instead.</p> <h3 id="serialization">序列化 <a href="#serialization" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>我们添加了一个序列化机制，以允许在 webpack 中对复杂对象进行序列化。它有一个可选的语义，所以那些应该被序列化的类需要被明确地标记出来（并且实现它们的序列化）。大多数模块、所有的依赖关系和一些错误都已经这样做了。</p> <p>迁移：当使用自定义模块或依赖关系时，建议将它们实现成可序列化的，以便从持久化缓存中获益。</p> <h3 id="plugins-for-caching">用于缓存的插件 <a href="#plugins-for-caching" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>增加了一个带有插件接口的 <code>Cache</code> 类。该类可用于写入和读取缓存。根据配置的不同，不同的插件可以为缓存添加功能。<code>MemoryCachePlugin</code> 增加了内存缓存功能。<code>FileCachePlugin</code> 增加了持久性（文件系统）缓存。</p> <p><code>FileCachePlugin</code> 使用序列化机制将缓存项目持久化到磁盘上或从磁盘上恢复。</p> <h3 id="hook-object-frozen">冻结钩子对象 <a href="#hook-object-frozen" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>有 <code>hooks</code> 的类会冻结其 <code>hooks</code> 对象，所以通过这种方式添加自定义钩子已经不可能了。</p> <p>迁移：推荐的添加自定义钩子的方式是使用 WeakMap 和一个静态的 <code>getXXXHooks(XXX)</code>(即<code>getCompilationHook(compilation)</code>)方法。内部类使用与自定义钩子相同的机制。</p> <h3 id="tapable-upgrade">Tapable 插件升级 <a href="#tapable-upgrade" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 3 插件的 compat 层已经被移除。它在 webpack 4 中已经被取消了。</p> <p>一些较少使用的 tapable API 被删除或废弃。</p> <p>迁移：使用新的 tapable API。</p> <h3 id="staged-hooks">Stage 钩子 <a href="#staged-hooks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在封装代码包过程的几个步骤中，不同阶段有多个钩子，即 <code>optimizeDependenciesBasic</code>, <code>optimizeDependencies</code> 和 <code>optimizeDependenciesAdvanced</code>。这些已经被删除，改为一个单一的钩子，它可以与 <code>stage</code> 选项一起使用。参见 <code>OptimizationStages</code>了解可能的 <code>stage</code> 选项值。</p> <p>MIGRATION: 侵入剩余的钩子。你可以添加一个 <code>stage</code> 选项。</p> <h3 id="mainchunkmoduletemplate-deprecation">Main/Chunk/ModuleTemplate 废弃 <a href="#mainchunkmoduletemplate-deprecation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>打包模板已经重构。MainTemplate/ChunkTemplate/ModuleTemplate 被废弃，现在 JavascriptModulesPlugin 负责 JS 模板。</p> <p>在那次重构之前，JS 输出由 Main/ChunkTemplate 处理，而另一个输出（即 WASM、CSS）则由插件处理。这样看起来 JS 是一等公民，而其它输出是二等。重构改变了这一点，所有的输出都由他们的插件处理。</p> <p>依然可以侵入部分模板。钩子现在在 JavascriptModulesPlugin 中，而不是 Main/ChunkTemplate 中。(是的，插件也可以有钩子，我称之为附加钩子。)</p> <p>有一个兼容层，所以 Main/Chunk/ModuleTemplate 仍然存在，但只是将 tap 调用委托给新的钩子位置。</p> <p>迁移：按照 deprecation 消息中的建议。主要是指向不同位置的钩子。</p> <h3 id="entry-point-descriptor">入口文件描述符 <a href="#entry-point-descriptor" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>如果传递一个对象作为入口文件，其值可能是一个字符串、字符串数组或描述符：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    catalog<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'catalog.js\'/*tpa=https://webpack.docschina.org/catalog.js*/</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>描述符语法可用于向入口文件传递附加选项。</p> <h4 id="entry-point-output-filename">入口文件输出文件名 <a href="#entry-point-output-filename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>默认情况下，入口文件代码块的输出文件名是从<code>output.filename</code>中提取的， 但你可以为特定入口文件指定一个自定义的输出文件名：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    about<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'about.js\'/*tpa=https://webpack.docschina.org/about.js*/</span><span class="token punctuation">,</span> filename<span class="token operator">:</span> <span class="token string">\'pages/[name][ext]\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="entry-point-dependency">入口文件依赖 <a href="#entry-point-dependency" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>默认情况下，每个入口文件代码块都存储了它所使用的所有模块。使用 <code>dependOn</code>-选项， 你可以将模块从一个入口文件代码块共享到另一个：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'app.js\'/*tpa=https://webpack.docschina.org/app.js*/</span><span class="token punctuation">,</span> dependOn<span class="token operator">:</span> <span class="token string">\'react-vendors\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'react-vendors\'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'react\'</span><span class="token punctuation">,</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">,</span> <span class="token string">\'prop-types\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>app 代码块 将不包含 <code>react-vendors</code> 所拥有的模块。</p> <h4 id="entry-point-library">入口文件类库 <a href="#entry-point-library" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>入口文件描述符允许为每个入口文件传递不同的 <code>library</code> 选项。</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    commonjs<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'lib.js\'/*tpa=https://webpack.docschina.org/lib.js*/</span><span class="token punctuation">,</span>\n      library<span class="token operator">:</span> <span class="token punctuation">{</span>\n        type<span class="token operator">:</span> <span class="token string">\'commonjs-module\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    amd<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'lib.js\'/*tpa=https://webpack.docschina.org/lib.js*/</span><span class="token punctuation">,</span>\n      library<span class="token operator">:</span> <span class="token punctuation">{</span>\n        type<span class="token operator">:</span> <span class="token string">\'amd\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="entry-point-runtime">入口文件运行时 <a href="#entry-point-runtime" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>入口文件描述符允许为每个入口文件指定一个 <code>运行时代码</code>。 当指定时，将创建一个以该名称命名的代码块，其中仅包含该条目的运行时代码。 当多个条目指定相同的<code>运行时代码</code>时，该块将包含所有这些入口文件的共同运行时代码。 这意味着它们可以在同一个 HTML 页面中一起使用。</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'app.js\'/*tpa=https://webpack.docschina.org/app.js*/</span><span class="token punctuation">,</span>\n      runtime<span class="token operator">:</span> <span class="token string">\'app-runtime\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="entry-point-chunk-loading">入口文件代码块加载 <a href="#entry-point-chunk-loading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>入口文件描述符允许为每个入口文件指定一个 <code>chunkLoading</code>。 这个入口文件的运行时代码将使用这个来加载代码块。</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'app.js\'/*tpa=https://webpack.docschina.org/app.js*/</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    worker<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'worker.js\'/*tpa=https://webpack.docschina.org/worker.js*/</span><span class="token punctuation">,</span>\n      chunkLoading<span class="token operator">:</span> <span class="token string">\'importScripts\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="order-and-ids">排序与 ID <a href="#order-and-ids" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 曾经在编译阶段以特定的方式对模块和代码块进行排序，以递增的方式分配 ID。现在不再是这样了。顺序将不再用于 ID 的生成，取而代之的是，ID 生成的完全控制在插件中。</p> <p>优化模块和代码块顺序的钩子已经被移除。</p> <p>迁移：在编译阶段，你不能再依赖模块和代码块的顺序了。</p> <h3 id="arrays-to-sets">从数组到集合(Set) <a href="#arrays-to-sets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <ul> <li>Compilation.modules 现在是一个集合</li> <li>Compilation.chunks 现在是一个集合</li> <li>Chunk.files 现在是一个集合</li> </ul> <p>存在一个适配层但会打印废弃的警告。</p> <p>迁移: 使用集合方法代替数组方法。</p> <h3 id="compilationfilesysteminfo">Compilation.fileSystemInfo <a href="#compilationfilesysteminfo" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这个新 class 可以用来以缓存的方式访问文件系统的信息。目前，它允许访问文件和目录的时间戳。如果可能的话，关于时间戳的信息会从监听那里传输过了，否则将由文件系统访问决定。</p> <p>后续，会增加访问文件内容 hash 值的功能，模块可以用文件内容代替文件 hash 来检查有效性。</p> <p>迁移：使用 <code>compilation.fileSystemInfo</code> API，替代 <code>file/contextTimestamps</code>。</p> <p>现在可以对目录进行时间戳管理，允许对 ContextModules 进行序列化。</p> <p>增加了 <code>Compiler.modifiedFiles</code>（类似于 <code>Compiler.removedFiles</code>），以便更容易引用更改后的文件。</p> <h3 id="filesystems">Filesystems <a href="#filesystems" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>新增了一个类似于 <code>compiler.inputFileSystem</code> 和 <code>compiler.outputFileSystem</code> 的新 API <code>compiler.intermediateFileSystem</code>，用于所有不被认为是输入或输出的 fs 操作，如写入 records，缓存或输出 profiling。</p> <p>文件系统现在有 <code>fs</code> 接口，不再需要 <code>join</code> 或 <code>mkdirp</code> 等额外方式。但如果它们包含 <code>join</code> 或 <code>dirname</code> 等类似方法，也会被使用。</p> <h3 id="hot-module-replacement">模块热替换 <a href="#hot-module-replacement" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>HMR 运行时已被重构为运行时模块。<code>HotUpdateChunkTemplate</code> 已被合并入 <code>ChunkTemplate</code> 中。ChunkTemplates 和 plugins 也应处理 <code>HotUpdateChunk</code> 了。</p> <p>HMR 运行时的 javascript 部分已从核心 HMR 运行时钟分离了出来。其他模块类型现在也可以使用它们自己的方式处理 HMR。在未来，这将使得 HMR 处理诸如 mini-css-extract-plugin 或 WASM 模块。</p> <p>迁移：此为新功能，无需迁移。</p> <p><code>import.meta.webpackHot</code> 公开了与 <code>module.hot</code> 相同的 API。当然可以在 ESM 模块（.mjs，package.json 中的 type: "module"）中使用，这些模块不能访问 <code>module</code>。</p> <h3 id="work-queues">工作队列 <a href="#work-queues" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 曾经通过函数调用函数的形式来进行模块处理，还有一个 <code>semaphore</code> 选项限制并行性。<code>Compilation.semaphore</code> 已被移除，现在可以使用异步队列处理，每个步骤都有独立的队列：</p> <ul> <li><code>Compilation.factorizeQueue</code>：为一组 dependencies 调用模块工厂。</li> <li><code>Compilation.addModuleQueue</code>：将模块添加到编译队列中（可以使用缓存恢复模块）</li> <li><code>Compilation.buildQueue</code>：必要时构建模块（可将模块存储到缓存中）</li> <li><code>Compilation.rebuildQueue</code>：如需手动触发，则会重新构建模块</li> <li><code>Compilation.processDependenciesQueue</code>：处理模块的 dependencies。</li> </ul> <p>这些队列会有一些 hook 来监听并拦截工作的进程。</p> <p>未来，多个编译器会同时工作，可以通过拦截这些队列来进行编译工作的编排。</p> <p>迁移：此为新功能，无需迁移。</p> <h3 id="logging">Logging <a href="#logging" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 内部引入了一些日志记录的方法。 <code>stats.logging</code> 和 <code>infrastructureLogging</code> 选项可用于启用这些信息。</p> <h3 id="module-and-chunk-graph">模块和 chunk 图 <a href="#module-and-chunk-graph" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 曾经在依赖关系中存储了已解析的模块，并在 chunk 中存储引入的模块。但现已发生变化。所有关于模块在模块图中如何连接的信息，现在都存储在 ModulGraph 的 class 中。所有关于模块与 chunk 如何连接的信息现在都已存储在 ChunkGraph 的 class 中。依赖于 chunk 图的信息也存储在相关的 class 中。</p> <p>这意味着以下关于模块的信息已被移动：</p> <ul> <li>Module connections -> ModuleGraph</li> <li>Module issuer -> ModuleGraph</li> <li>Module optimization bailout -> ModuleGraph (TODO: check if it should ChunkGraph instead)</li> <li>Module usedExports -> ModuleGraph</li> <li>Module providedExports -> ModuleGraph</li> <li>Module pre order index -> ModuleGraph</li> <li>Module post order index -> ModuleGraph</li> <li>Module depth -> ModuleGraph</li> <li>Module profile -> ModuleGraph</li> <li>Module id -> ChunkGraph</li> <li>Module hash -> ChunkGraph</li> <li>Module runtime requirements -> ChunkGraph</li> <li>Module is in chunk -> ChunkGraph</li> <li>Module is entry in chunk -> ChunkGraph</li> <li>Module is runtime module in chunk -> ChunkGraph</li> <li>Chunk runtime requirements -> ChunkGraph</li> </ul> <p>当从缓存中恢复模块时，webpack 会将模块从图中断开。现在已无需这么做。一个模块不存储图形的任何信息，技术上可以在多个图形中使用。这会使得缓存变得更加容易。</p> <p>这部分变化中大多数都有一个 compat-layer，当使用时，它会打印一个弃用警告。</p> <p>迁移：在 ModuleGraph 和 ChunkGraph 上使用新的 API。</p> <h3 id="init-fragments">Init Fragments <a href="#init-fragments" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>DependenciesBlockVariables</code> 已被移除，改为 <code>InitFragments</code>。<code>DependencyTemplates</code> 现在可以添加 <code>InitFragments</code>，以将代码注入模块源的起始位置。<code>InitFragments</code> 允许删除重复数据。</p> <p>迁移：使用 <code>InitFragments</code> 代替，而无需在源文件的负索引出插入。</p> <h3 id="module-source-types">模块 Source Types <a href="#module-source-types" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Modules 现在必须通过 <code>Module.getSourceTypes()</code> 来定义它们支持的源码类型。根据这一点，不同的插件会用这些类型调用 <code>source()</code>。对于源类型为 <code>javascript</code> 的 <code>JavascriptModulesPlugin</code> 会将源代码嵌入到 bundle 中。源类型 <code>webassembly</code> 的 <code>WebAssemblyModulesPlugin</code> 会 emit 一个 wasm 文件。同时，也支持自定义源类型，例如，mini-css-extract-plugin 会使用源类型为 <code>stylesheet</code> 将源码嵌入到 css 文件中。</p> <p>模块类型与源类型间没有关系。即使模块类型为 <code>json</code>，也可以使用源类型为 <code>javascript</code> 和模块类型为 <code>webassembly/experimental</code> 的 <code>javascript</code> 和 <code>webassembly</code>。</p> <p>迁移：自定义模块需要实现这些新的接口方法。</p> <h3 id="plugins-for-stats">Stats 的插件 <a href="#plugins-for-stats" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Stats 的 <code>preset</code>，<code>default</code>，<code>json</code> 和 <code>toString</code> 现已由插件系统内置。将当前的 Stats 转换为插件。</p> <p>迁移：你现在可以自定义它，而无需替换整个 Stats 功能。额外的信息现在可以添加到 stats json 中，而不是单独编写文件。</p> <h3 id="new-watching">全新的监听 <a href="#new-watching" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 所使用的监听已重构。它之前使用的是 <code>chokidar</code> 和原生依赖 <code>fsevents</code>（仅在 macOS 上）。现在它在只基于原生的 Node.js 中的 <code>fs</code>。这意味着在 webpack 中已经没有原生依赖了。</p> <p>它还能在监听时捕捉更多关于文件系统的信息。目前，它还可以捕获 mtimes 和监视事件时间，以及丢失文件的信息。为此，<code>WatchFileSystem</code> API 做了一点小改动。在修改的同时，我们还将 Arrays 转换为 Sets，Objects 转换为 Maps。</p> <h3 id="sizeonlysource-after-emit">SizeOnlySource after emit <a href="#sizeonlysource-after-emit" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 现在使用 <code>SizeOnlySource</code> 替换 <code>Compilation.assets</code> 中的 Sources，以减少内存占用。</p> <h3 id="emitting-assets-multiple-times">Emitting assets multiple times <a href="#emitting-assets-multiple-times" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>原来的 <code>Multiple assets emit different content to the same filename</code> 警告，现在成为错误。</p> <h3 id="exportsinfo">ExportsInfo <a href="#exportsinfo" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>重构了模块导出信息的存储方式。ModuleGraph 现在为每个 <code>Module</code> 提供了一个 <code>ExportsInfo</code>，它用于存储每个 export 的信息。如果模块仅以副作用的方式使用，它还存储了关于未知 export 的信息，</p> <p>对于每个 export，都会存储以下信息：</p> <ul> <li>是否使用 export? 是否使用并不确定。（详见 <code>optimization.usedExports</code>）</li> <li>是否提供 export? 是否提供并不确定。（详见 <code>optimization.providedExports</code>）</li> <li>能否重命名 export 名? 是否重命名，也不确定</li> <li>如果 export 已重新命名，则为新名称。（详见 <code>optimization.mangleExports</code>）</li> <li>嵌套的 ExportsInfo，如果 export 是一个含有附加信息的对象，那么它本身就是一个对象 <ul> <li>用于重新导出命名空间对象：<code>import * as X from "..."; export { X };</code></li> <li>用于表示 JSON 模块中的结构</li> </ul> </li> </ul> <h3 id="code-generation-phase">代码生成阶段 <a href="#code-generation-phase" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>编译的代码生成功能作为单独的编译阶段。它不再隐藏在 <code>Module.source()</code> 和 <code>Module.getRuntimeRequirements()</code> 中运行了。</p> <p>这应该会使得流程更加简洁。它还运行报告该阶段的进度。并使得代码生成在剖析时更加清晰可见。</p> <p>迁移：<code>Module.source()</code> 和 <code>Module.getRuntimeRequirements()</code> 已弃用。使用 <code>Module.codeGeneration()</code> 代替。</p> <h3 id="dependencyreference">依赖关系参考 <a href="#dependencyreference" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 曾经有一个单一的方法和类型来表示依赖关系的引用（<code>Compilation.getDependencyReference</code> 会返回一个 <code>DependencyReference</code>） 该类型用于引入关于该引用的所有信息，如 被引用的模块，已经引入了哪些 export，如果是弱引用，还需要订阅一些相关信息。</p> <p>把所有这些信息构建在一起，拿到参考的成本就很高，而且很频繁（每次有人需要一个信息）。</p> <p>在 webpack5 中，这部分代码库被重构了，方法进行了拆分。</p> <ul> <li>引用的模块可以从 ModuleGraphConnection 中读取</li> <li>引入的导出名，可以通过 <code>Dependency.getReferencedExports()</code> 获取</li> <li><code>Dependency</code> 的 class 上会有一个 <code>weak</code> 的 flag</li> <li>排序只与 <code>HarmonyImportDependencies</code> 相关，可以通过 <code>sourceOrder</code> 属性获取</li> </ul> <h3 id="presentational-dependencies">Presentational Dependencies <a href="#presentational-dependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>这是 <code>NormalModules</code> 的一种新 Dependencies 类型：Presentational Dependencies</p> <p>这些 dependencies 只在代码生成阶段使用，但在模块图构建过程中未使用。 所以它们永远不能引用模块或影响导出/导入。</p> <p>这些依赖关系的处理成本较低，webpack 会尽可能地使用它们</p> <h3 id="deprecated-loaders">弃用 loaders <a href="#deprecated-loaders" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <ul> <li> <p><a href="https://github.com/webpack-contrib/null-loader"><code>null-loader</code></a></p> <p>已被弃用。使用</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      xyz$<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>或者使用绝对路径</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'....\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> </li> </ul> <h2 id="minor-changes">微小改动 <a href="#minor-changes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><code>Compiler.name</code>：当生成带有绝对路径的编译器名称时，请确保名称使用 <code>|</code> 或 <code>!</code> 分隔。 <ul> <li>使用空格作为分隔符的做法现已不再适用。（路径可以保护空格）</li> <li>温馨提示：在 Stats 中输出时 <code>|</code> 会被替换为空格。</li> </ul> </li> <li><code>SystemPlugin</code> 现已被默认禁用。 <ul> <li>迁移：应避免使用它，因为此规范已被删除。你可以使用 <code>Rule.parser.system: true</code> 来重新启用它。</li> </ul> </li> <li><code>ModuleConcatenationPlugin</code>：<code>DependencyVariables</code> 已被移除，将不再阻止连接。 <ul> <li>这意味着它现在可以在 <code>module</code>，<code>global</code>，<code>process</code> 或 ProvidePlugin 的情况下进行连接。</li> </ul> </li> <li>移除了 <code>Stats.presetToOptions</code> <ul> <li>迁移：使用 <code>compilation.createStatsOptions</code> 代替</li> </ul> </li> <li>移除了 <code>SingleEntryPlugin</code> 和 <code>SingleEntryDependency</code> <ul> <li>迁移：使用 <code>EntryPlugin</code> 和 <code>EntryDependency</code> 代替</li> </ul> </li> <li>chunk 现在可以有多个入口</li> <li>移除了 <code>ExtendedAPIPlugin</code> <ul> <li>迁移：不再需要此插件，在必要时，你可以使用 <code>__webpack_hash__</code> 和 <code>__webpack_chunkname__</code> 注入运行时代码。</li> </ul> </li> <li><code>ProgressPlugin</code> 不再为 <code>reportProgress</code> 使用 tapable 上下文。 <ul> <li>迁移：使用 <code>ProgressPlugin.getReporter(compiler)</code> 代替</li> </ul> </li> <li>现已对 <code>.mjs</code> 文件重新启用 <code>ProvidePlugin</code></li> <li><code>Stats</code> json 中的 <code>errors</code> 和 <code>warnings</code> 不再是字符串类型，而是包含必要信息的对象，这些信息会被分割为熟悉。 <ul> <li>迁移：查阅具体属性信息，如 <code>message</code> 字段</li> </ul> </li> <li>移除了 <code>Compilation.hooks.normalModuleLoader</code> <ul> <li>迁移：使用 <code>NormalModule.getCompilationHooks(compilation).loader</code> 代替</li> </ul> </li> <li>将 <code>NormalModuleFactory</code> 中的 hook 从 waterfall 改为 bailing，修改并对 waterfall 函数的 hook 进行了重命名操作。</li> <li>移除了 <code>compilationParams.compilationDependencies</code> <ul> <li>插件可以在编译中使用 <code>compilation.file/context/missingDependencies</code> 添加依赖关系</li> <li>Compat 层将 <code>compilationDependencies.add</code> 委托给 <code>fileDependencies.add</code>。</li> </ul> </li> <li><code>stats.assetsByChunkName[x]</code> 始终为一个数组</li> <li>增加了 <code>__webpack_get_script_filename__</code> 函数用于获取 script 文件的文件名。</li> <li>在 package.json 中 <code>"sideEffects"</code> 将使用 <code>glob-to-regex</code> 来代替 <code>micromatch</code> 处理。 <ul> <li>这可能会改变边缘案例的语义。</li> </ul> </li> <li>从 <code>IgnorePlugin</code> 中移除了 <code>checkContext</code></li> <li>全新的 <code>__webpack_exports_info__</code> API 允许导出使用自省。</li> <li>SourceMapDevToolPlugin 现已适用于非 chunk 资源。</li> <li>当引用的 env 变量缺失且没有降级数据时，EnvironmentPlugin 目前会展示一个错。</li> <li>从 schema 中移除 <code>serve</code> 熟悉。</li> </ul> <h2 id="other-minor-changes">其他微小改动 <a href="#other-minor-changes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li>移除内置目录，用运行时代替内置目录</li> <li>移除不适用的特性 <ul> <li>BannerPlugin 目前只支持一个参数，这个参数可以是对象，字符串或函数</li> </ul> </li> <li>移除 <code>CachePlugin</code></li> <li><code>Chunk.entryModule</code> 已弃用，使用 ChunkGraph 代替</li> <li><code>Chunk.hasEntryModule</code> 已弃用</li> <li><code>Chunk.addModule</code> 已弃用</li> <li><code>Chunk.removeModule</code> 已弃用</li> <li><code>Chunk.getNumberOfModules</code> 已弃用</li> <li><code>Chunk.modulesIterable</code> 已弃用</li> <li><code>Chunk.compareTo</code> 已弃用</li> <li><code>Chunk.containsModule</code> 已弃用</li> <li><code>Chunk.getModules</code> 已弃用</li> <li><code>Chunk.remove</code> 已弃用</li> <li><code>Chunk.moveModule</code> 已弃用</li> <li><code>Chunk.integrate</code> 已弃用</li> <li><code>Chunk.canBeIntegrated</code> 已弃用</li> <li><code>Chunk.isEmpty</code> 已弃用</li> <li><code>Chunk.modulesSize</code> 已弃用</li> <li><code>Chunk.size</code> 已弃用</li> <li><code>Chunk.integratedSize</code> 已弃用</li> <li><code>Chunk.getChunkModuleMaps</code> 已弃用</li> <li><code>Chunk.hasModuleInGraph</code> 已弃用</li> <li><code>Chunk.updateHash</code> 签名已变更</li> <li><code>Chunk.getChildIdsByOrders</code> 签名已变更（TODO: 考虑移至 <code>ChunkGraph</code>）</li> <li><code>Chunk.getChildIdsByOrdersMap</code> 签名已变更（TODO: 考虑移至 <code>ChunkGraph</code>）</li> <li>移除了 <code>Chunk.getChunkModuleMaps</code></li> <li>移除了 <code>Chunk.setModules</code></li> <li>移除了废弃的 Chunk 方法</li> <li>添加了 <code>ChunkGraph</code></li> <li>移除了 <code>ChunkGroup.setParents</code></li> <li>移除了 <code>ChunkGroup.containsModule</code></li> <li>移除了 <code>Compilation.cache</code>，改用 <code>Compilation.getCache()</code></li> <li><code>ChunkGroup.remove</code> 不再断开该 Group 与 block 的连接</li> <li><code>ChunkGroup.compareTo</code> 签名已变更</li> <li><code>ChunkGroup.getChildrenByOrders</code> 签名已变更</li> <li><code>ChunkGroup</code> 的 index 和 index 改名为 pre/post order index <ul> <li>废弃了 old getter</li> </ul> </li> <li><code>ChunkTemplate.hooks.modules</code> 签名已变更</li> <li><code>ChunkTemplate.hooks.render</code> 签名已变更</li> <li><code>ChunkTemplate.updateHashForChunk</code> 签名已变更</li> <li>移除了 <code>Compilation.hooks.optimizeChunkOrder</code></li> <li>移除了 <code>Compilation.hooks.optimizeModuleOrder</code></li> <li>移除了 <code>Compilation.hooks.advancedOptimizeModuleOrder</code></li> <li>移除了 <code>Compilation.hooks.optimizeDependenciesBasic</code></li> <li>移除了 <code>Compilation.hooks.optimizeDependenciesAdvanced</code></li> <li>移除了 <code>Compilation.hooks.optimizeModulesBasic</code></li> <li>移除了 <code>Compilation.hooks.optimizeModulesAdvanced</code></li> <li>移除了 <code>Compilation.hooks.optimizeChunksBasic</code></li> <li>移除了 <code>Compilation.hooks.optimizeChunksAdvanced</code></li> <li>移除了 <code>Compilation.hooks.optimizeChunkModulesBasic</code></li> <li>移除了 <code>Compilation.hooks.optimizeChunkModulesAdvanced</code></li> <li>移除了 <code>Compilation.hooks.optimizeExtractedChunksBasic</code></li> <li>移除了 <code>Compilation.hooks.optimizeExtractedChunks</code></li> <li>移除了 <code>Compilation.hooks.optimizeExtractedChunksAdvanced</code></li> <li>移除了 <code>Compilation.hooks.afterOptimizeExtractedChunks</code></li> <li>添加了 <code>Compilation.hooks.stillValidModule</code></li> <li>添加了 <code>Compilation.hooks.statsPreset</code></li> <li>添加了 <code>Compilation.hooks.statsNormalize</code></li> <li>添加了 <code>Compilation.hooks.statsFactory</code></li> <li>添加了 <code>Compilation.hooks.statsPrinter</code></li> <li><code>Compilation.fileDependencies</code>，<code>Compilation.contextDependencies</code> 以及 <code>Compilation.missingDependencies</code> 现在变为了 LazySets</li> <li>移除了 <code>Compilation.entries</code> <ul> <li>迁移：使用 <code>Compilation.entryDependencies</code> 代替</li> </ul> </li> <li>移除了 <code>Compilation._preparedEntrypoints</code></li> <li><code>dependencyTemplates</code> 现已改为 <code>DependencyTemplates</code> 的 class 类型，而不再是原始的 <code>Map</code></li> <li>移除了 <code>Compilation.fileTimestamps</code> 和 <code>contextTimestamps</code> <ul> <li>迁移：使用 <code>Compilation.fileSystemInfo</code> 代替</li> </ul> </li> <li>移除了 <code>Compilation.waitForBuildingFinished</code> <ul> <li>迁移：使用新队列</li> </ul> </li> <li>移除了 <code>Compilation.addModuleDependencies</code></li> <li>移除了 <code>Compilation.prefetch</code></li> <li><code>Compilation.hooks.beforeHash</code> 会在创建模块 hash 值后被调用。 <ul> <li>迁移：使用 <code>Compiliation.hooks.beforeModuleHash</code> 代替</li> </ul> </li> <li>移除了 <code>Compilation.applyModuleIds</code></li> <li>移除了 <code>Compilation.applyChunkIds</code></li> <li>添加了 <code>Compiler.root</code>，用于指向根编译器 <ul> <li>可用于缓存 WeakMaps 中的数据，而非静态作用域内的数据</li> </ul> </li> <li>添加了 <code>Compiler.hooks.afterDone</code></li> <li><code>Source.emitted</code> 不再由编译器设置 <ul> <li>迁移：使用 <code>Compilation.emittedAssets</code> 代替</li> </ul> </li> <li>添加了 <code>Compiler/Compilation.compilerPath</code>：此为编译器在编译器树中唯一名称。（在根编译器范围内唯一）</li> <li><code>Module.needRebuild</code> 已弃用 <ul> <li>迁移：使用 <code>Module.needBuild</code> 代替</li> </ul> </li> <li><code>Dependency.getReference</code> 签名已变更</li> <li><code>Dependency.getExports</code> 签名已变更</li> <li><code>Dependency.getWarnings</code> 签名已变更</li> <li><code>Dependency.getErrors</code> 签名已变更</li> <li><code>Dependency.updateHash</code> 签名已变更</li> <li>移除了 <code>Dependency.module</code></li> <li>添加了 <code>DependencyTemplate</code> 的基类</li> <li>移除了 <code>MultiEntryDependency</code></li> <li>添加了 <code>EntryDependency</code></li> <li>移除了 <code>EntryModuleNotFoundError</code></li> <li>移除了 <code>SingleEntryPlugin</code></li> <li>添加了 <code>EntryPlugin</code></li> <li>添加了 <code>Generator.getTypes</code></li> <li>添加了 <code>Generator.getSize</code></li> <li><code>Generator.generate</code> 签名已变更</li> <li>添加了 <code>HotModuleReplacementPlugin.getParserHooks</code></li> <li><code>Parser</code> 被移至 <code>JavascriptParser</code> 中</li> <li><code>ParserHelpers</code> 被移至 <code>JavascriptParserHelpers</code> 中</li> <li>移除了 <code>MainTemplate.hooks.moduleObj</code></li> <li>移除了 <code>MainTemplate.hooks.currentHash</code></li> <li>移除了 <code>MainTemplate.hooks.addModule</code></li> <li>移除了 <code>MainTemplate.hooks.requireEnsure</code></li> <li>移除了 <code>MainTemplate.hooks.globalHashPaths</code></li> <li>移除了 <code>MainTemplate.hooks.globalHash</code></li> <li>移除了 <code>MainTemplate.hooks.hotBootstrap</code></li> <li><code>MainTemplate.hooks</code> 部分签名已变更</li> <li><code>Module.hash</code> 已弃用</li> <li><code>Module.renderedHash</code> 已弃用</li> <li>移除了 <code>Module.reasons</code></li> <li><code>Module.id</code> 已弃用</li> <li><code>Module.index</code> 已弃用</li> <li><code>Module.index2</code> 已弃用</li> <li><code>Module.depth</code> 已弃用</li> <li><code>Module.issuer</code> 已弃用</li> <li>移除了 <code>Module.profile</code></li> <li>移除了 <code>Module.prefetched</code></li> <li>移除了 <code>Module.built</code></li> <li>移除了 <code>Module.used</code> <ul> <li>迁移：使用 <code>Module.getUsedExports</code> 代替</li> </ul> </li> <li>Module.usedExports 已弃用 <ul> <li>MIGRATION: 使用 <code>Module.getUsedExports</code> 代替</li> </ul> </li> <li><code>Module.optimizationBailout</code> 已弃用</li> <li>移除了 <code>Module.exportsArgument</code></li> <li><code>Module.optional</code> 已弃用</li> <li>移除了 <code>Module.disconnect</code></li> <li>移除了 <code>Module.unseal</code></li> <li>移除了 <code>Module.setChunks</code></li> <li><code>Module.addChunk</code> 已弃用</li> <li><code>Module.removeChunk</code> 已弃用</li> <li><code>Module.isInChunk</code> 已弃用</li> <li><code>Module.isEntryModule</code> 已弃用</li> <li><code>Module.getChunks</code> 已弃用</li> <li><code>Module.getNumberOfChunks</code> 已弃用</li> <li><code>Module.chunksIterable</code> 已弃用</li> <li>移除了 <code>Module.hasEqualsChunks</code></li> <li><code>Module.useSourceMap</code> 被移至 <code>NormalModule</code></li> <li>移除了 <code>Module.addReason</code></li> <li>移除了 <code>Module.removeReason</code></li> <li>移除了 <code>Module.rewriteChunkInReasons</code></li> <li>移除了 <code>Module.isUsed</code> <ul> <li>迁移：使用 <code>isModuleUsed</code>，<code>isExportUsed</code> 和 <code>getUsedName</code> 代替</li> </ul> </li> <li><code>Module.updateHash</code> 签名已变更</li> <li>移除了 <code>Module.sortItems</code></li> <li>移除了 <code>Module.unbuild</code> <ul> <li>迁移：使用 <code>invalidateBuild</code> 代替</li> </ul> </li> <li>添加了 <code>Module.getSourceTypes</code></li> <li>添加了 <code>Module.getRuntimeRequirements</code></li> <li><code>Module.size</code> 签名已变更</li> <li><code>ModuleFilenameHelpers.createFilename</code> 签名已变更</li> <li><code>ModuleProfile</code> 的 class 添加了许多数据</li> <li>移除了 <code>ModuleReason</code></li> <li><code>ModuleTemplate.hooks</code> 签名已变更</li> <li><code>ModuleTemplate.render</code> 签名已变更</li> <li>移除了 <code>Compiler.dependencies</code> <ul> <li>迁移：使用 <code>MultiCompiler.setDependencies</code> 代替</li> </ul> </li> <li>移除了 <code>MultiModule</code></li> <li>移除了 <code>MultiModuleFactory</code></li> <li><code>NormalModuleFactory.fileDependencies</code>，<code>NormalModuleFactory.contextDependencies</code> 和 <code>NormalModuleFactory.missingDependencies</code> 现已使用 LazySets</li> <li><code>RuntimeTemplate</code> 方法现已使用 <code>runtimeRequirements</code> 的参数</li> <li>移除了 <code>serve</code> 属性</li> <li>移除了 <code>Stats.jsonToString</code></li> <li>移除了 <code>Stats.filterWarnings</code></li> <li>移除了 <code>Stats.getChildOptions</code></li> <li>移除了 <code>Stats</code> 的 helper 方法</li> <li><code>Stats.toJson</code> 签名已变更（参数二被移除）</li> <li>移除了 <code>ExternalModule.external</code></li> <li>移除了 <code>HarmonyInitDependency</code></li> <li><code>Dependency.getInitFragments</code> 已弃用 <ul> <li>迁移：使用 <code>apply</code> <code>initFragements</code> 代替</li> </ul> </li> <li>DependencyReference 现将函数传递给模块，而非模块。</li> <li>移除了 <code>HarmonyImportSpecifierDependency.redirectedId</code> <ul> <li>迁移：使用 <code>setId</code> 代替</li> </ul> </li> <li>acorn 5 -> 8</li> <li>测试 <ul> <li>HotTestCases 现可为多个目标运行，包括 <code>async-node</code> <code>node</code> <code>web</code> <code>webworker</code></li> <li>TestCases 现在可以用 <code>store: "instant"</code> 和 <code>store: "pack"</code> 来运行系统缓存。</li> <li>TestCases 现在也可以为指定的模块 id 运行。</li> </ul> </li> <li>工具添加了 import 的排序功能（在 CI 检查）</li> <li>当 chunk 的名称与 id 等价时，运行时的 chunk 名称映射不再包含入口</li> <li>将 <code>resolvedModuleId</code> <code>resolvedModuleIdentifier</code> 和 <code>resolvedModule</code> 添加到 Stats 的 reason 中，在完成作用域提升等优化之前，这些 reason 指向模块</li> <li>在 Stats toString 的输出中展示 <code>resolvedModule</code></li> <li>loader-runner 已升级：https://github.com/webpack/loader-runner/releases/tag/v3.0.0</li> <li><code>Compilation</code> 中的 <code>file/context/missingDependencies</code> 因性能问题不再排序 <ul> <li>不要依赖排序</li> </ul> </li> <li>webpack-sources 升级至 version 2：https://github.com/webpack/webpack-sources/releases/tag/v2.0.1</li> <li>删除了对 webpack-command 的支持</li> <li>使用 schema-utils@2 进行模式校验</li> <li><code>Compiler.assetEmitted</code> 改进了参数二，增加了更多信息</li> <li>BannerPlugin 省略了尾部的空白字符</li> <li>从 <code>LimitChunkCountPlugin</code> 中移除了 <code>minChunkSize</code> 选项</li> <li>将与 javascript 相关的文件重组到子目录中 <ul> <li><code>webpack.JavascriptModulesPlugin</code> -> <code>webpack.javascript.JavascriptModulesPlugin</code></li> </ul> </li> <li>添加了 <code>Logger.getChildLogger</code></li> <li>将 DllPlugin 中 entryOnly 选项的默认值变更为 true</li> <li>移除了特殊请求的简化逻辑，使用单一的相对路径作为可读模块的名称</li> <li>允许 webpack:// 将 SourceMaps 中的 url 改为相对于 webpack 根目录的路径</li> <li>添加了 API 用于生成和处理针对 webpack 配置的 CLI 参数</li> <li>当使用 System.js 作为 libraryTarget 时，在 System 中添加 <code>__system_context__</code> 作为上下文</li> <li>为 DefinePlugin 添加 bigint 的支持</li> <li>对基本环节添加 bigint 的支持，例如 maths</li> <li>移除在创建 hash 后修改编译 hash 的功能</li> <li>移除了 <code>HotModuleReplacementPlugin</code> 的 multiStep 模式</li> <li>当使用嵌套的对象或数组时，<code>emitAsset</code> 中的 <code>assetInfo</code> 将被合并</li> <li>当基于 <code>filename</code> 生成路径时，<code>[query]</code> 是一个有效占位符，如 asset</li> <li>添加了 <code>Compilation.deleteAsset</code>，用于正确删除 asset 和非公用的相关资源</li> <li>将 <code>require("webpack-sources")</code> 暴露为 <code>require("webpack").sources</code></li> <li>terser 5</li> <li>当 Webpack 作为句首时，Webpack 的 W 应该大写</li> </ul> '}}]);