(self.webpackChunk=self.webpackChunk||[]).push([[8806],{8806:function(n){n.exports='<p>由于 JavaScript 即可以编写服务端代码也可以编写浏览器代码，所以 webpack 提供了多种部署 <em>target</em>，你可以在 webpack 的<a href="configuration.htm"/*tpa=https://webpack.docschina.org/configuration*/>配置选项</a>中进行设置。</p> <blockquote class="warning"> <p>webpack 的 <code>target</code> 属性，不要和 <code>output.libraryTarget</code> 属性混淆。有关 <code>output</code> 属性的更多信息，请参阅 <a href="concepts/output/index.htm"/*tpa=https://webpack.docschina.org/concepts/output/*/>output 指南</a></p> </blockquote> <h2 id="usage">用法 <a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>想设置 <code>target</code> 属性，只需在 webpack 配置中设置 target 字段：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token operator">:</span> <span class="token string">\'node\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>在上述示例中，target 设置为 <code>node</code>，webpack 将在类 Node.js 环境编译代码。(使用 Node.js 的 <code>require</code> 加载 chunk，而不加载任何内置模块，如 <code>fs</code> 或 <code>path</code>)。</p> <p>每个 <em>target</em> 都包含各种 deployment（部署）/environment（环境）特定的附加项，以满足其需求。具体请参阅 <a href="configuration/target/index.htm"/*tpa=https://webpack.docschina.org/configuration/target/*/>target 可用值</a>。</p> <blockquote class="todo"> <p>后续会进一步扩展受欢迎的 target。</p> </blockquote> <h2 id="multiple-targets">多 target <a href="#multiple-targets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>虽然 webpack <strong>不支持</strong> 向 <code>target</code> 属性传入多个字符串，但是可以通过设置两个独立配置，来构建对 library 进行同构：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> serverConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token operator">:</span> <span class="token string">\'node\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'lib.node.js\'/*tpa=https://webpack.docschina.org/lib.node.js*/</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//…</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> clientConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  target<span class="token operator">:</span> <span class="token string">\'web\'</span><span class="token punctuation">,</span> <span class="token comment">// &#x3C;=== 默认为 \'web\'，可省略</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'lib.js\'/*tpa=https://webpack.docschina.org/lib.js*/</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//…</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span> serverConfig<span class="token punctuation">,</span> clientConfig <span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p>上述示例中，将会在 <code>dist</code> 文件夹下创建 <code>lib.js</code> 和 <code>lib.node.js</code> 文件。</p> <h2 id="resources">资源 <a href="#resources" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>从上面选项可以看出，你可以选择部署不同的 <em>target</em>。下面是可以参考的示例和资源：</p> <ul> <li><strong><a href="https://github.com/TheLarkInn/compare-webpack-target-bundles">compare-webpack-target-bundles</a></strong>：测试并查看 webpack <em>target</em> 的绝佳资源。同样包含错误上报。</li> <li><strong><a href="https://github.com/chentsulin/electron-react-boilerplate">Boilerplate of Electron-React Application</a></strong>: 一个关于 electron 主进程和渲染进程构建过程的优秀示例。</li> </ul> <blockquote class="todo"> <p>需要你查看在线代码或样本中 webpack 配置中使用的 target 示例。</p> </blockquote> '}}]);