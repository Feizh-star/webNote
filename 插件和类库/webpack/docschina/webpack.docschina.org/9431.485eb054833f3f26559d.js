(self.webpackChunk=self.webpackChunk||[]).push([[9431],{9431:function(n){n.exports='<p><code>publicPath</code> 配置选项在各种场景中都非常有用。你可以通过它来指定应用程序中所有资源的基础路径。</p> <h2 id="use-cases">示例 <a href="#use-cases" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>下面提供一些用于实际应用程序的示例，通过这些示例，此功能显得极其简单。实质上，发送到 <code>output.path</code> 目录的每个文件，都将从 <code>output.publicPath</code> 位置引用。这也包括（通过 <a href="guides/code-splitting/index.htm"/*tpa=https://webpack.docschina.org/guides/code-splitting/*/>代码分离</a> 创建的）子 chunk 和作为依赖图一部分的所有其他资源（例如 image, font 等）。</p> <h3 id="environment-based">基于环境设置 <a href="#environment-based" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在开发环境中，我们通常有一个 <code>assets/</code> 文件夹，它与索引页面位于同一级别。这没太大问题，但是，如果我们将所有静态资源托管至 CDN，然后想在生产环境中使用呢？</p> <p>想要解决这个问题，可以直接使用一个有着悠久历史的 environment variable(环境变量)。假设我们有一个变量 <code>ASSET_PATH</code>：</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 尝试使用环境变量，否则使用根路径</span>\n<span class="token keyword">const</span> <span class="token constant">ASSET_PATH</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ASSET_PATH</span> <span class="token operator">||</span> <span class="token string">\'/\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token operator">:</span> <span class="token constant">ASSET_PATH</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 这可以帮助我们在代码中安全地使用环境变量</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string">\'process.env.ASSET_PATH\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token constant">ASSET_PATH</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="on-the-fly">在运行时设置 <a href="#on-the-fly" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>另一个可能出现的情况是，需要在运行时设置 <code>publicPath</code>。webpack 暴露了一个名为 <code>__webpack_public_path__</code> 的全局变量。所以在应用程序的 entry point 中，可以直接如下设置：</p> <pre><code class="hljs language-js">__webpack_public_path__ <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ASSET_PATH</span><span class="token punctuation">;</span></code></pre> <p>这些内容就是你所需要的。由于我们已经在配置中使用了 <code>DefinePlugin</code>， <code>process.env.ASSET_PATH</code> 将始终都被定义， 因此我们可以安全地使用。</p> <blockquote class="warning"> <p>注意，如果在 entry 文件中使用 ES2015 module import，则会在 import 之后进行 <code>__webpack_public_path__</code> 赋值。在这种情况下，你必须将 public path 赋值移至一个专用模块中，然后将它的 import 语句放置到 entry.js 最上面：</p> </blockquote> <pre><code class="hljs language-js"><span class="token comment">// entry.js</span>\n<span class="token keyword">import</span> <span class="token string">\'./public-path\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./app\'</span><span class="token punctuation">;</span></code></pre> '}}]);