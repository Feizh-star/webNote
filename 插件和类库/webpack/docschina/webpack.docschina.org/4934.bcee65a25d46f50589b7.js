(self.webpackChunk=self.webpackChunk||[]).push([[4934],{4934:function(a){a.exports='<p>本指南包含一些改进构建/编译性能的实用技巧。</p> <hr> <h2 id="general">通用环境 <a href="#general" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>无论你是在 <a href="guides/development.htm"/*tpa=https://webpack.docschina.org/guides/development*/>开发环境</a> 还是在 <a href="guides/production.htm"/*tpa=https://webpack.docschina.org/guides/production*/>生产环境</a> 下运行构建脚本，以下最佳实践都会有所帮助。</p> <h3 id="stay-up-to-date">更新到最新版本 <a href="#stay-up-to-date" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>使用最新的 webpack 版本。我们会经常进行性能优化。webpack 的最新稳定版本是：</p> <p><a href="https://github.com/webpack/webpack/releases"><img src="https://img.shields.io/github/package-json/v/webpack/webpack.svg?label=webpack&#x26;style=flat-square&#x26;maxAge=3600" alt="latest webpack version"></a></p> <p>将 <strong>Node.js</strong> 更新到最新版本，也有助于提高性能。除此之外，将你的 package 管理工具（例如 <code>npm</code> 或者 <code>yarn</code>）更新到最新版本，也有助于提高性能。较新的版本能够建立更高效的模块树以及提高解析速度。</p> <h3 id="loaders">loader <a href="#loaders" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>将 loader 应用于最少数量的必要模块。而非如下:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>通过使用 <code>include</code> 字段，仅将 loader 应用在实际需要将其转换的模块：</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="bootstrap">引导(bootstrap) <a href="#bootstrap" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>每个额外的 loader/plugin 都有其启动时间。尽量少地使用工具。</p> <h3 id="resolving">解析 <a href="#resolving" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>以下步骤可以提高解析速度：</p> <ul> <li>减少 <code>resolve.modules</code>, <code>resolve.extensions</code>, <code>resolve.mainFiles</code>, <code>resolve.descriptionFiles</code> 中条目数量，因为他们会增加文件系统调用的次数。</li> <li>如果你不使用 symlinks（例如 <code>npm link</code> 或者 <code>yarn link</code>），可以设置 <code>resolve.symlinks: false</code>。</li> <li>如果你使用自定义 resolve plugin 规则，并且没有指定 context 上下文，可以设置 <code>resolve.cacheWithContext: false</code>。</li> </ul> <h3 id="dlls">dll <a href="#dlls" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>使用 <code>DllPlugin</code> 为更改不频繁的代码生成单独的编译结果。这可以提高应用程序的编译速度，尽管它增加了构建过程的复杂度。</p> <h3 id="smaller--faster">小即是快(smaller = faster) <a href="#smaller--faster" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>减少编译结果的整体大小，以提高构建性能。尽量保持 chunk 体积小。</p> <ul> <li>使用数量更少/体积更小的 library。</li> <li>在多页面应用程序中使用 <code>SplitChunksPlugin</code>。</li> <li>在多页面应用程序中使用 <code>SplitChunksPlugin </code>，并开启 <code>async</code> 模式。</li> <li>移除未引用代码。</li> <li>只编译你当前正在开发的那些代码。</li> </ul> <h3 id="worker-pool">worker 池(worker pool) <a href="#worker-pool" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>thread-loader</code> 可以将非常消耗资源的 loader 分流给一个 worker pool。</p> <blockquote class="warning"> <p>不要使用太多的 worker，因为 Node.js 的 runtime 和 loader 都有启动开销。最小化 worker 和 main process(主进程) 之间的模块传输。进程间通讯(IPC, inter process communication)是非常消耗资源的。</p> </blockquote> <h3 id="persistent-cache">持久化缓存 <a href="#persistent-cache" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在 webpack 配置中使用 <a href="configuration/other-options/index.htm#cache"/*tpa=https://webpack.docschina.org/configuration/other-options/#cache*/><code>cache</code></a> 选项。使用 <code>package.json</code> 中的 <code>"postinstall"</code> 清除缓存目录。</p> <blockquote class="tip"> <p>我们支持 yarn PnP v3 <a href="https://yarnpkg.com/features/pnp"><code>yarn 2 berry</code></a>，来进行持久缓存。</p> </blockquote> <h3 id="custom-pluginsloaders">自定义 plugin/loader <a href="#custom-pluginsloaders" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>对它们进行概要分析，以免在此处引入性能问题。</p> <h3 id="progress-plugin">Progress plugin <a href="#progress-plugin" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>将 <code>ProgressPlugin</code> 从 webpack 中删除，可以缩短构建时间。请注意，<code>ProgressPlugin</code> 可能不会为快速构建提供太多价值，因此，请权衡利弊再使用。</p> <hr> <h2 id="development">开发环境 <a href="#development" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>以下步骤对于_开发环境_特别有帮助。</p> <h3 id="incremental-builds">增量编译 <a href="#incremental-builds" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>使用 webpack 的 watch mode(监听模式)。而不使用其他工具来 watch 文件和调用 webpack 。内置的 watch mode 会记录时间戳并将此信息传递给 compilation 以使缓存失效。</p> <p>在某些配置环境中，watch mode 会回退到 poll mode(轮询模式)。监听许多文件会导致 CPU 大量负载。在这些情况下，可以使用 <code>watchOptions.poll</code> 来增加轮询的间隔时间。</p> <h3 id="compile-in-memory">在内存中编译 <a href="#compile-in-memory" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>下面几个工具通过在内存中（而不是写入磁盘）编译和 serve 资源来提高性能：</p> <ul> <li><code>webpack-dev-server</code></li> <li><code>webpack-hot-middleware</code></li> <li><code>webpack-dev-middleware</code></li> </ul> <h3 id="statstojson-speed">stats.toJson 加速 <a href="#statstojson-speed" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 4 默认使用 <code>stats.toJson()</code> 输出大量数据。除非在增量步骤中做必要的统计，否则请避免获取 <code>stats</code> 对象的部分内容。<code>webpack-dev-server</code> 在 v3.1.3 以后的版本，包含一个重要的性能修复，即最小化每个增量构建步骤中，从 <code>stats</code> 对象获取的数据量。</p> <h3 id="devtool">Devtool <a href="#devtool" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>需要注意的是不同的 <code>devtool</code> 设置，会导致性能差异。</p> <ul> <li><code>"eval"</code> 具有最好的性能，但并不能帮助你转译代码。</li> <li>如果你能接受稍差一些的 map 质量，可以使用 <code>cheap-source-map</code> 变体配置来提高性能</li> <li>使用 <code>eval-source-map</code> 变体配置进行增量编译。</li> </ul> <blockquote class="tip"> <p>在大多数情况下，最佳选择是 <code>eval-cheap-module-source-map</code>。</p> </blockquote> <h3 id="avoid-production-specific-tooling">避免在生产环境下才会用到的工具 <a href="#avoid-production-specific-tooling" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>某些 utility, plugin 和 loader 都只用于生产环境。例如，在开发环境下使用 <code>TerserPlugin</code> 来 minify(压缩) 和 mangle(混淆破坏) 代码是没有意义的。通常在开发环境下，应该排除以下这些工具：</p> <ul> <li><code>TerserPlugin</code></li> <li><code>[fullhash]</code>/<code>[chunkhash]</code>/<code>[contenthash]</code></li> <li><code>AggressiveSplittingPlugin</code></li> <li><code>AggressiveMergingPlugin</code></li> <li><code>ModuleConcatenationPlugin</code></li> </ul> <h3 id="minimal-entry-chunk">最小化 entry chunk <a href="#minimal-entry-chunk" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 只会在文件系统中输出已经更新的 chunk。某些配置选项（HMR, <code>output.chunkFilename</code> 的 <code>[name]</code>/<code>[chunkhash]/[contenthash]</code>，<code>[fullhash]</code>）来说，除了对已经更新的 chunk 无效之外，对于 entry chunk 也不会生效。</p> <p>确保在生成 entry chunk 时，尽量减少其体积以提高性能。下面的配置为运行时代码创建了一个额外的 chunk，所以它的生成代价较低：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    runtimeChunk<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="avoid-extra-optimization-steps">避免额外的优化步骤 <a href="#avoid-extra-optimization-steps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 通过执行额外的算法任务，来优化输出结果的体积和加载性能。这些优化适用于小型代码库，但是在大型代码库中却非常耗费性能：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    removeAvailableModules<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    removeEmptyChunks<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    splitChunks<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="output-without-path-info">输出结果不携带路径信息 <a href="#output-without-path-info" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 会在输出的 bundle 中生成路径信息。然而，在打包数千个模块的项目中，这会导致造成垃圾回收性能压力。在 <code>options.output.pathinfo</code> 设置中关闭：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    pathinfo<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="nodejs-versions-8910-9111">Node.js 版本 8.9.10-9.11.1 <a href="#nodejs-versions-8910-9111" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Node.js v8.9.10 - v9.11.1 中的 ES2015 <code>Map</code> 和 <code>Set</code> 实现，存在 <a href="https://github.com/nodejs/node/issues/19769">性能回退</a>。webpack 大量地使用这些数据结构，因此这次回退也会影响编译时间。</p> <p>之前和之后的 Node.js 版本不受影响。</p> <h3 id="typescript-loader">TypeScript loader <a href="#typescript-loader" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>你可以为 loader 传入 <code>transpileOnly</code> 选项，以缩短使用 <code>ts-loader</code> 时的构建时间。使用此选项，会关闭类型检查。如果要再次开启类型检查，请使用 <a href="https://www.npmjs.com/package/fork-ts-checker-webpack-plugin"><code>ForkTsCheckerWebpackPlugin</code></a>。使用此插件会将检查过程移至单独的进程，可以加快 TypeScript 的类型检查和 ESLint 插入的速度。</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token operator">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token operator">:</span> <span class="token punctuation">{</span>\n        transpileOnly<span class="token operator">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>这是一个关于 <code>ts-loader</code> <a href="https://github.com/TypeStrong/ts-loader/tree/master/examples/fork-ts-checker-webpack-plugin">完整示例</a>的 Github 仓库。</p> </blockquote> <hr> <h2 id="production">生产环境 <a href="#production" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>以下步骤对于_生产环境_特别有帮助。</p> <blockquote class="warning"> <p>__不要为了很小的性能收益，牺牲应用程序的质量！__注意，在大多数情况下，优化代码质量比构建性能更重要。</p> </blockquote> <h3 id="multiple-compilations">多个 compilation 对象 <a href="#multiple-compilations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>在创建多个 compilation 时，以下工具可以帮助到你：</p> <ul> <li><a href="https://github.com/trivago/parallel-webpack"><code>parallel-webpack</code></a>：它允许在一个 worker 池中运行 compilation。</li> <li><code>cache-loader</code>：可以在多个 compilation 之间共享缓存。</li> </ul> <h3 id="source-maps">Source Maps <a href="#source-maps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>source map 相当消耗资源。你真的需要它们？</p> <hr> <h2 id="specific-tooling-issues">工具相关问题 <a href="#specific-tooling-issues" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>下列工具存在某些可能会降低构建性能的问题：</p> <h3 id="babel">Babel <a href="#babel" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <ul> <li>最小化项目中的 preset/plugin 数量。</li> </ul> <h3 id="typescript">TypeScript <a href="#typescript" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <ul> <li>在单独的进程中使用 <code>fork-ts-checker-webpack-plugin</code> 进行类型检查。</li> <li>配置 loader 跳过类型检查。</li> <li>使用 <code>ts-loader</code> 时，设置 <code>happyPackMode: true</code> / <code>transpileOnly: true</code>。</li> </ul> <h3 id="sass">Sass <a href="#sass" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <ul> <li><code>node-sass</code> 中有个来自 Node.js 线程池的阻塞线程的 bug。 当使用 <code>thread-loader</code> 时，需要设置 <code>workerParallelJobs: 2</code>。</li> </ul> '}}]);