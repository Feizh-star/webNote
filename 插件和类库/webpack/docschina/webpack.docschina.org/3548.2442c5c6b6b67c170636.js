(self.webpackChunk=self.webpackChunk||[]).push([[3548],{3548:function(n){n.exports='<p>除了打包应用程序，webpack 还可以用于打包 JavaScript library。以下指南适用于希望简化打包策略的 library 作者。</p> <h2 id="authoring-a-library">创建一个 library <a href="#authoring-a-library" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>假设你正在编写一个名为 <code>webpack-numbers</code> 的小的 library，可以将数字 1 到 5 转换为文本表示，反之亦然，例如将 2 转换为 \'two\'。</p> <p>基本的项目结构可能如下所示：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  |- webpack.config.js\n</span><span class="token prefix inserted">+</span><span class="token line">  |- package.json\n</span><span class="token prefix inserted">+</span><span class="token line">  |- /src\n</span><span class="token prefix inserted">+</span><span class="token line">    |- index.js\n</span><span class="token prefix inserted">+</span><span class="token line">    |- ref.json</span></span></code></pre> <p>初始化 npm，安装 webpack 和 lodash：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> init -y\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack lodash</code></pre> <p><strong>src/ref.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"One"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Two"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Three"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Four"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Five"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Zero"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> numRef <span class="token keyword">from</span> <span class="token string">\'https://webpack.docschina.org/ref.json\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">numToWord</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>num <span class="token operator">===</span> num <span class="token operator">?</span> ref<span class="token punctuation">.</span>word <span class="token operator">:</span> accum<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>word <span class="token operator">===</span> word <span class="token operator">&#x26;&#x26;</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>num <span class="token operator">:</span> accum<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>这个 library 的调用规范如下：</p> <ul> <li><strong>ES2015 module import:</strong></li> </ul> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> webpackNumbers <span class="token keyword">from</span> <span class="token string">\'webpack-numbers\'</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\nwebpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <ul> <li><strong>CommonJS module require:</strong></li> </ul> <pre><code class="hljs language-js"><span class="token keyword">const</span> webpackNumbers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-numbers\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\nwebpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <ul> <li><strong>AMD module require:</strong></li> </ul> <pre><code class="hljs language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'webpackNumbers\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">webpackNumbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>consumer(使用者) 还可以通过一个 script 标签来加载和使用此 library：</p> <pre><code class="hljs language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n  ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/webpack-numbers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// ...</span>\n    <span class="token comment">// 全局变量</span>\n    webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Five\'</span><span class="token punctuation">)</span>\n    <span class="token comment">// window 对象中的属性</span>\n    window<span class="token punctuation">.</span>webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Five\'</span><span class="token punctuation">)</span>\n    <span class="token comment">// ...</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre> <p>注意，我们还可以通过以下配置方式，将 library 暴露为：</p> <ul> <li>global 对象中的属性，用于 Node.js。</li> <li><code>this</code> 对象中的属性。</li> </ul> <p>完整的 library 配置和代码，请查看 <a href="https://github.com/kalcifer/webpack-library-example">webpack-library-example</a>。</p> <h2 id="base-configuration">基本配置 <a href="#base-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>现在，让我们以某种方式打包这个 library，能够实现以下几个目标：</p> <ul> <li>使用 <code>externals</code> 选项，避免将 <code>lodash</code> 打包到应用程序，而使用者会去加载它。</li> <li>将 library 的名称设置为 <code>webpack-numbers</code>。</li> <li>将 library 暴露为一个名为 <code>webpackNumbers</code> 的变量。</li> <li>能够访问其他 Node.js 中的 library。</li> </ul> <p>此外，consumer(使用者) 应该能够通过以下方式访问 library：</p> <ul> <li>ES2015 模块。例如 <code>import webpackNumbers from \'webpack-numbers\'</code>。</li> <li>CommonJS 模块。例如 <code>require(\'webpack-numbers\')</code>.</li> <li>全局变量，在通过 <code>script</code> 标签引入时。</li> </ul> <p>我们可以从如下 webpack 基本配置开始：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'webpack-numbers.js\'/*tpa=https://webpack.docschina.org/webpack-numbers.js*/</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="base-configuration-with-source-map">使用 source map 的基本配置 <a href="#base-configuration-with-source-map" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>source map 是有用的调试工具，可以查看压缩代码对应的原始代码。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">\'source-map\'</span>\n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">devtool</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'webpack-numbers.js\'/*tpa=https://webpack.docschina.org/webpack-numbers.js*/</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  devtool<span class="token punctuation">,</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    runtimeChunk<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote> <p>关于 source map 配置和可用选项的更多信息，请参考 <a href="https://webpack.js.org/configuration/devtool/">devtool 配置</a></p> </blockquote> <blockquote> <p>查看代码示例， 请参考 <a href="https://github.com/webpack/webpack/tree/master/examples/source-map">webpack 仓库</a></p> </blockquote> <h2 id="externalize-lodash">外部化 lodash <a href="#externalize-lodash" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>现在，如果执行 <code>webpack</code>，你会发现创建了一个体积相当大的文件。如果你查看这个文件，会看到 lodash 也被打包到代码中。在这种场景中，我们更倾向于把 <code>lodash</code> 当作 <code>peerDependency</code>。也就是说，consumer(使用者) 应该已经安装过 <code>lodash</code> 。因此，你就可以放弃控制此外部 library ，而是将控制权让给使用 library 的 consumer。</p> <p>这可以使用 <code>externals</code> 配置来完成：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'webpack-numbers.js\'/*tpa=https://webpack.docschina.org/webpack-numbers.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   externals: {\n</span><span class="token prefix inserted">+</span><span class="token line">     lodash: {\n</span><span class="token prefix inserted">+</span><span class="token line">       commonjs: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">       commonjs2: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">       amd: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">       root: \'_\',\n</span><span class="token prefix inserted">+</span><span class="token line">     },\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>这意味着你的 library 需要一个名为 <code>lodash</code> 的依赖，这个依赖在 consumer 环境中必须存在且可用。</p> <blockquote class="tip"> <p>注意，如果你仅计划将 library 用作另一个 webpack bundle 中的依赖模块，则可以直接将 <code>externals</code> 指定为一个数组。</p> </blockquote> <h2 id="external-limitations">外部化的限制 <a href="#external-limitations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>对于想要实现从一个依赖中调用多个文件的那些 library：</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token constant">A</span> <span class="token keyword">from</span> <span class="token string">\'library/one\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">\'library/two\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span></code></pre> <p>无法通过在 externals 中指定整个 <code>library</code> 的方式，将它们从 bundle 中排除。而是需要逐个或者使用一个正则表达式，来排除它们。</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'library/one\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'library/two\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// 匹配以 "library/" 开始的所有依赖</span>\n    <span class="token operator">/</span><span class="token operator">^</span>library\\<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="expose-the-library">暴露 library <a href="#expose-the-library" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>对于用法广泛的 library，我们希望它能够兼容不同的环境，例如 CommonJS，AMD，Node.js 或者作为一个全局变量。为了让你的 library 能够在各种使用环境中可用，需要在 <code>output</code> 中添加 <code>library</code> 属性：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'webpack-numbers.js\'/*tpa=https://webpack.docschina.org/webpack-numbers.js*/,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     library: \'webpackNumbers\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   externals: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     lodash: {\n</span><span class="token prefix unchanged"> </span><span class="token line">       commonjs: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       commonjs2: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       amd: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       root: \'_\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     },\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <blockquote class="tip"> <p>注意，<code>library</code> 设置绑定到 <code>entry</code> 配置。对于大多数 library，指定一个入口起点就足够了。虽然 <a href="https://github.com/webpack/webpack/tree/master/examples/multi-part-library">一次打包暴露多个库</a> 也是也可以的，然而，通过 <a href="https://stackoverflow.com/questions/34072598/es6-exporting-importing-in-index-file">index script(索引脚本)（仅用于访问一个入口起点）</a> 暴露部分导出则更为简单。我们__不推荐__使用<code>数组</code>作为 library 的 <code>entry</code>。</p> </blockquote> <p>这会将你的 library bundle 暴露为名为 <code>webpackNumbers</code> 的全局变量，consumer 通过此名称来 import。为了让 library 和其他环境兼容，则需要在配置中添加 <code>libraryTarget</code> 属性。这个选项可以控制以多种形式暴露 library。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'webpack-numbers.js\'/*tpa=https://webpack.docschina.org/webpack-numbers.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">     library: \'webpackNumbers\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     libraryTarget: \'umd\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   externals: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     lodash: {\n</span><span class="token prefix unchanged"> </span><span class="token line">       commonjs: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       commonjs2: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       amd: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       root: \'_\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     },\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>有以下几种方式暴露 library：</p> <ul> <li>变量：作为一个全局变量，通过 <code>script</code> 标签来访问（<code>libraryTarget:\'var\'</code>）。</li> <li>this：通过 <code>this</code> 对象访问（<code>libraryTarget:\'this\'</code>）。</li> <li>window：在浏览器中通过 <code>window</code> 对象访问（<code>libraryTarget:\'window\'</code>）。</li> <li>UMD：在 AMD 或 CommonJS <code>require</code> 之后可访问（<code>libraryTarget:\'umd\'</code>）。</li> </ul> <p>如果设置了 <code>library</code> 但没有设置 <code>libraryTarget</code>，则 <code>libraryTarget</code> 默认指定为 <code>var</code>，详细说明请查看 <a href="configuration/output.htm"/*tpa=https://webpack.docschina.org/configuration/output*/>output </a> 文档。查看 <a href="configuration/output.htm#outputlibrarytarget"/*tpa=https://webpack.docschina.org/configuration/output#outputlibrarytarget*/><code>output.libraryTarget</code></a> 文档，以获取所有可用选项的详细列表。</p> <blockquote class="warning"> <p>在 webpack v3.5.5 中，使用 <code>libraryTarget: { root:\'_\' }</code> 将无法正常工作（参考 <a href="https://github.com/webpack/webpack/issues/4824">issue 4824</a>) 所述）。然而，可以设置 <code>libraryTarget: { var: \'_\' }</code> 来将 library 作为全局变量。</p> </blockquote> <h3 id="final-steps">最终步骤 <a href="#final-steps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>遵循 <a href="guides/production.htm"/*tpa=https://webpack.docschina.org/guides/production*/>生产环境</a> 指南中提到的步骤，来优化生产环境下的输出结果。那么，我们还需要将生成 bundle 的文件路径，添加到 <code>package.json</code> 中的 <code>main</code> 字段中。</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/webpack-numbers.js"/*tpa=https://webpack.docschina.org/dist/webpack-numbers.js*/</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span></code></pre> <p>或者，按照这个 <a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage">指南</a>，将其添加为标准模块：</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"src/index.js"/*tpa=https://webpack.docschina.org/src/index.js*/</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span></code></pre> <p>这里的 key(键) <code>main</code> 是参照 <a href="https://docs.npmjs.com/files/package.json#main"><code>package.json</code> 标准</a>，而 <code>module</code> 是参照 <a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md">一个</a><a href="https://github.com/rollup/rollup/wiki/pkg.module">提案</a>，此提案允许 JavaScript 生态系统升级使用 ES2015 模块，而不会破坏向后兼容性。</p> <blockquote class="warning"> <p><code>module</code> 属性应指向一个使用 ES2015 模块语法的脚本，但不包括浏览器或 Node.js 尚不支持的其他语法特性。这使得 webpack 本身就可以解析模块语法，如果用户只用到 library 的某些部分，则允许通过 <a href="guides/tree-shaking/index.htm"/*tpa=https://webpack.docschina.org/guides/tree-shaking/*/>tree shaking</a> 打包更轻量的包。</p> </blockquote> <p>现在，你可以 <a href="https://docs.npmjs.com/getting-started/publishing-npm-packages">将其发布为一个 npm package</a>，并且在 <a href="https://unpkg.com/#/">unpkg.com</a> 找到它，并分发给你的用户。</p> <blockquote class="tip"> <p>为了暴露和 library 关联着的样式表，你应该使用 <a href="plugins/mini-css-extract-plugin.htm"/*tpa=https://webpack.docschina.org/plugins/mini-css-extract-plugin*/><code>MiniCssExtractPlugin</code></a>。然后，用户可以像使用其他样式表一样使用和加载这些样式表。</p> </blockquote> '}}]);