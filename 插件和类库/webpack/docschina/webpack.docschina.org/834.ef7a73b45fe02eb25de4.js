(self.webpackChunk=self.webpackChunk||[]).push([[834],{834:function(n){n.exports='<blockquote class="tip"> <p>本指南继续沿用 <a href="guides/getting-started/index.htm"/*tpa=https://webpack.docschina.org/guides/getting-started/*/><em>起步</em></a> 中的代码示例。</p> </blockquote> <p><a href="https://www.typescriptlang.org/">TypeScript</a> 是 JavaScript 的超集，为其增加了类型系统，可以编译为普通 JavaScript 代码。这篇指南里我们将会学习是如何将 webpack 和 TypeScript 进行集成。</p> <h2 id="basic-setup">基础配置 <a href="#basic-setup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>首先，执行以下命令安装 TypeScript compiler 和 loader：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript ts-loader</code></pre> <p>现在，我们将修改目录结构和配置文件：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- tsconfig.json\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- index.ts\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>tsconfig.json</strong></p> <p>这里我们设置一个基本的配置，来支持 JSX，并将 TypeScript 编译到 ES5……</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist/"</span><span class="token punctuation">,</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>\n    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>\n    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>查看 <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">TypeScript 官方文档</a> 了解更多关于 <code>tsconfig.json</code> 的配置选项。</p> <p>想要了解 webpack 配置的更多信息，请查看 <a href="concepts/configuration/index.htm"/*tpa=https://webpack.docschina.org/concepts/configuration/*/>配置</a> 概念。</p> <p>现在，配置 webpack 处理 TypeScript：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'https://webpack.docschina.org/src/index.ts\'</span><span class="token punctuation">,</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">\'.tsx\'</span><span class="token punctuation">,</span> <span class="token string">\'.ts\'</span><span class="token punctuation">,</span> <span class="token string">\'.js\'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>这会让 webpack 直接从 <code>./index.ts</code> <em>进入</em>，然后通过 <code>ts-loader</code> _加载_所有的 <code>.ts</code> 和 <code>.tsx</code> 文件，并且在当前目录_输出_一个 <code>bundle.js</code> 文件。</p> <p>现在让我们改变 <code>lodash</code> 在 <code>./index.ts</code> 文件中的引入， 因为在 <code>lodash</code> 的定义中没有默认(default)的导出。</p> <p><strong>./index.ts</strong></p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import _ from \'lodash\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import * as _ from \'lodash\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());</span></span></code></pre> <blockquote class="tip"> <p>如果想在 TypeScript 中保留如<code>import _ from \'lodash\';</code>的语法被让它作为一种默认的导入方式，需要在文件 <strong>tsconfig.json</strong> 中设置<code>"allowSyntheticDefaultImports" : true</code> 和 <code>"esModuleInterop" : true</code> 。这个是与 TypeScript 相关的配置，在本文档中提及仅供参考。</p> </blockquote> <h2 id="loader">Loader <a href="#loader" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/TypeStrong/ts-loader"><code>ts-loader</code></a></p> <p>在本指南中，我们使用 <code>ts-loader</code>，因为它能够很方便地启用额外的 webpack 功能，例如将其他 web 资源导入到项目中。</p> <blockquote class="warning"> <p><code>ts-loader</code> uses <code>tsc</code>, the TypeScript compiler, and relies on your <code>tsconfig.json</code> configuration. Make sure to avoid setting <a href="https://www.typescriptlang.org/tsconfig#module"><code>module</code></a> to "CommonJS", or webpack won\'t be able to <a href="guides/tree-shaking.htm"/*tpa=https://webpack.docschina.org/guides/tree-shaking*/>tree-shake your code</a>.</p> </blockquote> <p>Note that if you\'re already using <a href="https://github.com/babel/babel-loader"><code>babel-loader</code></a> to transpile your code, you can use <a href="https://babeljs.io/docs/en/babel-preset-typescript"><code>@babel/preset-typescript</code></a> and let Babel handle both your JavaScript and TypeScript files instead of using an additional loader. Keep in mind that, contrary to <code>ts-loader</code>, the underlying <a href="https://babeljs.io/docs/en/babel-plugin-transform-typescript"><code>@babel/plugin-transform-typescript</code></a> plugin does not perform any type checking.</p> <h2 id="source-maps">Source Maps <a href="#source-maps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>想要了解 source map 的更多信息，请查看 <a href="guides/development.htm"/*tpa=https://webpack.docschina.org/guides/development*/>开发</a> 指南。</p> <p>想要启用 source map，我们必须配置 TypeScript，以将内联的 source map 输出到编译后的 JavaScript 文件中。必须在 TypeScript 配置中添加下面这行：</p> <p><strong>tsconfig.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> {\n</span><span class="token prefix unchanged"> </span><span class="token line">   "compilerOptions": {\n</span><span class="token prefix unchanged"> </span><span class="token line">     "outDir": "./dist/",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     "sourceMap": true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     "noImplicitAny": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">     "module": "commonjs",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "target": "es5",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "jsx": "react",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "allowJs": true\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p>现在，我们需要告诉 webpack 提取这些 source map，并内联到最终的 bundle 中。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'https://webpack.docschina.org/src/index.ts\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   devtool: \'inline-source-map\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">       {\n</span><span class="token prefix unchanged"> </span><span class="token line">         test: /\\.tsx?$/,\n</span><span class="token prefix unchanged"> </span><span class="token line">         use: \'ts-loader\',\n</span><span class="token prefix unchanged"> </span><span class="token line">         exclude: /node_modules/,\n</span><span class="token prefix unchanged"> </span><span class="token line">       },\n</span><span class="token prefix unchanged"> </span><span class="token line">     ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   resolve: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     extensions: [ \'.tsx\', \'.ts\', \'.js\' ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>查看 <a href="configuration/devtool/index.htm"/*tpa=https://webpack.docschina.org/configuration/devtool/*/>devtool</a> 文档以了解更多信息。</p> <h2 id="using-third-party-libraries">使用第三方类库 <a href="#using-third-party-libraries" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在从 npm 安装 third party library(第三方库) 时，一定要记得同时安装此 library 的类型声明文件(typing definition)。你可以从 <a href="https://microsoft.github.io/TypeSearch/">TypeSearch</a> 中找到并安装这些第三方库的类型声明文件。</p> <p>举个例子，如果想安装 lodash 类型声明文件，我们可以运行下面的命令：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @types/lodash</code></pre> <p>想了解更多，可以查看 <a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/">这篇文章</a>。</p> <h2 id="importing-other-assets">导入其他资源 <a href="#importing-other-assets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>想要在 TypeScript 中使用非代码资源(non-code asset)，我们需要告诉 TypeScript 推断导入资源的类型。在项目里创建一个 <code>custom.d.ts</code> 文件，这个文件用来表示项目中 TypeScript 的自定义类型声明。我们为 <code>.svg</code> 文件设置一个声明：</p> <p><strong>custom.d.ts</strong></p> <pre><code class="hljs language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.svg"</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> content<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>H这里，我们通过指定任何以 <code>.svg</code> 结尾的导入(import)，将 SVG 声明(declare) 为一个新的模块(module)，并将模块的 <code>content</code> 定义为 <code>any</code>。我们可以通过将类型定义为字符串，来更加显式地将它声明为一个 url。同样的概念适用于其他资源，包括 CSS, SCSS, JSON 等。</p> <h2 id="build-performance">构建性能 <a href="#build-performance" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <blockquote class="warning"> <p>这可能会降低构建性能。</p> </blockquote> <p>关于构建工具，请查看<a href="guides/build-performance/index.htm"/*tpa=https://webpack.docschina.org/guides/build-performance/*/>构建性能</a>指南。</p> '}}]);