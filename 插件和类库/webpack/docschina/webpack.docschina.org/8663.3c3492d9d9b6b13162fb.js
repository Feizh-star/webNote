(self.webpackChunk=self.webpackChunk||[]).push([[8663],{8663:function(e){e.exports='<p>每当一个文件依赖另一个文件时，webpack 都会将文件视为直接存在 <em>依赖关系</em>。这使得 webpack 可以获取非代码资源，如 images 或 web 字体等。并会把它们作为 <em>依赖</em> 提供给应用程序。</p> <p>当 webpack 处理应用程序时，它会根据命令行参数中或配置文件中定义的模块列表开始处理。 从 <a href="concepts/entry-points/index.htm"/*tpa=https://webpack.docschina.org/concepts/entry-points/*/><em>入口</em></a> 开始，webpack 会递归的构建一个_依赖关系图_，这个依赖图包含着应用程序中所需的每个模块，然后将所有模块打包为少量的 <em>bundle</em> —— 通常只有一个 —— 可由浏览器加载。</p> <blockquote class="tip"> <p>对于 <em>HTTP/1.1</em> 的应用程序来说，由 webpack 构建的 bundle 非常强大。当浏览器发起请求时，它能最大程度的减少应用的等待时间。而对于 <em>HTTP/2</em> 来说，你还可以使用<a href="guides/code-splitting/index.htm"/*tpa=https://webpack.docschina.org/guides/code-splitting/*/>代码分割</a>进行进一步优化。</p> </blockquote> '}}]);