(self.webpackChunk=self.webpackChunk||[]).push([[8834],{8834:function(n){n.exports='<p>以下各节描述从 webpack 1 到 webpack 2 的重大变化。</p> <blockquote class="tip"> <p>注意：webpack 从 1 到 2 的变化，比从 2 到 3 要少很多，所以版本迁移起来难度应该不大。如果你遇到了问题，请查看<a href="https://github.com/webpack/webpack/releases">更新日志</a> 以了解更多细节。</p> </blockquote> <h2 id="resolveroot-resolvefallback-resolvemodulesdirectories"><code>resolve.root</code>, <code>resolve.fallback</code>, <code>resolve.modulesDirectories</code> <a href="#resolveroot-resolvefallback-resolvemodulesdirectories" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>这些选项被一个单独的选项 <code>resolve.modules</code> 取代。更多用法请查看 <a href="configuration/resolve.htm"/*tpa=https://webpack.docschina.org/configuration/resolve*/>resolving</a> 。</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> resolve: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   root: path.join(__dirname, "src")\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   modules: [\n</span><span class="token prefix inserted">+</span><span class="token line">     path.join(__dirname, "src"),\n</span><span class="token prefix inserted">+</span><span class="token line">     "node_modules"\n</span><span class="token prefix inserted">+</span><span class="token line">   ]\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <h2 id="resolveextensions"><code>resolve.extensions</code> <a href="#resolveextensions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>此选项不再需要传一个空字符串。此行为被迁移到 <code>resolve.enforceExtension</code> 。更多用法请查看 <a href="configuration/resolve.htm"/*tpa=https://webpack.docschina.org/configuration/resolve*/>解析</a> 。</p> <h2 id="resolve"><code>resolve.*</code> <a href="#resolve" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>这里更改了几个 API 。由于不常用，不在这里详细列出。更多用法请查看 <a href="configuration/resolve.htm"/*tpa=https://webpack.docschina.org/configuration/resolve*/>解析</a> 。</p> <h2 id="moduleloaders-is-now-modulerules"><code>module.loaders</code> 升级为 <code>module.rules</code> <a href="#moduleloaders-is-now-modulerules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>旧的 loader 配置被更强大的 rules 系统取代，后者允许配置 loader 以及其他更多选项。 为了兼容旧版，<code>module.loaders</code> 语法仍然有效，旧的属性名依然可以被解析。 新的命名约定更易于理解，并且是升级配置使用 <code>module.rules</code> 的好理由。</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   loaders: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   rules: [\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     {\n</span><span class="token prefix unchanged"> </span><span class="token line">       test: /\\.css$/,\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">       loaders: [\n</span><span class="token prefix deleted">-</span><span class="token line">         "style-loader",\n</span><span class="token prefix deleted">-</span><span class="token line">         "css-loader?modules=true"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       use: [\n</span><span class="token prefix inserted">+</span><span class="token line">         {\n</span><span class="token prefix inserted">+</span><span class="token line">           loader: "style-loader"\n</span><span class="token prefix inserted">+</span><span class="token line">         },\n</span><span class="token prefix inserted">+</span><span class="token line">         {\n</span><span class="token prefix inserted">+</span><span class="token line">           loader: "css-loader",\n</span><span class="token prefix inserted">+</span><span class="token line">           options: {\n</span><span class="token prefix inserted">+</span><span class="token line">             modules: true\n</span><span class="token prefix inserted">+</span><span class="token line">           }\n</span><span class="token prefix inserted">+</span><span class="token line">         }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       ]\n</span><span class="token prefix unchanged"> </span><span class="token line">     },\n</span><span class="token prefix unchanged"> </span><span class="token line">     {\n</span><span class="token prefix unchanged"> </span><span class="token line">       test: /\\.jsx$/,\n</span><span class="token prefix unchanged"> </span><span class="token line">       loader: "babel-loader", // 在这里不要使用 "use" \n</span><span class="token prefix unchanged"> </span><span class="token line">       options: {\n</span><span class="token prefix unchanged"> </span><span class="token line">         // ...\n</span><span class="token prefix unchanged"> </span><span class="token line">       }\n</span><span class="token prefix unchanged"> </span><span class="token line">     }\n</span><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <h2 id="chaining-loaders">链式 loaders <a href="#chaining-loaders" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>就像在 webpack 1 中，loader 可以链式调用，上一个 loader 的输出被作为输入传给下一个 loader。 使用 <a href="configuration/module/index.htm#ruleuse"/*tpa=https://webpack.docschina.org/configuration/module/#ruleuse*/>rule.use</a> 配置选项，<code>use</code> 可以设置为一个 loader 数组。 在 webpack 1 中，loader 通常被用 <code>!</code> 连写。这一写法在 webpack 2 中只在使用旧的选项 <code>module.loaders</code> 时才有效。</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   loaders: [{\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   rules: [{\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     test: /\\.less$/,\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     loader: "style-loader!css-loader!less-loader"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     use: [\n</span><span class="token prefix inserted">+</span><span class="token line">       "style-loader",\n</span><span class="token prefix inserted">+</span><span class="token line">       "css-loader",\n</span><span class="token prefix inserted">+</span><span class="token line">       "less-loader"\n</span><span class="token prefix inserted">+</span><span class="token line">     ]\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   }]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <h2 id="automatic--loader-module-name-extension-removed">已移除 <code>-loader</code> 模块名称自动扩展 <a href="#automatic--loader-module-name-extension-removed" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在引用 loader 时，不能再省略 <code>-loader</code> 后缀了:</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">   rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     {\n</span><span class="token prefix unchanged"> </span><span class="token line">       use: [\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">         "style",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">         "style-loader",\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">         "css",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">         "css-loader",\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">         "less",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">         "less-loader",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       ]\n</span><span class="token prefix unchanged"> </span><span class="token line">     }\n</span><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p>你仍然可以通过配置 <code>resolveLoader.moduleExtensions</code> 配置选项，启用这一旧有行为，但是我们不推荐这么做。</p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> resolveLoader: {\n</span><span class="token prefix inserted">+</span><span class="token line">   moduleExtensions: ["-loader"]\n</span><span class="token prefix inserted">+</span><span class="token line"> }</span></span></code></pre> <p>了解这一改变背后的原因，请查看 <a href="https://github.com/webpack/webpack/issues/2986">#2986</a> 。</p> <h2 id="json-loader-is-not-required-anymore"><code>json-loader</code> 不再需要手动添加 <a href="#json-loader-is-not-required-anymore" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>如果没有为 JSON 文件配置 loader，webpack 将自动尝试通过 [<code>json-loader</code>] (<a href="https://github.com/webpack-contrib/json-loader">https://github.com/webpack-contrib/json-loader</a>) 加载 JSON 文件。</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">   rules: [\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     {\n</span><span class="token prefix deleted">-</span><span class="token line">       test: /\\.json/,\n</span><span class="token prefix deleted">-</span><span class="token line">       loader: "json-loader"\n</span><span class="token prefix deleted">-</span><span class="token line">     }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p><a href="https://github.com/webpack/webpack/issues/3363">我们决定这样做</a> 是为了消除 webpack、 node.js 和 browserify 之间的环境差异。</p> <h2 id="loaders-in-configuration-resolve-relative-to-context">配置中的 loader 默认相对于 context 进行解析 <a href="#loaders-in-configuration-resolve-relative-to-context" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在 <strong>webpack 1</strong> 中，默认配置下 loader 解析相对于被匹配的文件。然而，在 <strong>webpack 2</strong> 中，默认配置下 loader 解析相对于 <code>context</code> 选项。</p> <p>这解决了「在使用 <code>npm link</code> 或引用 <code>context</code> 上下文目录之外的模块时，loader 所导致的模块重复载入」的问题。</p> <p>你可以移除掉那些为解决此问题的 hack 方案了：</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">   rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     {\n</span><span class="token prefix unchanged"> </span><span class="token line">       // ...\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">       loader: require.resolve("my-loader")\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       loader: "my-loader"\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     }\n</span><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> },\n</span><span class="token prefix unchanged"> </span><span class="token line"> resolveLoader: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   root: path.resolve(__dirname, "node_modules")\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <h2 id="modulepreloaders-and-modulepostloaders-were-removed">移除了 <code>module.preLoaders</code> 和 <code>module.postLoaders</code>： <a href="#modulepreloaders-and-modulepostloaders-were-removed" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   preLoaders: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   rules: [\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     {\n</span><span class="token prefix unchanged"> </span><span class="token line">       test: /\\.js$/,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       enforce: "pre",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       loader: "eslint-loader"\n</span><span class="token prefix unchanged"> </span><span class="token line">     }\n</span><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <h2 id="uglifyjsplugin-sourcemap"><code>UglifyJsPlugin</code> sourceMap <a href="#uglifyjsplugin-sourcemap" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>UglifyJsPlugin</code> 的 <code>sourceMap</code> 选项现在默认为 <code>false</code> 而不是 <code>true</code>。这意味着如果你在压缩代码时启用了 <code>source map</code>，或者想要让 <code>uglifyjs</code> 的警告能够对应到正确的代码行，你需要将 <code>UglifyJsPlugin</code> 的 <code>sourceMap</code> 设为 <code>true</code> 。</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> devtool: "source-map",\n</span><span class="token prefix unchanged"> </span><span class="token line"> plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">   new UglifyJsPlugin({\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     sourceMap: true\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   })\n</span><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span></code></pre> <h2 id="uglifyjsplugin-warnings"><code>UglifyJsPlugin</code> warnings <a href="#uglifyjsplugin-warnings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>UglifyJsPlugin</code> 的 <code>compress.warnings</code> 选项现在默认为 <code>false</code> 而不是 <code>true</code> 。 这意味着如果你想要看到 <code>uglifyjs</code> 的警告信息，你需要将 <code>compress.warnings</code> 设为 <code>true。</code></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> devtool: "source-map",\n</span><span class="token prefix unchanged"> </span><span class="token line"> plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">   new UglifyJsPlugin({\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     compress: {\n</span><span class="token prefix inserted">+</span><span class="token line">       warnings: true\n</span><span class="token prefix inserted">+</span><span class="token line">     }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   })\n</span><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span></code></pre> <h2 id="uglifyjsplugin-minimize-loaders"><code>UglifyJsPlugin</code> 压缩优化 loaders <a href="#uglifyjsplugin-minimize-loaders" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>UglifyJsPlugin</code> 不再压缩 loaders。在未来很长一段时间里，需要通过设置 <code>minimize:true</code> 来压缩 loaders。参考 loader 文档里的相关选项。</p> <p>loaders 的压缩模式将在 webpack 3 或后续版本中取消。</p> <p>为了兼容旧的 loaders，loaders 可以通过插件来切换到压缩模式：</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> plugins: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   new webpack.LoaderOptionsPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">     minimize: true\n</span><span class="token prefix inserted">+</span><span class="token line">   })\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span></code></pre> <h2 id="dedupeplugin-has-been-removed">移除 <code>DedupePlugin</code> <a href="#dedupeplugin-has-been-removed" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>不再需要 <code>webpack.optimize.DedupePlugin</code>。请从配置中移除。</p> <h2 id="bannerplugin---breaking-change"><code>BannerPlugin</code> - 破坏性改动 <a href="#bannerplugin---breaking-change" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>BannerPlugin</code> 不再接受两个参数，而是只接受单独的 options 对象。</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> plugins: [\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    new webpack.BannerPlugin(\'Banner\', {raw: true, entryOnly: true});\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    new webpack.BannerPlugin({banner: \'Banner\', raw: true, entryOnly: true});\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span></code></pre> <h2 id="occurrenceorderplugin-is-now-on-by-default">默认加载 <code>OccurrenceOrderPlugin</code> <a href="#occurrenceorderplugin-is-now-on-by-default" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>OccurrenceOrderPlugin</code> 现在默认启用，并已重命名(在webpack 1 中为 <code>OccurenceOrderPlugin</code>) 。 因此，请确保从你的配置中删除该插件：</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">   // webpack 1\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   new webpack.optimize.OccurenceOrderPlugin()\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // webpack 2\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   new webpack.optimize.OccurrenceOrderPlugin()\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span></code></pre> <h2 id="extracttextwebpackplugin---breaking-change"><code>ExtractTextWebpackPlugin</code> - 破坏性改动 <a href="#extracttextwebpackplugin---breaking-change" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/webpack-contrib/extract-text-webpack-plugin">ExtractTextPlugin</a> 需要使用版本 2，才能在 webpack 2 下正常运行 。</p> <p><code>npm install --save-dev extract-text-webpack-plugin</code></p> <p>这一插件的配置变化主要体现在语法上。</p> <h3 id="extracttextpluginextract"><code>ExtractTextPlugin.extract</code> <a href="#extracttextpluginextract" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-diff">module: {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">   {\n</span><span class="token prefix unchanged"> </span><span class="token line">     test: /.css$/,\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      loader: ExtractTextPlugin.extract("style-loader", "css-loader", { publicPath: "/dist" })\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      use: ExtractTextPlugin.extract({\n</span><span class="token prefix inserted">+</span><span class="token line">        fallback: "style-loader",\n</span><span class="token prefix inserted">+</span><span class="token line">        use: "css-loader",\n</span><span class="token prefix inserted">+</span><span class="token line">        publicPath: "/dist"\n</span><span class="token prefix inserted">+</span><span class="token line">      })\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> ]\n</span></span>}</code></pre> <h3 id="new-extracttextpluginoptions"><code>new ExtractTextPlugin({options})</code> <a href="#new-extracttextpluginoptions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-diff">plugins: [\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  new ExtractTextPlugin("bundle.css"/*tpa=https://webpack.docschina.org/bundle.css*/, { allChunks: true, disable: false })\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  new ExtractTextPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">    filename: "bundle.css"/*tpa=https://webpack.docschina.org/bundle.css*/,\n</span><span class="token prefix inserted">+</span><span class="token line">    disable: false,\n</span><span class="token prefix inserted">+</span><span class="token line">    allChunks: true\n</span><span class="token prefix inserted">+</span><span class="token line">  })\n</span></span>]</code></pre> <h2 id="full-dynamic-requires-now-fail-by-default">全动态 require 现在默认会失败 <a href="#full-dynamic-requires-now-fail-by-default" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>只有一个表达式的依赖（例如 <code>require(expr)</code>）将创建一个空的 context 而不是一个完整目录的 context。</p> <p>这样的代码应该进行重构，因为它不能与 ES2015 模块一起使用。如果你确定不会有 ES2015 模块，你可以使用 <code>ContextReplacementPlugin</code> 来指示 compiler 进行正确的解析。</p> <blockquote class="todo"> <p>Link to an article about dynamic dependencies.</p> </blockquote> <h3 id="using-custom-arguments-in-cli-and-configuration">在 CLI 和配置中使用自定义参数 <a href="#using-custom-arguments-in-cli-and-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>如果你之前滥用 CLI 来传自定义参数到配置中，比如：</p> <p><code>webpack --custom-stuff</code></p> <pre><code class="hljs language-js"><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">var</span> customStuff <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'--custom-stuff\'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token comment">/* ... */</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span></code></pre> <p>你将会发现新版中不再允许这么做。CLI 现在更加严格了。</p> <p>替代地，现在提供了一个接口来传递参数给配置。我们应该采用这种新方式，在未来许多工具将可能依赖于此。</p> <p><code>webpack --env.customStuff</code></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> customStuff <span class="token operator">=</span> env<span class="token punctuation">.</span>customStuff<span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n  <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>详见 <a href="api/cli.htm"/*tpa=https://webpack.docschina.org/api/cli*/>CLI</a> 。</p> <h2 id="requireensure-and-amd-require-are-asynchronous"><code>require.ensure</code> 以及 AMD <code>require</code> 将采用异步式调用 <a href="#requireensure-and-amd-require-are-asynchronous" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>现在这些函数总是异步的，而不是当 chunk 已经加载完成的时候同步调用它们的回调函数 (callback) 。</p> <p><strong><code>require.ensure</code> 现在依赖原生的 <code>Promise</code>s 。如果不支持 Promise 的环境中使用 <code>require.ensure</code> ，你需要添加 polyfill.</strong> 。</p> <h2 id="loader-configuration-is-through-options">通过 <code>options</code> 中配置 loader <a href="#loader-configuration-is-through-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>你_不能再_通过 <code>webpack.config.js</code> 的自定义属性来配置 loader 。只能通过 <code>options</code> 来配置。下面配置的 <code>ts</code> 属性在 webpack 2 下不再有效：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      loader<span class="token operator">:</span> <span class="token string">\'ts-loader\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 在 webpack 2 中无效</span>\n  ts<span class="token operator">:</span> <span class="token punctuation">{</span> transpileOnly<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="what-are-options">什么是 <code>options</code> ？ <a href="#what-are-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>好问题。严格来说，有两种办法，都可以用来配置 webpack 的 loader 。典型的 <code>options</code> 被称为 <code>query</code>，是一个可以被添加到 loader 名之后的字符串。它比较像一个查询字符串(query string)，但是实际上有<a href="https://github.com/webpack/loader-utils#parsequery">更强大的能力</a>:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      loader<span class="token operator">:</span> <span class="token string">\'ts-loader?\'</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> transpileOnly<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>不过它也可以分开来，写成一个单独的对象，紧跟在 loader 属性后面：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      loader<span class="token operator">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token operator">:</span>  <span class="token punctuation">{</span> transpileOnly<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="loaderoptionsplugin-context"><code>LoaderOptionsPlugin</code> context <a href="#loaderoptionsplugin-context" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>有的 loader 需要从配置中读取一些 context 信息。在未来很长一段时间里，这将需要通过 loader options 传入。详见 loader 文档的相关选项。</p> <p>为了保持对旧 loaders 的兼容，这些信息可以通过插件传进来：</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> plugins: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   new webpack.LoaderOptionsPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">     options: {\n</span><span class="token prefix inserted">+</span><span class="token line">       context: __dirname\n</span><span class="token prefix inserted">+</span><span class="token line">     }\n</span><span class="token prefix inserted">+</span><span class="token line">   })\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span></code></pre> <h2 id="debug"><code>debug</code> <a href="#debug" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在 webpack 1 中 <code>debug</code> 选项可以将 loader 切换到调试模式 (debug mode) 。在未来很长一段时间里，这将需要通过 loader 选项传递。详见 loader 文档的相关选项。</p> <p>loaders 的调试模式将在 webpack 3 或后续版本中取消。</p> <p>为了保持对旧 loaders 的兼容，loader 可以通过插件来切换到调试模式：</p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> debug: true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> plugins: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   new webpack.LoaderOptionsPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">     debug: true\n</span><span class="token prefix inserted">+</span><span class="token line">   })\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span></code></pre> <h2 id="code-splitting-with-es2015">ES2015 的代码分割 <a href="#code-splitting-with-es2015" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在 webpack 1 中，可以使用 <a href="api/module-methods/index.htm#requireensure"/*tpa=https://webpack.docschina.org/api/module-methods/#requireensure*/><code>require.ensure()</code></a> 作为实现应用程序的懒加载 chunks 的一种方法：</p> <pre><code class="hljs language-javascript">require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>ES2015 模块加载规范定义了 <a href="api/module-methods/index.htm#import-1"/*tpa=https://webpack.docschina.org/api/module-methods/#import-1*/><code>import()</code></a> 方法，可以在运行时 (runtime) 动态地加载 ES2015 模块。webpack 将 <code>import()</code> 作为分割点 (split-point) 并将所要请求的模块 (requested module) 放置到一个单独的 chunk 中。<code>import()</code> 接收模块名作为参数，并返回一个 Promise 。</p> <pre><code class="hljs language-js"><span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./module\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Chunk loading failed\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>好消息是：如果加载 chunk 失败，我们现在可以进行处理，因为现在它基于 <code>Promise</code>。</p> <h2 id="dynamic-expressions">动态表达式 <a href="#dynamic-expressions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>可以传递部分表达式给 <code>import()</code> 。这与 CommonJS 对表达式的处理方式一致（webpack 为所有可能匹配的文件创建 context](/plugins/context-replacement-plugin/)) ）。</p> <p><code>import()</code> 为每一个可能的模块创建独立的 chunk。</p> <pre><code class="hljs language-js"><span class="token keyword">function</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./routes/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/route</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">route</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">route<span class="token punctuation">.</span>Route</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 上面代码为每个可能的路由创建独立的 chunk</span></code></pre> <h2 id="mixing-es2015-with-amd-and-commonjs">混合使用 ES2015、AMD 和 CommonJS <a href="#mixing-es2015-with-amd-and-commonjs" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>你可以自由混合使用三种模块类型（甚至在同一个文件中）。在这个情况中 webpack 的行为和 babel 以及 node-eps 一致：</p> <pre><code class="hljs language-javascript"><span class="token comment">// CommonJS 调用 ES2015 模块</span>\n<span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./book\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbook<span class="token punctuation">.</span>currentPage<span class="token punctuation">;</span>\nbook<span class="token punctuation">.</span><span class="token function">readPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbook<span class="token punctuation">.</span>default <span class="token operator">===</span> <span class="token string">\'This is a book\'</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-javascript"><span class="token comment">// ES2015 模块调用 CommonJS</span>\n<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">\'fs\'</span><span class="token punctuation">;</span> <span class="token comment">// module.exports 映射到 default</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> readFileSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'fs\'</span><span class="token punctuation">;</span> <span class="token comment">// 从返回对象(returned object+)中读取命名的导出方法(named exports)</span>\n\n<span class="token keyword">typeof</span> fs<span class="token punctuation">.</span>readFileSync <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> readFileSync <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">;</span></code></pre> <p>值得注意的是，你需要让 Babel 不解析这些模块符号，从而让 webpack 可以使用它们。你可以通过设置如下配置到 .babelrc 或 babel-loader 来实现这一点。</p> <p><strong>.babelrc</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="hints">Hints <a href="#hints" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>不需要改变什么，但有机会改变。</p> <h3 id="template-strings">模版字符串 <a href="#template-strings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 现在支持表达式中的模板字符串了。这意味着你可以在 webpack 构建中使用它们：</p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> require("./templates/" + name);\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> require(`./templates/${name}`);</span></span></code></pre> <h3 id="configuration-promise">配置中使用 Promise <a href="#configuration-promise" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 现在支持在配置文件中返回 <code>Promise</code> 了。这让你能在配置文件中做异步处理。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">fetchLangs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">lang</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    entry<span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">LANGUAGE</span><span class="token operator">:</span> lang <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="advanced-loader-matching">高级 loader 匹配 <a href="#advanced-loader-matching" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>webpack 现在支持对 loader 进行更多方式的匹配。</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        resource<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">filename</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 匹配 "path/filename.js"/*tpa=https://webpack.docschina.org/path/filename.js*/</span>\n        resourceQuery<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\?querystring$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 匹配 "?querystring"</span>\n        issuer<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">filename</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 如果请求 "path/filename.js"/*tpa=https://webpack.docschina.org/path/filename.js*/ 则匹配 "path/something.js"/*tpa=https://webpack.docschina.org/path/something.js*/</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="more-cli-options">更多的 CLI 参数项 <a href="#more-cli-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>你可以使用一些新的 CLI 参数项：</p> <p><code>--define process.env.NODE_ENV="production"</code> 见 <a href="plugins/define-plugin/index.htm"/*tpa=https://webpack.docschina.org/plugins/define-plugin/*/><code>DefinePlugin</code></a> 。</p> <p><code>--display-depth</code> 显示每个模块到入口的距离。</p> <p><code>--display-used-exports</code> 显示一个模块中被使用的 exports 信息。</p> <p><code>--display-max-modules</code> 设置输出时显示的模块数量（默认是 15）。</p> <p><code>-p</code> 能够定义<code>process.env.NODE_ENV</code> 为 <code>"production"</code> 。</p> <h2 id="loader-changes">Loader 变更 <a href="#loader-changes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>以下变更仅影响 loader 的开发者。</p> <h3 id="cacheable">Cacheable <a href="#cacheable" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Loaders 现在默认可被缓存。Loaders 如果不想被缓存，需要选择不被缓存。</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // 缓存 loader\n</span><span class="token prefix unchanged"> </span><span class="token line"> module.exports = function(source) {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   this.cacheable();\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return source;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // 不缓存 loader\n</span><span class="token prefix unchanged"> </span><span class="token line"> module.exports = function(source) {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.cacheable(false);\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return source;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <h3 id="complex-options">复杂 options <a href="#complex-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack 1</strong> 只支持能够「可 <code>JSON.stringify</code> 的对象」作为 loader 的 options。</p> <p><strong>webpack 2</strong> 现在支持任意 JS 对象作为 loader 的 options。</p> <p>webpack <a href="https://github.com/webpack/webpack/releases/tag/v2.2.1">2.2.1</a> 之前（即从 2.0.0 到 2.2.0），使用复合 <code>options</code> ，需要在 <code>options</code> 对象上添加 <code>ident</code>，允许它能够被其他 loader 引用。这 <strong>在 2.2.1 中被删除</strong> ，因此目前的迁移不再需要使用 <code>ident</code> 键。</p> <pre><code class="hljs language-diff">{\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> test: /\\.ext/\n</span><span class="token prefix unchanged"> </span><span class="token line"> use: {\n</span><span class="token prefix unchanged"> </span><span class="token line">   loader: \'...\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   options: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     ident: \'id\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     fn: () => require(\'foo.js\'/*tpa=https://webpack.docschina.org/foo.js*/)\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>}</code></pre> '}}]);