(self.webpackChunk=self.webpackChunk||[]).push([[6125],{6125:function(n){n.exports='<p>在本指南中，我们将深入一些最佳实践和工具，将站点或应用程序构建到生产环境中。</p> <blockquote class="tip"> <p>以下示例来源于 <a href="guides/tree-shaking.htm"/*tpa=https://webpack.docschina.org/guides/tree-shaking*/>tree shaking</a> 和 <a href="guides/development.htm"/*tpa=https://webpack.docschina.org/guides/development*/>开发环境</a>。在继续之前，请确保你已经熟悉这些指南中所介绍的概念/配置。</p> </blockquote> <h2 id="setup">配置 <a href="#setup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><em>development(开发环境)</em> 和 <em>production(生产环境)</em> 这两个环境下的构建目标存在着巨大差异。在_开发环境_中，我们需要：强大的 source map 和一个有着 live reloading(实时重新加载) 或 hot module replacement(热模块替换) 能力的 localhost server。而_生产环境_目标则转移至其他方面，关注点在于压缩 bundle、更轻量的 source map、资源优化等，通过这些优化方式改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写__彼此独立的 webpack 配置__。</p> <p>虽然，以上我们将_生产环境_和_开发环境_做了略微区分，但是，请注意，我们还是会遵循不重复原则(Don\'t repeat yourself - DRY)，保留一个 "common(通用)" 配置。为了将这些配置合并在一起，我们将使用一个名为 <a href="https://github.com/survivejs/webpack-merge"><code>webpack-merge</code></a> 的工具。此工具会引用 "common" 配置，因此我们不必再在环境特定(environment-specific)的配置中编写重复代码。</p> <p>我们先从安装 <code>webpack-merge</code> 开始，并将之前指南中已经成型的那些代码进行分离：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-merge</code></pre> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- webpack.config.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- webpack.common.js\n</span><span class="token prefix inserted">+</span><span class="token line"> |- webpack.dev.js\n</span><span class="token prefix inserted">+</span><span class="token line"> |- webpack.prod.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- math.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>webpack.common.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix inserted">+</span><span class="token line"> const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n</span><span class="token prefix inserted">+</span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> module.exports = {\n</span><span class="token prefix inserted">+</span><span class="token line">   entry: {\n</span><span class="token prefix inserted">+</span><span class="token line">     app: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span><span class="token prefix inserted">+</span><span class="token line">   plugins: [\n</span><span class="token prefix inserted">+</span><span class="token line">     // 对于 CleanWebpackPlugin 的 v2 versions 以下版本，使用 new CleanWebpackPlugin([\'dist/*\'])\n</span><span class="token prefix inserted">+</span><span class="token line">     new CleanWebpackPlugin(),\n</span><span class="token prefix inserted">+</span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">       title: \'Production\',\n</span><span class="token prefix inserted">+</span><span class="token line">     }),\n</span><span class="token prefix inserted">+</span><span class="token line">   ],\n</span><span class="token prefix inserted">+</span><span class="token line">   output: {\n</span><span class="token prefix inserted">+</span><span class="token line">     filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix inserted">+</span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span><span class="token prefix inserted">+</span><span class="token line"> };</span></span></code></pre> <p><strong>webpack.dev.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const { merge } = require(\'webpack-merge\');\n</span><span class="token prefix inserted">+</span><span class="token line"> const common = require(\'webpack.common.js\'/*tpa=https://webpack.docschina.org/webpack.common.js*/);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> module.exports = merge(common, {\n</span><span class="token prefix inserted">+</span><span class="token line">   mode: \'development\',\n</span><span class="token prefix inserted">+</span><span class="token line">   devtool: \'inline-source-map\',\n</span><span class="token prefix inserted">+</span><span class="token line">   devServer: {\n</span><span class="token prefix inserted">+</span><span class="token line">     contentBase: \'./dist\',\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span><span class="token prefix inserted">+</span><span class="token line"> });</span></span></code></pre> <p><strong>webpack.prod.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const { merge } = require(\'webpack-merge\');\n</span><span class="token prefix inserted">+</span><span class="token line"> const common = require(\'webpack.common.js\'/*tpa=https://webpack.docschina.org/webpack.common.js*/);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> module.exports = merge(common, {\n</span><span class="token prefix inserted">+</span><span class="token line">   mode: \'production\',\n</span><span class="token prefix inserted">+</span><span class="token line"> });</span></span></code></pre> <p>现在，在 <code>webpack.common.js</code> 中，我们设置了 <code>entry</code> 和 <code>output</code> 配置，并且在其中引入这两个环境公用的全部插件。在 <code>webpack.dev.js</code> 中，我们将 <code>mode</code> 设置为 <code>development</code>，并且为此环境添加了推荐的 <code>devtool</code>（强大的 source map）和简单的 <code>devServer</code> 配置。最后，在 <code>webpack.prod.js</code> 中，我们将 <code>mode</code> 设置为 <code>production</code>，其中会引入之前在 <a href="guides/tree-shaking.htm"/*tpa=https://webpack.docschina.org/guides/tree-shaking*/>tree shaking</a> 指南中介绍过的 <code>TerserPlugin</code>。</p> <p>注意，在环境特定的配置中使用 <code>merge()</code> 功能，可以很方便地引用 <code>webpack.dev.js</code> 和 <code>webpack.prod.js</code> 中公用的 common 配置。<code>webpack-merge</code> 工具提供了各种 merge(合并) 高级功能，但是在我们的用例中，无需用到这些功能。</p> <h2 id="npm-scripts">NPM Scripts <a href="#npm-scripts" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>现在，我们把 <code>scripts</code> 重新指向到新配置。让 <code>npm start</code> script 中 <code>webpack-dev-server</code>, 使用 <code>webpack.dev.js</code>, 而让 <code>npm run build</code> script 使用 <code>webpack.prod.js</code>:</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> {\n</span><span class="token prefix unchanged"> </span><span class="token line">   "name": "development",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "main": "src/index.js"/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">   "scripts": {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     "start": "webpack serve --open",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     "start": "webpack serve --open --config webpack.dev.js"/*tpa=https://webpack.docschina.org/webpack serve --open --config webpack.dev.js*/,\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     "build": "webpack"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     "build": "webpack --config webpack.prod.js"/*tpa=https://webpack.docschina.org/webpack --config webpack.prod.js*/\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">   "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">   "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">     "clean-webpack-plugin": "https://webpack.docschina.org/^0.1.17",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "css-loader": "^0.28.4",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "csv-loader": "^2.1.1",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "express": "^4.15.3",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "file-loader": "^0.11.2",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "html-webpack-plugin": "^2.29.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "style-loader": "^0.18.2",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "webpack": "^4.30.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "webpack-dev-middleware": "^1.12.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "webpack-dev-server": "^2.9.1",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "webpack-merge": "^4.1.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">     "xml-loader": "^1.2.1"\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p>随便运行下这些脚本，然后查看输出结果的变化，然后我们会继续添加一些_生产环境_配置。</p> <h2 id="specify-the-mode">指定 mode <a href="#specify-the-mode" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>许多 library 通过与 <code>process.env.NODE_ENV</code> 环境变量关联，以决定 library 中应该引用哪些内容。例如，当<code>process.env.NODE_ENV</code> 没有被设置为 <code>\'production\'</code> 时，某些 library 为了使调试变得容易，可能会添加额外的 log(日志记录) 和 test(测试) 功能。并且，在使用 <code>process.env.NODE_ENV === \'production\'</code> 时，一些 library 可能针对具体用户的环境，删除或添加一些重要代码，以进行代码执行方面的优化。从 webpack v4 开始, 指定 <a href="configuration/mode/index.htm"/*tpa=https://webpack.docschina.org/configuration/mode/*/><code>mode</code></a> 会自动地配置 <a href="plugins/define-plugin.htm"/*tpa=https://webpack.docschina.org/plugins/define-plugin*/><code>DefinePlugin</code></a>：</p> <p><strong>webpack.prod.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const { merge } = require(\'webpack-merge\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const common = require(\'webpack.common.js\'/*tpa=https://webpack.docschina.org/webpack.common.js*/);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = merge(common, {\n</span><span class="token prefix unchanged"> </span><span class="token line">   mode: \'production\',\n</span><span class="token prefix unchanged"> </span><span class="token line"> });</span></span></code></pre> <blockquote class="tip"> <p>技术上讲，<code>NODE_ENV</code> 是一个由 Node.js 暴露给执行脚本的系统环境变量。通常用于决定在开发环境与生产环境(dev-vs-prod)下，server tools(服务期工具)、build scripts(构建脚本) 和 client-side libraries(客户端库) 的行为。然而，与预期相反，在构建脚本 <code>webpack.config.js</code> 中<code>process.env.NODE_ENV</code> 并没有被设置为 <code>"production"</code>，请查看 <a href="https://github.com/webpack/webpack/issues/2537">#2537</a>。因此，在 webpack 配置文件中，<code>process.env.NODE_ENV === \'production\' ? \'[name].[contenthash].bundle.js\'/*tpa=https://webpack.docschina.org/[name].[contenthash].bundle.js*/ : \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/</code> 这样的条件语句，无法按照预期运行。</p> </blockquote> <p>如果你正在使用像 <a href="https://react.docchina.org/"><code>react</code></a> 这样的 library，那么在添加此 DefinePlugin 插件后，你应该看到 bundle 大小显著下降。还要注意，任何位于 <code>/src</code> 的本地代码都可以关联到 process.env.NODE_ENV 环境变量，所以以下检查也是有效的：</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import { cube } from \'math.js\'/*tpa=https://webpack.docschina.org/math.js*/;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> if (process.env.NODE_ENV !== \'production\') {\n</span><span class="token prefix inserted">+</span><span class="token line">   console.log(\'Looks like we are in development mode!\');\n</span><span class="token prefix inserted">+</span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'pre\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = [\n</span><span class="token prefix unchanged"> </span><span class="token line">     \'Hello webpack!\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     \'5 cubed is equal to \' + cube(5)\n</span><span class="token prefix unchanged"> </span><span class="token line">   ].join(\'\\n\\n\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());</span></span></code></pre> <h2 id="minification">压缩(Minification) <a href="#minification" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack v4+ will minify your code by default in <a href="configuration/mode/index.htm#mode-production"/*tpa=https://webpack.docschina.org/configuration/mode/#mode-production*/><code>production mode</code></a>.</p> <p>注意，虽然生产环境下默认使用 <a href="plugins/terser-webpack-plugin.htm"/*tpa=https://webpack.docschina.org/plugins/terser-webpack-plugin*/><code>TerserPlugin</code></a> ，并且也是代码压缩方面比较好的选择，但是还有一些其他可选择项。以下有几个同样很受欢迎的插件：</p> <ul> <li><a href="https://github.com/webpack-contrib/closure-webpack-plugin"><code>ClosureWebpackPlugin</code></a></li> </ul> <p>如果决定尝试一些其他压缩插件，只要确保新插件也会按照 <a href="guides/tree-shaking.htm"/*tpa=https://webpack.docschina.org/guides/tree-shaking*/>tree shake</a> 指南中所陈述的具有删除未引用代码(dead code)的能力，并将它作为 <a href="configuration/optimization/index.htm#optimization-minimizer"/*tpa=https://webpack.docschina.org/configuration/optimization/#optimization-minimizer*/><code>optimization.minimizer</code></a>。</p> <h2 id="source-mapping">源码映射(Source Mapping) <a href="#source-mapping" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>我们鼓励你在生产环境中启用 source map，因为它们对 debug(调试源码) 和运行 benchmark tests(基准测试) 很有帮助。虽然有着如此强大的功能，然而还是应该针对生产环境用途，选择一个可以快速构建的推荐配置（更多选项请查看 <a href="configuration/devtool.htm"/*tpa=https://webpack.docschina.org/configuration/devtool*/><code>devtool</code></a>）。对于本指南，我们将在_生产环境_中使用 <code>source-map</code> 选项，而不是我们在_开发环境_中用到的 <code>inline-source-map</code>：</p> <p><strong>webpack.prod.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const { merge } = require(\'webpack-merge\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const common = require(\'webpack.common.js\'/*tpa=https://webpack.docschina.org/webpack.common.js*/);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = merge(common, {\n</span><span class="token prefix unchanged"> </span><span class="token line">   mode: \'production\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   devtool: \'source-map\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> });</span></span></code></pre> <blockquote class="tip"> <p>避免在生产中使用 <code>inline-***</code> 和 <code>eval-***</code>，因为它们会增加 bundle 体积大小，并降低整体性能。</p> </blockquote> <h2 id="minimize-css">压缩 CSS <a href="#minimize-css" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>将生产环境下的 CSS 进行压缩会非常重要，请查看 <a href="plugins/mini-css-extract-plugin/index.htm#minimizing-for-production"/*tpa=https://webpack.docschina.org/plugins/mini-css-extract-plugin/#minimizing-for-production*/>在生产环境下压缩</a> 章节。</p> <h2 id="cli-alternatives">CLI 替代选项 <a href="#cli-alternatives" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>以上所述也可以通过命令行实现。例如，<code>--optimize-minimize</code> 标记将在幕后引用 <code>TerserPlugin</code>。和以上描述的 <code>DefinePlugin</code> 实例相同，<code>--define process.env.NODE_ENV="\'production\'"</code> 也会做同样的事情。而且，<code>webpack -p</code> 将自动地配置上述这两个标记，从而调用需要引入的插件。</p> <p>虽然这种简写方式很好，但通常我们建议只使用配置方式，因为在这两种方式中，配置方式能够更准确地理解现在正在做的事情。配置方式还为可以让你更加细微地控制这两个插件中的其他选项。</p> '}}]);