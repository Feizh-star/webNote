(self.webpackChunk=self.webpackChunk||[]).push([[2855],{2855:function(n){n.exports='<p>如果你在开发一个更加高级的项目，并且使用 <a href="https://www.vagrantup.com/">Vagrant</a> 来实现在虚拟机(Virtual Machine)上运行你的开发环境，那你可能会需要在虚拟机中运行 webpack。</p> <h2 id="configuring-the-project">配置项目 <a href="#configuring-the-project" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>首先，确保 <code>Vagrantfile</code> 拥有一个静态 IP。</p> <pre><code class="hljs language-ruby"><span class="token constant">Vagrant</span><span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>\n  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token symbol">:private_network</span><span class="token punctuation">,</span> ip<span class="token punctuation">:</span> <span class="token string">"https://webpack.docschina.org/10.10.10.61"</span>\n<span class="token keyword">end</span></code></pre> <p>然后，在项目中安装 <code>webpack</code> 和 <code>webpack-dev-server</code>；</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack webpack-dev-server</code></pre> <p>确保提供一个 <code>webpack.config.js</code> 配置文件。如果还没有准备，下面的示例代码可以作为起步的最简配置：</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  context<span class="token operator">:</span> __dirname<span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'app.js\'/*tpa=https://webpack.docschina.org/app.js*/</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>然后，创建一个 <code>index.html</code> 文件。其中的 <code>script</code> 标签应当指向你的 bundle。如果没有在配置中指定 <code>output.filename</code>，其默认值是 <code>bundle.js</code>。</p> <pre><code class="hljs language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/bundle.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>h2</span><span class="token punctuation">></span></span>Heey!<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>h2</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre> <p>注意，你还需要创建一个 <code>app.js</code> 文件。</p> <h2 id="running-the-server">启动服务器 <a href="#running-the-server" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>现在，我们启动服务器：</p> <pre><code class="hljs language-bash">webpack serve --host <span class="token number">0.0</span>.0.0 --public <span class="token number">10.10</span>.10.61:8080 --watch-poll</code></pre> <p>默认只允许从 localhost 访问服务器。所以我们需要修改 <code>--host</code> 参数， 以允许在我们的宿主 PC 上访问。</p> <p><code>webpack-dev-server</code> 会在包中引入一个脚本，此脚本连接到 WebSocket，这样可以在任何文件修改时，触发重新加载应用程序。 <code>--public</code> 标记可以确保脚本知道从哪里查找 WebSocket。默认情况下，服务器会使用 <code>8080</code> 端口，因此也需要在这里指定。</p> <p><code>--watch-poll</code> 可以确保 webpack 能够检测到文件更改。webpack 默认会监听文件系统触发的相关事件， 但是 VirtualBox 使用默认配置会有许多问题。</p> <p>现在服务器应该能够通过 <code>http://10.10.10.61:8080</code> 访问了。修改 <code>app.js</code>，应用程序就会实时重新加载。</p> <h2 id="advanced-usage-with-nginx">配合 nginx 的高级用法 <a href="#advanced-usage-with-nginx" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>为了更好的模拟类生产环境（production-like environment），还可以用 nginx 来代理 <code>webpack-dev-server</code>。</p> <p>在你的 nginx 配置文件中，加入下面代码：</p> <pre><code class="hljs language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>\n  <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>\n    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>\n    <span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>\n    <span class="token keyword">error_page</span> <span class="token number">502</span> @start<span class="token operator">-</span>webpack<span class="token operator">-</span>dev<span class="token operator">-</span><span class="token keyword">server</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">location</span> @start<span class="token operator">-</span>webpack<span class="token operator">-</span>dev<span class="token operator">-</span><span class="token keyword">server</span> <span class="token punctuation">{</span>\n    <span class="token keyword">default_type</span> text<span class="token operator">/</span>plain<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">502</span> <span class="token string">"Please start the webpack-dev-server first."</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p><code>proxy_set_header</code> 这几行配置很重要，因为它们能够使 WebSocket 正常运行。</p> <p>然后 <code>webpack-dev-server</code> 启动命令可以修改为：</p> <pre><code class="hljs language-bash">webpack serve --public <span class="token number">10.10</span>.10.61 --watch-poll</code></pre> <p>现在只能通过 <code>127.0.0.1</code> 访问服务，这点关系不大，因为 ngnix 能够使得你的 PC 电脑能访问到服务器。</p> <h2 id="conclusion">结论 <a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>我们能够从静态 IP 访问 Vagrant box，然后使 <code>webpack-dev-server</code> 可以公开访问，以便浏览器可以访问到它。然后，我们解决了 VirtualBox 不发送到文件系统事件的常见问题，此问题会导致服务器无法重新加载文件更改。</p> '}}]);