(self.webpackChunk=self.webpackChunk||[]).push([[6118],{6118:function(n){n.exports='<p>ECMAScript Modules (ESM) is a <a href="https://tc39.github.io/ecma262/#sec-modules">specification</a> for using Modules in the Web. It\'s supported by all modern browsers and the recommended way of writing modular code for the Web.</p> <p>webpack supported processing ECMAScript Modules to optimize them.</p> <h2 id="Exporting">Exporting<a href="#Exporting" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>The <code>export</code> keyword allows to expose things from an ESM to other modules:</p> <pre><code class="hljs language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">CONSTANT</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">let</span> variable <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token comment">// only reading is exposed</span>\n<span class="token comment">// it\'s not possible to modify the variable from outside</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'fun\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>\n  <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'method\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> other<span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> other <span class="token keyword">as</span> c <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token function">more</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="Importing">Importing<a href="#Importing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>The <code>import</code> keyword allows to get references to things from other modules into an ESM:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">CONSTANT</span><span class="token punctuation">,</span> variable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'module.js\'/*tpa=https://webpack.docschina.org/module.js*/</span><span class="token punctuation">;</span>\n<span class="token comment">// import "bindings" to exports from another module</span>\n<span class="token comment">// these bindings are live. The values are not copied,</span>\n<span class="token comment">// instead accessing "variable" will get the current value</span>\n<span class="token comment">// in the imported module</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> module <span class="token keyword">from</span> <span class="token string">\'module.js\'/*tpa=https://webpack.docschina.org/module.js*/</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// import the "namespace object" which contains all exports</span>\n\n<span class="token keyword">import</span> theDefaultValue <span class="token keyword">from</span> <span class="token string">\'module.js\'/*tpa=https://webpack.docschina.org/module.js*/</span><span class="token punctuation">;</span>\n<span class="token comment">// shortcut to import the "default" export</span></code></pre> <h2 id="Flagging-modules-are-ESM">Flagging modules are ESM<a href="#Flagging-modules-are-ESM" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>By default webpack will automatically detect whether a file is an ESM or a different module system.</p> <p>Node.js established a way of explicitly setting the module type of files by using a property in the <code>package.json</code>. Setting <code>"type": "module"</code> in a package.json does force all files below this package.json to be ECMAScript Modules. Setting <code>"type": "commonjs"</code> will instead force them to be CommonJS Modules.</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span>\n<span class="token punctuation">}</span></code></pre> <p>In addition to that, files can set the module type by using <code>.mjs</code> or <code>.cjs</code> extension. <code>.mjs</code> will force them to be ESM, <code>.cjs</code> force them to be CommonJs.</p> <p>In DataURIs using the <code>text/javascript</code> or <code>application/javascript</code> mime type will also force module type to ESM.</p> <p>In addition to the module format, flagging modules as ESM also affect the resolving logic, interop logic and the available symbols in modules.</p> <p>Imports in ESM are resolved more strictly. Relative requests must include a filename and file extension.</p> <blockquote class="tip"> <p>Requests to packages e.g. <code>import "lodash"</code> are still supported.</p> </blockquote> <p>Only the "default" export can be imported from non-ESM. Named exports are not available.</p> <p>CommonJs Syntax is not available: <code>require</code>, <code>module</code>, <code>exports</code>, <code>__filename</code>, <code>__dirname</code>.</p> <blockquote class="tip"> <p>HMR can be used with <code>import.meta.webpackHot</code> instead of <code>module.hot</code>.</p> </blockquote> '}}]);