(self.webpackChunk=self.webpackChunk||[]).push([[1935],{1935:function(n){n.exports='<p>你可能已经注意到，很少有 webpack 配置看起来完全相同。这是因为 <strong>webpack 的配置文件是 JavaScript 文件，文件内导出了一个 webpack <a href="configuration/index.htm"/*tpa=https://webpack.docschina.org/configuration/*/>配置的对象</a>。</strong> webpack 会根据该配置定义的属性进行处理。</p> <p>由于 webpack 遵循 CommonJS 模块规范，因此，你__可以在配置中使用__：</p> <ul> <li>通过 <code>require(...)</code> 引入其他文件</li> <li>通过 <code>require(...)</code> 使用 npm 下载的工具函数</li> <li>使用 JavaScript 控制流表达式，例如 <code>?:</code> 操作符</li> <li>对 value 使用常量或变量赋值</li> <li>编写并执行函数，生成部分配置</li> </ul> <p>请在合适的场景，使用这些功能。</p> <p>虽然技术上可行，<strong>但还是应避免如下操作</strong>：</p> <ul> <li>当使用 webpack CLI 工具时，访问 CLI 参数（应编写自己的 CLI 工具替代，或者<a href="configuration/configuration-types/index.htm"/*tpa=https://webpack.docschina.org/configuration/configuration-types/*/>使用 <code>--env</code></a>）</li> <li>导出不确定的结果（两次调用 webpack 应产生相同的输出文件）</li> <li>编写超长的配置（应将配置文件拆分成多个）</li> </ul> <blockquote class="tip"> <p>此文档中得出最重要的结论是，webpack 的配置可以有许多不同的样式和风格。关键在于，为了易于维护和理解这些配置，需要在团队内部保证一致。</p> </blockquote> <p>接下来的示例中，展示了 webpack 配置如何实现既可表达，又可灵活配置，这主要得益于_配置即为代码_：</p> <h2 id="simple-configuration">基本配置 <a href="#simple-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'foo.js\'/*tpa=https://webpack.docschina.org/foo.js*/</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'foo.bundle.js\'/*tpa=https://webpack.docschina.org/foo.bundle.js*/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><em>查看</em>：<a href="configuration/index.htm"/*tpa=https://webpack.docschina.org/configuration/*/>配置章节</a>中所有支持的配置选项。</p> <h2 id="multiple-targets">多个 target <a href="#multiple-targets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>除了可以将单个配置导出为 object，<a href="configuration/configuration-types/index.htm#exporting-a-function"/*tpa=https://webpack.docschina.org/configuration/configuration-types/#exporting-a-function*/>function</a> 或 <a href="configuration/configuration-types/index.htm#exporting-a-promise"/*tpa=https://webpack.docschina.org/configuration/configuration-types/#exporting-a-promise*/>Promise</a> 以外，还可以将其导出为多个配置。</p> <p><em>查看</em>：<a href="configuration/configuration-types/index.htm#exporting-multiple-configurations"/*tpa=https://webpack.docschina.org/configuration/configuration-types/#exporting-multiple-configurations*/>导出多个配置</a></p> <h2 id="using-other-configuration-languages">使用其它配置语言 <a href="#using-other-configuration-languages" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack 支持由多种编程和数据语言编写的配置文件。</p> <p><em>查看</em>：<a href="configuration/configuration-languages/index.htm"/*tpa=https://webpack.docschina.org/configuration/configuration-languages/*/>配置语言</a></p> '}}]);