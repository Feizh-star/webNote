(self.webpackChunk=self.webpackChunk||[]).push([[3587],{3587:function(n){n.exports='<p><em>Context</em> refers to a <a href="guides/dependency-management/index.htm#require-with-expression"/*tpa=https://webpack.docschina.org/guides/dependency-management/#require-with-expression*/>require with an expression</a> such as <code>require(\'./locale/\' + name + \'.json\')</code>. When encountering such an expression, webpack infers the directory (<code>\'./locale/\'</code>) and a regular expression (<code>/^.*\\.json$/</code>). Since the <code>name</code> is not known at compile time, webpack includes every file as module in the bundle.</p> <p>The <code>ContextReplacementPlugin</code> allows you to override the inferred information. There are various ways to configure the plugin:</p> <h2 id="usage">Usage <a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <pre><code class="hljs language-typescript"><span class="token keyword">new</span> <span class="token class-name">webpack</span><span class="token punctuation">.</span><span class="token function">ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token operator">:</span> RegExp<span class="token punctuation">,</span>\n  newContentResource<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  newContentRecursive<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n  newContentRegExp<span class="token operator">?</span><span class="token operator">:</span> RegExp\n<span class="token punctuation">)</span></code></pre> <p>If the resource (directory) matches <code>resourceRegExp</code>, the plugin replaces the default resource, recursive flag or generated regular expression with <code>newContentResource</code>, <code>newContentRecursive</code> or <code>newContextRegExp</code> respectively. If <code>newContentResource</code> is relative, it is resolved relative to the previous resource.</p> <p>Here\'s a small example to restrict module usage:</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment[/\\\\]locale$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">de|fr|hu</span><span class="token regex-delimiter">/</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The <code>moment/locale</code> context is restricted to files matching <code>/de|fr|hu/</code>. Thus only those locales are included (see <a href="https://github.com/moment/moment/issues/2373">this issue</a> for more information).</p> <h2 id="content-callback">Content Callback <a href="#content-callback" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <pre><code class="hljs language-typescript"><span class="token keyword">new</span> <span class="token class-name">webpack</span><span class="token punctuation">.</span><span class="token function">ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token operator">:</span> RegExp<span class="token punctuation">,</span>\n  <span class="token function-variable function">newContentCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The <code>newContentCallback</code> function is given a <a href="api/plugins/module-factories/index.htm"/*tpa=https://webpack.docschina.org/api/plugins/module-factories/*/><code>data</code> object of the <code>ContextModuleFactory</code></a> and is expected to overwrite the <code>request</code> attribute of the supplied object.</p> <p>Using this callback we can dynamically redirect requests to a new location:</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/locale$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/moment\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>context<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    regExp<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/\\w+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    request<span class="token operator">:</span> <span class="token string">\'../../locale\'</span> <span class="token comment">// resolved relatively</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="other-options">Other Options <a href="#other-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>The <code>newContentResource</code> and <code>newContentCreateContextMap</code> parameters are also available:</p> <pre><code class="hljs language-typescript"><span class="token keyword">new</span> <span class="token class-name">webpack</span><span class="token punctuation">.</span><span class="token function">ContextReplacementPlugin</span><span class="token punctuation">(</span>\n  resourceRegExp<span class="token operator">:</span> RegExp<span class="token punctuation">,</span>\n  newContentResource<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  newContentCreateContextMap<span class="token operator">:</span> object <span class="token comment">// mapping runtime-request (userRequest) to compile-time-request (request)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>These two parameters can be used together to redirect requests in a more targeted way. The <code>newContentCreateContextMap</code> allows you to map runtime requests to compile requests in the form of an object:</p> <pre><code class="hljs language-javascript"><span class="token keyword">new</span> <span class="token class-name">ContextReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">selector</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">\'./folder\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string">\'./request\'</span><span class="token operator">:</span> <span class="token string">\'./request\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'./other-request\'</span><span class="token operator">:</span> <span class="token string">\'./new-request\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> '}}]);