(self.webpackChunk=self.webpackChunk||[]).push([[1879],{1879:function(n){n.exports='<p>如果你是从开始一直在沿用指南的示例，现在会有一个小项目，显示 "Hello webpack"。现在我们尝试混合一些其他资源，比如 images，看看 webpack 如何处理。</p> <p>在 webpack 出现之前，前端开发人员会使用 <a href="https://gruntjs.com/">grunt</a> 和 <a href="https://gulpjs.com/">gulp</a> 等工具来处理资源，并将它们从 <code>/src</code> 文件夹移动到 <code>/dist</code> 或 <code>/build</code> 目录中。JavaScript 模块也遵循同样方式，但是，像 webpack 这样的工具，将__动态打包__所有依赖（创建所谓的 <a href="concepts/dependency-graph.htm"/*tpa=https://webpack.docschina.org/concepts/dependency-graph*/>依赖图(dependency graph)</a>）。这是极好的创举，因为现在每个模块都可以_明确表述它自身的依赖_，可以避免打包未使用的模块。</p> <p>webpack 最出色的功能之一就是，除了引入 JavaScript，还可以通过 loader 或内置的 <a href="guides/asset-modules/index.htm"/*tpa=https://webpack.docschina.org/guides/asset-modules/*/>Asset Modules</a> <em>引入任何其他类型的文件</em>。也就是说，以上列出的那些 JavaScript 的优点（例如显式依赖），同样可以用来构建 web 站点或 web 应用程序中的所有非 JavaScript 内容。让我们从 CSS 开始起步，或许你可能已经熟悉了下面这些设置。</p> <h2 id="setup">设置 <a href="#setup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在开始之前，让我们对项目做一个小的修改：</p> <p><strong>dist/index.html</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#x3C;!DOCTYPE html>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;html>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;head>\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;meta charset="utf-8" />\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;title>起步&#x3C;/title>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;title>管理资源&#x3C;/title>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/head>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;body>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="main.js"/*tpa=https://webpack.docschina.org/main.js*/>&#x3C;/script>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="bundle.js"/*tpa=https://webpack.docschina.org/bundle.js*/>&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/body>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;/html></span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    filename: \'main.js\'/*tpa=https://webpack.docschina.org/main.js*/,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    filename: \'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <h2 id="loading-css">加载 CSS <a href="#loading-css" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>为了在 JavaScript 模块中 <code>import</code> 一个 CSS 文件，你需要安装 <a href="loaders/style-loader.htm"/*tpa=https://webpack.docschina.org/loaders/style-loader*/>style-loader</a> 和 <a href="loaders/css-loader.htm"/*tpa=https://webpack.docschina.org/loaders/css-loader*/>css-loader</a>，并在 <a href="configuration/module.htm"/*tpa=https://webpack.docschina.org/configuration/module*/><code>module</code> 配置</a> 中添加这些 loader：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev style-loader css-loader</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  module: {\n</span><span class="token prefix inserted">+</span><span class="token line">    rules: [\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">    ],\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>模块 loader 可以链式调用。链中的每个 loader 都将对资源进行转换。链会逆序执行。第一个 loader 将其结果（被转换后的资源）传递给下一个 loader，依此类推。最后，webpack 期望链中的最后的 loader 返回 JavaScript。</p> <p>应保证 loader 的先后顺序：<a href="loaders/style-loader.htm"/*tpa=https://webpack.docschina.org/loaders/style-loader*/><code>\'style-loader\'</code></a> 在前，而 <a href="loaders/css-loader.htm"/*tpa=https://webpack.docschina.org/loaders/css-loader*/><code>\'css-loader\'</code></a> 在后。如果不遵守此约定，webpack 可能会抛出错误。</p> <blockquote class="tip"> <p>webpack 根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的 loader。在这个示例中，所有以 <code>.css</code> 结尾的文件，都将被提供给 <code>style-loader</code> 和 <code>css-loader</code>。</p> </blockquote> <p>这使你可以在依赖于此样式的 js 文件中 <code>import \'style.css\'/*tpa=https://webpack.docschina.org/style.css*/</code>。现在，在此模块执行过程中，含有 CSS 字符串的 <code>&#x3C;style></code> 标签，将被插入到 html 文件的 <code>&#x3C;head></code> 中。</p> <p>我们尝试一下，通过在项目中添加一个新的 <code>style.css</code> 文件，并将其 import 到我们的 <code>index.js</code> 中：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- style.css\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/style.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.hello</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import \'style.css\'/*tpa=https://webpack.docschina.org/style.css*/;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  element.classList.add(\'hello\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>现在运行 build 命令：</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset bundle.js <span class="token number">72.6</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\norphan modules <span class="token number">326</span> bytes <span class="token punctuation">[</span>orphan<span class="token punctuation">]</span> <span class="token number">1</span> module\ncacheable modules <span class="token number">539</span> KiB\n  modules by path ./node_modules/ <span class="token number">538</span> KiB\n    ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js <span class="token number">6.67</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/css-loader/dist/runtime/api.js <span class="token number">1.57</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  modules by path ./src/ <span class="token number">965</span> bytes\n    ./src/index.js + <span class="token number">1</span> modules <span class="token number">639</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/css-loader/dist/cjs.js<span class="token operator">!</span>./src/style.css <span class="token number">326</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">2231</span> ms</code></pre> <p>再次在浏览器中打开 <code>dist/index.html</code>，你应该看到 <code>Hello webpack</code> 现在的样式是红色。要查看 webpack 做了什么，请检查页面（不要查看页面源代码，它不会显示结果，因为 <code>&#x3C;style></code> 标签是由 JavaScript 动态创建的），并查看页面的 head 标签。它应该包含 style 块元素，也就是我们在 <code>index.js</code> 中 import 的 css 文件中的样式。</p> <p>注意，在多数情况下，你也可以进行 <a href="plugins/mini-css-extract-plugin/index.htm#minimizing-for-production"/*tpa=https://webpack.docschina.org/plugins/mini-css-extract-plugin/#minimizing-for-production*/>压缩 CSS</a>，以便在生产环境中节省加载时间。最重要的是，现有的 loader 可以支持任何你可以想到的 CSS 风格 - <a href="loaders/postcss-loader.htm"/*tpa=https://webpack.docschina.org/loaders/postcss-loader*/>postcss</a>, <a href="loaders/sass-loader.htm"/*tpa=https://webpack.docschina.org/loaders/sass-loader*/>sass</a> 和 <a href="loaders/less-loader.htm"/*tpa=https://webpack.docschina.org/loaders/less-loader*/>less</a> 等。</p> <h2 id="loading-images">加载 images 图像 <a href="#loading-images" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>假如，现在我们正在下载 CSS，但是像 background 和 icon 这样的图像，要如何处理呢？在 webpack 5 中，可以使用内置的 <a href="guides/asset-modules/index.htm"/*tpa=https://webpack.docschina.org/guides/asset-modules/*/>Asset Modules</a>，我们可以轻松地将这些内容混入我们的系统中：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>现在，在 <code>import MyImage from \'my-image.png\'/*tpa=https://webpack.docschina.org/my-image.png*/</code> 时，此图像将被处理并添加到 <code>output</code> 目录，<em>并且</em> <code>MyImage</code> 变量将包含该图像在处理后的最终 url。在使用 <a href="loaders/css-loader.htm"/*tpa=https://webpack.docschina.org/loaders/css-loader*/>css-loader</a> 时，如前所示，会使用类似过程处理你的 CSS 中的 <code>url(\'my-image.png\'/*tpa=https://webpack.docschina.org/my-image.png*/)</code>。loader 会识别这是一个本地文件，并将 <code>\'my-image.png\'/*tpa=https://webpack.docschina.org/my-image.png*/</code> 路径，替换为 <code>output</code> 目录中图像的最终路径。而 <a href="loaders/html-loader.htm"/*tpa=https://webpack.docschina.org/loaders/html-loader*/>html-loader</a> 以相同的方式处理 <code>&#x3C;img src="my-image.png"/*tpa=https://webpack.docschina.org/my-image.png*/ /></code>。</p> <p>我们向项目添加一个图像，然后看它是如何工作的，你可以使用任何你喜欢的图像：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- icon.png\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- style.css\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import \'style.css\'/*tpa=https://webpack.docschina.org/style.css*/;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import Icon from \'icon.png\'/*tpa=https://webpack.docschina.org/icon.png*/;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.classList.add(\'hello\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // 将图像添加到我们已经存在的 div 中。\n</span><span class="token prefix inserted">+</span><span class="token line">  const myIcon = new Image();\n</span><span class="token prefix inserted">+</span><span class="token line">  myIcon.src = Icon;\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">  element.appendChild(myIcon);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><strong>src/style.css</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">.hello {\n</span><span class="token prefix unchanged"> </span><span class="token line">  color: red;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  background: url(\'icon.png\'/*tpa=https://webpack.docschina.org/icon.png*/);\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>重新构建并再次打开 <code>index.html</code> 文件：</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nassets by status <span class="token number">9.88</span> KiB <span class="token punctuation">[</span>cached<span class="token punctuation">]</span> <span class="token number">1</span> asset\nasset bundle.js <span class="token number">73.4</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1.82</span> KiB <span class="token number">6</span> modules\norphan modules <span class="token number">326</span> bytes <span class="token punctuation">[</span>orphan<span class="token punctuation">]</span> <span class="token number">1</span> module\ncacheable modules <span class="token number">540</span> KiB <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">9.88</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span>\n  modules by path ./node_modules/ <span class="token number">539</span> KiB\n    modules by path ./node_modules/css-loader/dist/runtime/*.js <span class="token number">2.38</span> KiB\n      ./node_modules/css-loader/dist/runtime/api.js <span class="token number">1.57</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n      ./node_modules/css-loader/dist/runtime/getUrl.js <span class="token number">830</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js <span class="token number">6.67</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  modules by path ./src/ <span class="token number">1.45</span> KiB <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">9.88</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span>\n    ./src/index.js + <span class="token number">1</span> modules <span class="token number">794</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./src/icon.png <span class="token number">42</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">9.88</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./node_modules/css-loader/dist/cjs.js<span class="token operator">!</span>./src/style.css <span class="token number">648</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1972</span> ms</code></pre> <p>如果一切顺利，你现在应该看到你的 icon 图标成为了重复的背景图，以及 <code>Hello webpack</code> 文本旁边的 <code>img</code> 元素。如果检查此元素，你将看到实际的文件名已更改为 <code>29822eaa871e8eadeaa4.png</code>。这意味着 webpack 在 <code>src</code> 文件夹中找到我们的文件，并对其进行了处理！</p> <h2 id="loading-fonts">加载 fonts 字体 <a href="#loading-fonts" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>那么，像字体这样的其他资源如何处理呢？使用 Asset Modules 可以接收并加载任何文件，然后将其输出到构建目录。这就是说，我们可以将它们用于任何类型的文件，也包括字体。让我们更新 <code>webpack.config.js</code> 来处理字体文件：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>在项目中添加一些字体文件：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- my-font.woff\n</span><span class="token prefix inserted">+</span><span class="token line">   |- my-font.woff2\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- icon.png\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- style.css\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p>配置好 loader 并将字体文件放在合适的位置后，你可以通过一个 <code>@font-face</code> 声明将其混合。本地的 <code>url(...)</code> 指令会被 webpack 获取处理，就像它处理图片一样：</p> <p><strong>src/style.css</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">@font-face {\n</span><span class="token prefix inserted">+</span><span class="token line">  font-family: \'MyFont\';\n</span><span class="token prefix inserted">+</span><span class="token line">  src: url(\'./my-font.woff2\') format(\'woff2\'),\n</span><span class="token prefix inserted">+</span><span class="token line">    url(\'https://webpack.docschina.org/my-font.woff\') format(\'woff\');\n</span><span class="token prefix inserted">+</span><span class="token line">  font-weight: 600;\n</span><span class="token prefix inserted">+</span><span class="token line">  font-style: normal;\n</span><span class="token prefix inserted">+</span><span class="token line">}\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">.hello {\n</span><span class="token prefix unchanged"> </span><span class="token line">  color: red;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  font-family: \'MyFont\';\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  background: url(\'icon.png\'/*tpa=https://webpack.docschina.org/icon.png*/);\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>现在，让我们重新构建，然后看下 webpack 是否处理了我们的字体：</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nassets by status <span class="token number">9.88</span> KiB <span class="token punctuation">[</span>cached<span class="token punctuation">]</span> <span class="token number">1</span> asset\nassets by info <span class="token number">33.2</span> KiB <span class="token punctuation">[</span>immutable<span class="token punctuation">]</span>\n  asset 55055dbfc7c6a83f60ba.woff <span class="token number">18.8</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>immutable<span class="token punctuation">]</span> <span class="token punctuation">[</span>from: src/my-font.woff<span class="token punctuation">]</span> <span class="token punctuation">(</span>auxiliary name: main<span class="token punctuation">)</span>\n  asset 8f717b802eaab4d7fb94.woff2 <span class="token number">14.5</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>immutable<span class="token punctuation">]</span> <span class="token punctuation">[</span>from: src/my-font.woff2<span class="token punctuation">]</span> <span class="token punctuation">(</span>auxiliary name: main<span class="token punctuation">)</span>\nasset bundle.js <span class="token number">73.7</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1.82</span> KiB <span class="token number">6</span> modules\norphan modules <span class="token number">326</span> bytes <span class="token punctuation">[</span>orphan<span class="token punctuation">]</span> <span class="token number">1</span> module\ncacheable modules <span class="token number">541</span> KiB <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">43.1</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span>\n  javascript modules <span class="token number">541</span> KiB\n    modules by path ./node_modules/ <span class="token number">539</span> KiB\n      modules by path ./node_modules/css-loader/dist/runtime/*.js <span class="token number">2.38</span> KiB <span class="token number">2</span> modules\n      ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n      ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js <span class="token number">6.67</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    modules by path ./src/ <span class="token number">1.98</span> KiB\n      ./src/index.js + <span class="token number">1</span> modules <span class="token number">794</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n      ./node_modules/css-loader/dist/cjs.js<span class="token operator">!</span>./src/style.css <span class="token number">1.21</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  asset modules <span class="token number">126</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">43.1</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span>\n    ./src/icon.png <span class="token number">42</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">9.88</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./src/my-font.woff2 <span class="token number">42</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">14.5</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n    ./src/my-font.woff <span class="token number">42</span> bytes <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">18.8</span> KiB <span class="token punctuation">(</span>asset<span class="token punctuation">)</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">2142</span> ms</code></pre> <p>重新打开 <code>dist/index.html</code> 看看我们的 <code>Hello webpack</code> 文本显示是否换上了新的字体。如果一切顺利，你应该能看到变化。</p> <h2 id="loading-data">加载数据 <a href="#loading-data" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>此外，可以加载的有用资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说 <code>import Data from \'https://webpack.docschina.org/data.json\'</code> 默认将正常运行。要导入 CSV、TSV 和 XML，你可以使用 <a href="https://github.com/theplatapi/csv-loader">csv-loader</a> 和 <a href="https://github.com/gisikw/xml-loader">xml-loader</a>。让我们处理加载这三类文件：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev csv-loader xml-loader</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.(csv|tsv)$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        use: [\'csv-loader\'],\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.xml$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        use: [\'xml-loader\'],\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>在项目中添加一些数据文件：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- data.xml\n</span><span class="token prefix inserted">+</span><span class="token line">   |- data.csv\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- my-font.woff\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- my-font.woff2\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- icon.png\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- style.css\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/data.xml</strong></p> <pre><code class="hljs language-xml"><span class="token prolog">&#x3C;?xml version="1.0" encoding="UTF-8"?></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>note</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>to</span><span class="token punctuation">></span></span>Mary<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>to</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>from</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>heading</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>Call Cindy on Tuesday<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>note</span><span class="token punctuation">></span></span></code></pre> <p><strong>src/data.csv</strong></p> <pre><code class="hljs language-csv">to,from,heading,body\nMary,John,Reminder,Call Cindy on Tuesday\nZoe,Bill,Reminder,Buy orange juice\nAutumn,Lindsey,Letter,I miss you\n</code></pre> <p>现在，你可以 <code>import</code> 这四种类型的数据(JSON, CSV, TSV, XML)中的任何一种，所导入的 <code>Data</code> 变量，将包含可直接使用的已解析 JSON：</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import \'style.css\'/*tpa=https://webpack.docschina.org/style.css*/;\n</span><span class="token prefix unchanged"> </span><span class="token line">import Icon from \'icon.png\'/*tpa=https://webpack.docschina.org/icon.png*/;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import Data from \'https://webpack.docschina.org/data.xml\';\n</span><span class="token prefix inserted">+</span><span class="token line">import Notes from \'https://webpack.docschina.org/data.csv\';\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.classList.add(\'hello\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  // Add the image to our existing div.\n</span><span class="token prefix unchanged"> </span><span class="token line">  const myIcon = new Image();\n</span><span class="token prefix unchanged"> </span><span class="token line">  myIcon.src = Icon;\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.appendChild(myIcon);\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  console.log(Data);\n</span><span class="token prefix inserted">+</span><span class="token line">  console.log(Notes);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>重新执行 <code>npm run build</code> 命令，然后打开 <code>dist/index.html</code>。查看开发者工具中的控制台，你应该能够看到导入的数据会被打印出来！</p> <blockquote class="tip"> <p>在使用 <a href="https://github.com/d3">d3</a> 等工具实现某些数据可视化时，这个功能极其有用。可以不用在运行时再去发送一个 ajax 请求获取和解析数据，而是在构建过程中将其提前加载到模块中，以便浏览器加载模块后，直接就可以访问解析过的数据。</p> </blockquote> <blockquote class="warning"> <p>只有在使用 JSON 模块默认导出时会没有警告。</p> </blockquote> <pre><code class="hljs language-javascript"><span class="token comment">// 没有警告</span>\n<span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">\'https://webpack.docschina.org/data.json\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 显示警告，规范不允许这样做。</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://webpack.docschina.org/data.json\'</span><span class="token punctuation">;</span></code></pre> <h3 id="customize-parser-of-json-modules">自定义 JSON 模块 parser <a href="#customize-parser-of-json-modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>通过使用 <a href="configuration/module/index.htm#ruleparserparse"/*tpa=https://webpack.docschina.org/configuration/module/#ruleparserparse*/>自定义 parser</a> 替代特定的 webpack loader，可以将任何 <code>toml</code>、<code>yaml</code> 或 <code>json5</code> 文件作为 JSON 模块导入。</p> <p>假设你在 <code>src</code> 文件夹下有一个 <code>data.toml</code>、一个 <code>data.yaml</code> 以及一个 <code>data.json5</code> 文件：</p> <p><strong>src/data.toml</strong></p> <pre><code class="hljs language-toml">title = "TOML Example"\n\n[owner]\nname = "Tom Preston-Werner"\norganization = "GitHub"\nbio = "GitHub Cofounder &#x26; CEO\\nLikes tater tots and beer."\ndob = 1979-05-27T07:32:00Z\n</code></pre> <p><strong>src/data.yaml</strong></p> <pre><code class="hljs language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> YAML Example\n<span class="token key atrule">owner</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> Tom Preston<span class="token punctuation">-</span>Werner\n  <span class="token key atrule">organization</span><span class="token punctuation">:</span> GitHub\n  <span class="token key atrule">bio</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>\n    GitHub Cofounder &#x26; CEO\n    Likes tater tots and beer.\n  <span class="token key atrule">dob</span><span class="token punctuation">:</span> <span class="token datetime number">1979-05-27T07:32:00.000Z</span></code></pre> <p><strong>src/data.json5</strong></p> <pre><code class="hljs language-json5">{\n  // comment\n  title: "JSON5 Example",\n  owner: {\n    name: "Tom Preston-Werner",\n    organization: "GitHub",\n    bio: "GitHub Cofounder &#x26; CEO\\n\\\nLikes tater tots and beer.",\n    dob: "1979-05-27T07:32:00.000Z"\n  }\n}\n</code></pre> <p>首先安装 <code>toml</code>，<code>yamljs</code> 和 <code>json5</code> 的 packages：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> toml yamljs json5 --save-dev</code></pre> <p>并在你的 webpack 中配置它们：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const toml = require(\'toml\');\n</span><span class="token prefix inserted">+</span><span class="token line">const yaml = require(\'yamljs\');\n</span><span class="token prefix inserted">+</span><span class="token line">const json5 = require(\'json5\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.(csv|tsv)$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'csv-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: /\\.xml$/i,\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: [\'xml-loader\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.toml$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'json\',\n</span><span class="token prefix inserted">+</span><span class="token line">        parser: {\n</span><span class="token prefix inserted">+</span><span class="token line">          parse: toml.parse,\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.yaml$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'json\',\n</span><span class="token prefix inserted">+</span><span class="token line">        parser: {\n</span><span class="token prefix inserted">+</span><span class="token line">          parse: yaml.parse,\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: /\\.json5$/i,\n</span><span class="token prefix inserted">+</span><span class="token line">        type: \'json\',\n</span><span class="token prefix inserted">+</span><span class="token line">        parser: {\n</span><span class="token prefix inserted">+</span><span class="token line">          parse: json5.parse,\n</span><span class="token prefix inserted">+</span><span class="token line">        },\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import \'style.css\'/*tpa=https://webpack.docschina.org/style.css*/;\n</span><span class="token prefix unchanged"> </span><span class="token line">import Icon from \'icon.png\'/*tpa=https://webpack.docschina.org/icon.png*/;\n</span><span class="token prefix unchanged"> </span><span class="token line">import Data from \'https://webpack.docschina.org/data.xml\';\n</span><span class="token prefix unchanged"> </span><span class="token line">import Notes from \'https://webpack.docschina.org/data.csv\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import toml from \'https://webpack.docschina.org/data.toml\';\n</span><span class="token prefix inserted">+</span><span class="token line">import yaml from \'https://webpack.docschina.org/data.yaml\';\n</span><span class="token prefix inserted">+</span><span class="token line">import json from \'./data.json5\';\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(toml.title); // output `TOML Example`\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(toml.owner.name); // output `Tom Preston-Werner`\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(yaml.title); // output `YAML Example`\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(yaml.owner.name); // output `Tom Preston-Werner`\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(json.title); // output `JSON5 Example`\n</span><span class="token prefix inserted">+</span><span class="token line">console.log(json.owner.name); // output `Tom Preston-Werner`\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.classList.add(\'hello\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  // Add the image to our existing div.\n</span><span class="token prefix unchanged"> </span><span class="token line">  const myIcon = new Image();\n</span><span class="token prefix unchanged"> </span><span class="token line">  myIcon.src = Icon;\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  element.appendChild(myIcon);\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  console.log(Data);\n</span><span class="token prefix unchanged"> </span><span class="token line">  console.log(Notes);\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>Re-run the <code>npm run build</code> command and open <code>dist/index.html</code>. You should be able to see your imported data being logged to the console!</p> <h2 id="global-assets">全局资源 <a href="#global-assets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>上述所有内容中最出色之处在于，以这种方式加载资源，你可以以更直观的方式将模块和资源组合在一起。无需依赖于含有全部资源的 <code>/assets</code> 目录，而是将资源与代码组合在一起使用。例如，类似这样的结构会非常有用：</p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- /assets\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |– /components\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |– /my-component\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– index.jsx\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– index.css\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– icon.svg\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– img.png</span></span></code></pre> <p>这种配置方式会使你的代码更具备可移植性，因为现有的集中放置的方式会让所有资源紧密耦合起来。假如你想在另一个项目中使用 <code>/my-component</code>，只需将其复制或移动到 <code>/components</code> 目录下。只要你已经安装过全部_外部依赖_，并且_已经在配置中定义过相同的 loader_，那么项目应该能够良好运行。</p> <p>但是，假如你只能被局限在旧有开发方式，或者你有一些在多个组件（视图、模板、模块等）之间共享的资源。你仍然可以将这些资源存储在一个基本目录(base directory)中，甚至配合使用 <a href="configuration/resolve/index.htm#resolvealias"/*tpa=https://webpack.docschina.org/configuration/resolve/#resolvealias*/>alias</a> 来使它们更方便 <code>import 导入</code>。</p> <h2 id="wrapping-up">回退处理 <a href="#wrapping-up" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>对于下篇指南，我们无需使用本指南中所有用到的资源，因此我们会进行一些清理工作，以便为下篇指南 <a href="guides/output-management/index.htm"/*tpa=https://webpack.docschina.org/guides/output-management/*/>管理输出</a> 做好准备：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   |- data.csv\n</span><span class="token prefix deleted">-</span><span class="token line">   |- data.json5\n</span><span class="token prefix deleted">-</span><span class="token line">   |- data.toml\n</span><span class="token prefix deleted">-</span><span class="token line">   |- data.xml\n</span><span class="token prefix deleted">-</span><span class="token line">   |- data.yaml\n</span><span class="token prefix deleted">-</span><span class="token line">   |- icon.png\n</span><span class="token prefix deleted">-</span><span class="token line">   |- my-font.woff\n</span><span class="token prefix deleted">-</span><span class="token line">   |- my-font.woff2\n</span><span class="token prefix deleted">-</span><span class="token line">   |- style.css\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">const toml = require(\'toml\');\n</span><span class="token prefix deleted">-</span><span class="token line">const yaml = require(\'yamljs\');\n</span><span class="token prefix deleted">-</span><span class="token line">const json5 = require(\'json5\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'bundle.js\'/*tpa=https://webpack.docschina.org/bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  module: {\n</span><span class="token prefix deleted">-</span><span class="token line">    rules: [\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.css$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'asset/resource\',\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.(csv|tsv)$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        use: [\'csv-loader\'],\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.xml$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        use: [\'xml-loader\'],\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.toml$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'json\',\n</span><span class="token prefix deleted">-</span><span class="token line">        parser: {\n</span><span class="token prefix deleted">-</span><span class="token line">          parse: toml.parse,\n</span><span class="token prefix deleted">-</span><span class="token line">        },\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.yaml$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'json\',\n</span><span class="token prefix deleted">-</span><span class="token line">        parser: {\n</span><span class="token prefix deleted">-</span><span class="token line">          parse: yaml.parse,\n</span><span class="token prefix deleted">-</span><span class="token line">        },\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">      {\n</span><span class="token prefix deleted">-</span><span class="token line">        test: /\\.json5$/i,\n</span><span class="token prefix deleted">-</span><span class="token line">        type: \'json\',\n</span><span class="token prefix deleted">-</span><span class="token line">        parser: {\n</span><span class="token prefix deleted">-</span><span class="token line">          parse: json5.parse,\n</span><span class="token prefix deleted">-</span><span class="token line">        },\n</span><span class="token prefix deleted">-</span><span class="token line">      },\n</span><span class="token prefix deleted">-</span><span class="token line">    ],\n</span><span class="token prefix deleted">-</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import \'style.css\'/*tpa=https://webpack.docschina.org/style.css*/;\n</span><span class="token prefix deleted">-</span><span class="token line">import Icon from \'icon.png\'/*tpa=https://webpack.docschina.org/icon.png*/;\n</span><span class="token prefix deleted">-</span><span class="token line">import Data from \'https://webpack.docschina.org/data.xml\';\n</span><span class="token prefix deleted">-</span><span class="token line">import Notes from \'https://webpack.docschina.org/data.csv\';\n</span><span class="token prefix deleted">-</span><span class="token line">import toml from \'https://webpack.docschina.org/data.toml\';\n</span><span class="token prefix deleted">-</span><span class="token line">import yaml from \'https://webpack.docschina.org/data.yaml\';\n</span><span class="token prefix deleted">-</span><span class="token line">import json from \'./data.json5\';\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(toml.title); // output `TOML Example`\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(toml.owner.name); // output `Tom Preston-Werner`\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(yaml.title); // output `YAML Example`\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(yaml.owner.name); // output `Tom Preston-Werner`\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(json.title); //  `JSON5 Example`\n</span><span class="token prefix deleted">-</span><span class="token line">console.log(json.owner.name); // output `Tom Preston-Werner`\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  // lodash，现在通过 script 标签导入\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  element.classList.add(\'hello\');\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">  // Add the image to our existing div.\n</span><span class="token prefix deleted">-</span><span class="token line">  const myIcon = new Image();\n</span><span class="token prefix deleted">-</span><span class="token line">  myIcon.src = Icon;\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">  element.appendChild(myIcon);\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">  console.log(Data);\n</span><span class="token prefix deleted">-</span><span class="token line">  console.log(Notes);\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>And remove those dependencies we added before:</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> uninstall css-loader csv-loader json5 style-loader toml xml-loader yamljs</code></pre> <h2 id="next-guide">下篇指南 <a href="#next-guide" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>我们继续移步到 <a href="guides/output-management/index.htm"/*tpa=https://webpack.docschina.org/guides/output-management/*/>管理输出</a></p> <h2 id="further-reading">延伸阅读 <a href="#further-reading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="https://survivejs.com/webpack/loading/fonts/">加载字体</a> on SurviveJS</li> </ul> '}}]);