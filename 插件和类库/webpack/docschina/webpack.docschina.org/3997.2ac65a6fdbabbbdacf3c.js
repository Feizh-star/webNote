(self.webpackChunk=self.webpackChunk||[]).push([[3997],{3997:function(n){n.exports='<blockquote class="tip"> <p>本指南继续沿用 <a href="guides/output-management.htm"/*tpa=https://webpack.docschina.org/guides/output-management*/>管理输出</a> 指南中的代码示例。</p> </blockquote> <p>如果你一直跟随之前的指南，应该对一些 webpack 基础知识有着很扎实的理解。在我们继续之前，先来看看如何设置一个开发环境，使我们的开发体验变得更轻松一些。</p> <blockquote class="warning"> <p>本指南中的工具__仅用于开发环境__，请__不要__在生产环境中使用它们！</p> </blockquote> <p>在开始前，我们先将 <a href="configuration/mode/index.htm#mode-development"/*tpa=https://webpack.docschina.org/configuration/mode/#mode-development*/><code>mode</code> 设置为 <code>\'development\'</code></a>，并将 <code>title</code> 设置为 <code>\'Development\'</code>。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  mode: \'development\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'src/print.js\'/*tpa=https://webpack.docschina.org/src/print.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new CleanWebpackPlugin(),\n</span><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      title: \'Output Management\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      title: \'Development\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <h2 id="using-source-maps">使用 source map <a href="#using-source-maps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>当 webpack 打包源代码时，可能会很难追踪到 error(错误) 和 warning(警告) 在源代码中的原始位置。例如，如果将三个源文件（<code>a.js</code>, <code>b.js</code> 和 <code>c.js</code>）打包到一个 bundle（<code>bundle.js</code>）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 <code>bundle.js</code>。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。</p> <p>为了更容易地追踪 error 和 warning，JavaScript 提供了 <a href="http://blog.teamtreehouse.com/introduction-source-maps">source maps</a> 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于 <code>b.js</code>，source map 就会明确的告诉你。</p> <p>source map 有许多 <a href="configuration/devtool.htm"/*tpa=https://webpack.docschina.org/configuration/devtool*/>可用选项</a>，请务必仔细阅读它们，以便可以根据需要进行配置。</p> <p>对于本指南，我们将使用 <code>inline-source-map</code> 选项，这有助于解释说明示例意图（此配置仅用于示例，不要用于生产环境）：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'src/print.js\'/*tpa=https://webpack.docschina.org/src/print.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  devtool: \'inline-source-map\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new CleanWebpackPlugin(),\n</span><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      title: \'Development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>现在，让我们来做一些调试，在 <code>print.js</code> 文件中生成一个错误：</p> <p><strong>src/print.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">export default function printMe() {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  console.log(\'I get called from print.js!\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  cosnole.log(\'I get called from print.js!\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>运行 <code>npm run build</code>，编译如下：</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset index.bundle.js <span class="token number">1.38</span> MiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span>\nasset print.bundle.js <span class="token number">6.25</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: print<span class="token punctuation">)</span>\nasset index.html <span class="token number">272</span> bytes <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nruntime modules <span class="token number">1.9</span> KiB <span class="token number">9</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">406</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/print.js <span class="token number">83</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">706</span> ms</code></pre> <p>现在，在浏览器中打开生成的 <code>index.html</code> 文件，点击按钮，并且在控制台查看显示的错误。错误应该如下：</p> <pre><code class="hljs language-bash">Uncaught ReferenceError: cosnole is not defined\n   at HTMLButtonElement.printMe <span class="token punctuation">(</span>print.js:2<span class="token punctuation">)</span></code></pre> <p>我们可以看到，此错误包含有发生错误的文件（<code>print.js</code>）和行号（2）的引用。这是非常有帮助的，因为现在我们可以确切地知道，所要解决问题的位置。</p> <h2 id="choosing-a-development-tool">选择一个开发工具 <a href="#choosing-a-development-tool" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <blockquote class="warning"> <p>某些文本编辑器具有 "safe write(安全写入)" 功能，可能会干扰下面一些工具。阅读 <a href="#adjusting-your-text-editor">调整文本编辑器</a> 以解决这些问题。</p> </blockquote> <p>在每次编译代码时，手动运行 <code>npm run build</code> 会显得很麻烦。</p> <p>webpack 提供几种可选方式，帮助你在代码发生变化后自动编译代码：</p> <ol> <li>webpack\'s <a href="configuration/watch/index.htm#watch"/*tpa=https://webpack.docschina.org/configuration/watch/#watch*/>Watch Mode</a></li> <li><a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a></li> <li><a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a></li> </ol> <p>多数场景中，你可能需要使用 <code>webpack-dev-server</code>，但是不妨探讨一下以上的所有选项。</p> <h3 id="using-watch-mode">使用 watch mode(观察模式) <a href="#using-watch-mode" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>你可以指示 webpack "watch" 依赖图中所有文件的更改。如果其中一个文件被更新，代码将被重新编译，所以你不必再去手动运行整个构建。</p> <p>我们添加一个用于启动 webpack watch mode 的 npm scripts：</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "private": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "watch": "webpack --watch",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    "build": "webpack"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "clean-webpack-plugin": "^3.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "html-webpack-plugin": "^4.5.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "lodash": "https://webpack.docschina.org/^4.17.20"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>如果不想在 watch 触发增量构建后删除 <code>index.html</code> 文件，可以在 <code>CleanWebpackPlugin</code> 中配置 <a href="https://github.com/johnagan/clean-webpack-plugin#options-and-defaults-optional"><code>cleanStaleWebpackAssets</code> 选项</a> 来实现：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'src/print.js\'/*tpa=https://webpack.docschina.org/src/print.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  devtool: \'inline-source-map\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    new CleanWebpackPlugin(),\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    new CleanWebpackPlugin({ cleanStaleWebpackAssets: false }),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      title: \'Development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>现在，你可以在命令行中运行 <code>npm run watch</code>，然后就会看到 webpack 是如何编译代码。 然而，你会发现并没有退出命令行。这是因为此 script 当前还在 watch 你的文件。</p> <p>现在，webpack 观察文件的同时，先移除我们之前加入的错误：</p> <p><strong>src/print.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">export default function printMe() {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  cosnole.log(\'I get called from print.js!\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  console.log(\'I get called from print.js!\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>现在，保存文件并检查 terminal(终端) 窗口。应该可以看到 webpack 自动地重新编译修改后的模块！</p> <p>唯一的缺点是，为了看到修改后的实际效果，你需要刷新浏览器。如果能够自动刷新浏览器就更好了，因此接下来我们会尝试通过 <code>webpack-dev-server</code> 实现此功能。</p> <h3 id="using-webpack-dev-server">使用 webpack-dev-server <a href="#using-webpack-dev-server" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>webpack-dev-server</code> 为你提供了一个简单的 web server，并且具有 live reloading(实时重新加载) 功能。设置如下：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-dev-server</code></pre> <p>修改配置文件，告知 dev server，从什么位置查找文件：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'src/print.js\'/*tpa=https://webpack.docschina.org/src/print.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  devtool: \'inline-source-map\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  devServer: {\n</span><span class="token prefix inserted">+</span><span class="token line">    contentBase: \'./dist\',\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new CleanWebpackPlugin({ cleanStaleWebpackAssets: false }),\n</span><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      title: \'Development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>以上配置告知 <code>webpack-dev-server</code>，将 <code>dist</code> 目录下的文件 serve 到 <code>localhost:8080</code> 下。（译注：serve，将资源作为 server 的可访问文件）</p> <blockquote class="warning"> <p>webpack-dev-server 在编译之后不会写入到任何输出文件。而是将 bundle 文件保留在内存中，然后将它们 serve 到 server 中，就好像它们是挂载在 server 根路径上的真实文件一样。如果你的页面希望在其他不同路径中找到 bundle 文件，则可以通过 dev server 配置中的 <a href="configuration/dev-server/index.htm#devserverpublicpath-"/*tpa=https://webpack.docschina.org/configuration/dev-server/#devserverpublicpath-*/><code>publicPath</code></a> 选项进行修改。</p> </blockquote> <p>我们添加一个可以直接运行 dev server 的 script：</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "private": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "watch": "webpack --watch",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "start": "webpack serve --open",\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    "build": "webpack"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "clean-webpack-plugin": "^3.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "html-webpack-plugin": "^4.5.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-dev-server": "^3.11.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "lodash": "https://webpack.docschina.org/^4.17.20"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>现在，在命令行中运行 <code>npm start</code>，我们会看到浏览器自动加载页面。如果你更改任何源文件并保存它们，web server 将在编译代码后自动重新加载。试试看！</p> <p><code>webpack-dev-server</code> 具有许多可配置的选项。关于其他更多配置，请查看 <a href="configuration/dev-server.htm"/*tpa=https://webpack.docschina.org/configuration/dev-server*/>配置文档</a>。</p> <blockquote class="tip"> <p>现在，server 正在运行，你可能需要尝试 <a href="guides/hot-module-replacement.htm"/*tpa=https://webpack.docschina.org/guides/hot-module-replacement*/>模块热替换(hot module replacement)</a>！</p> </blockquote> <h3 id="using-webpack-dev-middleware">使用 webpack-dev-middleware <a href="#using-webpack-dev-middleware" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>webpack-dev-middleware</code> 是一个封装器(wrapper)，它可以把 webpack 处理过的文件发送到一个 server。 <code>webpack-dev-server</code> 在内部使用了它，然而它也可以作为一个单独的 package 来使用，以便根据需求进行更多自定义设置。下面是一个 webpack-dev-middleware 配合 express server 的示例。</p> <p>首先，安装 <code>express</code> 和 <code>webpack-dev-middleware</code>：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev express webpack-dev-middleware</code></pre> <p>现在，我们需要调整 webpack 配置文件，以确保 middleware(中间件) 功能能够正确启用：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line">\n</span><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'src/print.js\'/*tpa=https://webpack.docschina.org/src/print.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  devtool: \'inline-source-map\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  devServer: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    contentBase: \'./dist\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new CleanWebpackPlugin({ cleanStaleWebpackAssets: false }),\n</span><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      title: \'Development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    publicPath: \'/\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>我们将会在 server 脚本使用 <code>publicPath</code>，以确保文件资源能够正确地 serve 在 <code>http://localhost:3000</code> 下，稍后我们会指定 port number(端口号)。接下来是设置自定义 <code>express</code> server：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- server.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- print.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>server.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpackDevMiddleware <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-middleware\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack.config.js\'/*tpa=https://webpack.docschina.org/webpack.config.js*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 告知 express 使用 webpack-dev-middleware，</span>\n<span class="token comment">// 以及将 webpack.config.js 配置文件作为基础配置。</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n  <span class="token function">webpackDevMiddleware</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    publicPath<span class="token operator">:</span> config<span class="token punctuation">.</span>output<span class="token punctuation">.</span>publicPath<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 将文件 serve 到 port 3000。</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Example app listening on port 3000!\\n\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>现在，添加一个 npm script，以使我们更方便地运行 server：</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "private": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "watch": "webpack --watch",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "start": "webpack serve --open",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "server": "node server.js"/*tpa=https://webpack.docschina.org/node server.js*/,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    "build": "webpack"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "clean-webpack-plugin": "^3.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "express": "^4.17.1",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "html-webpack-plugin": "^4.5.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-dev-middleware": "^4.0.2",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-dev-server": "^3.11.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "lodash": "https://webpack.docschina.org/^4.17.20"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>现在，在 terminal(终端) 中执行 <code>npm run server</code>，将会有类似如下信息输出：</p> <pre><code class="hljs language-bash">Example app listening on port <span class="token number">3000</span><span class="token operator">!</span>\n<span class="token punctuation">..</span>.\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> asset index.bundle.js <span class="token number">1.38</span> MiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> asset print.bundle.js <span class="token number">6.25</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: print<span class="token punctuation">)</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> asset index.html <span class="token number">274</span> bytes <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> runtime modules <span class="token number">1.9</span> KiB <span class="token number">9</span> modules\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> cacheable modules <span class="token number">530</span> KiB\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span>   ./src/index.js <span class="token number">406</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span>   ./src/print.js <span class="token number">83</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span>   ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> webpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">709</span> ms\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> Compiled successfully.\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> Compiling<span class="token punctuation">..</span>.\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> assets by status <span class="token number">1.38</span> MiB <span class="token punctuation">[</span>cached<span class="token punctuation">]</span> <span class="token number">2</span> assets\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> cached modules <span class="token number">530</span> KiB <span class="token punctuation">(</span>javascript<span class="token punctuation">)</span> <span class="token number">1.9</span> KiB <span class="token punctuation">(</span>runtime<span class="token punctuation">)</span> <span class="token punctuation">[</span>cached<span class="token punctuation">]</span> <span class="token number">12</span> modules\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> webpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">19</span> ms\n<span class="token operator">&#x3C;</span>i<span class="token operator">></span> <span class="token punctuation">[</span>webpack-dev-middleware<span class="token punctuation">]</span> Compiled successfully.</code></pre> <p>现在，打开浏览器，访问 <code>http://localhost:3000</code>。应该看到 webpack 应用程序已经运行！</p> <blockquote class="tip"> <p>如果想要了解更多关于模块热替换(hot module replacement)的运行机制，我们推荐你查看 <a href="guides/hot-module-replacement/index.htm"/*tpa=https://webpack.docschina.org/guides/hot-module-replacement/*/>模块热替换(hot module replacement)</a> 指南。</p> </blockquote> <h2 id="adjusting-your-text-editor">调整文本编辑器 <a href="#adjusting-your-text-editor" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>使用自动编译代码时，可能会在保存文件时遇到一些问题。某些编辑器具有 "safe write(安全写入)" 功能，会影响重新编译。</p> <p>在一些常见的编辑器中禁用此功能，查看以下列表：</p> <ul> <li><strong>Sublime Text 3</strong>：在用户首选项(user preferences)中添加 <code>atomic_save: \'false\'</code>。</li> <li><strong>JetBrains IDEs (e.g. WebStorm)</strong>：在 <code>Preferences > Appearance &#x26; Behavior > System Settings</code> 中取消选中 "Use safe write"。</li> <li><strong>Vim</strong>：在设置(settings)中增加 <code>:set backupcopy=yes</code>。</li> </ul> <h2 id="conclusion">结论 <a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>现在，你已经学会了如何自动编译代码，并运行一个简单的 development server，查看下一个指南，其中将介绍<a href="guides/code-splitting/index.htm"/*tpa=https://webpack.docschina.org/guides/code-splitting/*/>代码分割（Code Splitting）</a>。</p> '}}]);