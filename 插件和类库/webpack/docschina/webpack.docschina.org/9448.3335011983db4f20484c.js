(self.webpackChunk=self.webpackChunk||[]).push([[9448],{9448:function(n){n.exports='<p>此 package 允许你使用 <a href="https://github.com/babel/babel">Babel</a> 和 <a href="https://github.com/webpack/webpack">webpack</a> 转译 <code>JavaScript</code> 文件。</p> <p><strong>注意</strong>：请在 Babel <a href="https://github.com/babel/babel/issues">Issues</a> tracker 上报告输出时遇到的问题。</p> <h2 id="install">安装 <a href="#install" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <blockquote> <p>webpack 4.x | babel-loader 8.x | babel 7.x</p> </blockquote> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D babel-loader @babel/core @babel/preset-env webpack</code></pre> <h2 id="usage">用法 <a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack 文档：<a href="loaders/index.htm"/*tpa=https://webpack.docschina.org/loaders/*/>Loaders</a></p> <p>在 webpack 配置对象中，需要将 babel-loader 添加到 module 列表中，就像下面这样：</p> <pre><code class="hljs language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="options">选项 <a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>查看 babel <a href="https://babeljs.io/docs/en/options">选项</a>。</p> <p>你可以使用 options 属性，来向 loader 传递 options <a href="configuration/module/index.htm#ruleoptions--rulequery"/*tpa=https://webpack.docschina.org/configuration/module/#ruleoptions--rulequery*/>选项</a>：</p> <pre><code class="hljs language-javascript">module<span class="token operator">:</span> <span class="token punctuation">{</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">{</span>\n        loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/plugin-proposal-object-rest-spread\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre> <p>此 loader 也支持下面这些 loader 特有的选项：</p> <ul> <li> <p><code>cacheDirectory</code>：默认值为 <code>false</code>。当有设置时，指定的目录将用来缓存 loader 的执行结果。之后的 webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程(recompilation process)。如果设置了一个空值 (<code>loader: \'babel-loader?cacheDirectory\'</code>) 或者 <code>true</code> (<code>loader: \'babel-loader?cacheDirectory=true\'</code>)，loader 将使用默认的缓存目录 <code>node_modules/.cache/babel-loader</code>，如果在任何根目录下都没有找到 <code>node_modules</code> 目录，将会降级回退到操作系统默认的临时文件目录。</p> </li> <li> <p><code>cacheIdentifier</code>：默认是由 <code>@babel/core</code> 版本号，<code>babel-loader</code> 版本号，<code>.babelrc</code> 文件内容（存在的情况下），环境变量 <code>BABEL_ENV</code> 的值（没有时降级到 <code>NODE_ENV</code>）组成的一个字符串。可以设置为一个自定义的值，在 identifier 改变后，来强制缓存失效。</p> </li> <li> <p><code>cacheCompression</code>：默认值为 <code>true</code>。当设置此值时，会使用 Gzip 压缩每个 Babel transform 输出。如果你想要退出缓存压缩，将它设置为 <code>false</code> -- 如果你的项目中有数千个文件需要压缩转译，那么设置此选项可能会从中收益。</p> </li> <li> <p><code>customize</code>: 默认值为 <code>null</code>。导出 <code>custom</code> 回调函数的模块路径，<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-loader">例如传入 <code>.custom()</code> 的 callback 函数</a>。由于你必须创建一个新文件才能使用它，建议改为使用 <code>.custom</code> 来创建一个包装 loader。只有在你_必须_继续直接使用 <code>babel-loader</code> 但又想自定义的情况下，才使用这项配置。</p> </li> </ul> <h2 id="troubleshooting">疑难解答 <a href="#troubleshooting" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="babel-loader-is-slow">babel-loader 很慢！ <a href="#babel-loader-is-slow" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>确保转译尽可能少的文件。你可能使用 <code>/\\.m?js$/</code> 来匹配，这样也许会去转译 <code>node_modules</code> 目录或者其他不需要的源代码。</p> <p>要排除 <code>node_modules</code>，参考文档中的 <code>loaders</code> 配置的 <code>exclude</code> 选项。</p> <p>你也可以通过使用 <code>cacheDirectory</code> 选项，将 babel-loader 提速至少两倍。这会将转译的结果缓存到文件系统中。</p> <h3 id="babel-is-injecting-helpers-into-each-file-and-bloating-my-code">Babel 在每个文件都插入了辅助代码，使代码体积过大！ <a href="#babel-is-injecting-helpers-into-each-file-and-bloating-my-code" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Babel 对一些公共方法使用了非常小的辅助代码，比如 <code>_extend</code>。默认情况下会被添加到每一个需要它的文件中。</p> <p>你可以引入 Babel runtime 作为一个独立模块，来避免重复引入。</p> <p>下面的配置禁用了 Babel 自动对每个文件的 runtime 注入，而是引入 <code>@babel/plugin-transform-runtime</code> 并且使所有辅助代码从这里引用。</p> <p>更多信息请查看 <a href="https://babel.docschina.org/docs/en/babel-plugin-transform-runtime/">文档</a>。</p> <p><strong>注意</strong>：你必须执行 <code>npm install -D @babel/plugin-transform-runtime</code> 来把它包含到你的项目中，然后使用 <code>npm install @babel/runtime</code> 把 <code>@babel/runtime</code> 安装为一个依赖。</p> <pre><code class="hljs language-javascript">rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token comment">// \'transform-runtime\' 插件告诉 Babel</span>\n  <span class="token comment">// 要引用 runtime 来代替注入。</span>\n  <span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    use<span class="token operator">:</span> <span class="token punctuation">{</span>\n      loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token operator">:</span> <span class="token punctuation">{</span>\n        presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/plugin-transform-runtime\'</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span></code></pre> <h4 id="note-transform-runtime--custom-polyfills-eg-promise-library"><strong>注意</strong>：transform-runtime 和自定义 polyfills (例如 Promise library) <a href="#note-transform-runtime--custom-polyfills-eg-promise-library" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>由于 <a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime">@babel/plugin-transform-runtime</a> 包含了一个 polyfill，含有自定义的 <a href="../github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js"/*tpa=https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js*/>regenerator-runtime</a> 和 <a href="https://github.com/zloirock/core-js">core-js</a>, 下面使用 <code>webpack.ProvidePlugin</code> 来配置 shimming 的常用方法将没有作用：</p> <pre><code class="hljs language-javascript"><span class="token comment">// ...</span>\n        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token string">\'Promise\'</span><span class="token operator">:</span> <span class="token string">\'bluebird\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token comment">// ...</span></code></pre> <p>下面这样的写法也没有作用：</p> <pre><code class="hljs language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bluebird\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">;</span></code></pre> <p>它其实会生成下面这样 (使用了 <code>runtime</code> 后)：</p> <pre><code class="hljs language-javascript"><span class="token string">\'use strict\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> _Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">\'default\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">\'default\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bluebird\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">_Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>前面的 <code>Promise</code> library 在被覆盖前已经被引用和使用了。</p> <p>一种可行的办法是，在你的应用程序中加入一个“引导(bootstrap)”步骤，在应用程序开始前先覆盖默认的全局变量。</p> <pre><code class="hljs language-javascript"><span class="token comment">// bootstrap.js</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/runtime/core-js/promise\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bluebird\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./app\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="the-nodejs-api-for-babel-has-been-moved-to-babel-core"><code>babel</code> 的 Node.js API 已经被移到 <code>babel-core</code> 中。 <a href="#the-nodejs-api-for-babel-has-been-moved-to-babel-core" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>如果你收到这个信息，这说明你有一个已经安装的 <code>babel</code> npm package，并且在 webpack 配置中使用 loader 简写方式（在 webpack 2.x 版本中将不再支持这种方式）：</p> <pre><code class="hljs language-javascript">  <span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    loader<span class="token operator">:</span> <span class="token string">\'babel\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span></code></pre> <p>webpack 将尝试读取 <code>babel</code> package 而不是 <code>babel-loader</code>。</p> <p>想要修复这个问题，你需要卸载 <code>babel</code> npm package，因为它在 Babel v6 中已经被废除。（安装 <code>@babel/cli</code> 或者 <code>@babel/core</code> 来替代它） 在另一种场景中，如果你的依赖于 <code>babel</code> 而无法删除它，可以在 webpack 配置中使用完整的 loader 名称来解决：</p> <pre><code class="hljs language-javascript">  <span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    loader<span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span></code></pre> <h3 id="exclude-libraries-that-should-not-be-transpiled">排除不应参与转码的库 <a href="#exclude-libraries-that-should-not-be-transpiled" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>core-js</code> 和 <code>webpack/buildin</code> 如果被 Babel 转码会发生错误。</p> <p>你需要在 <code>babel-loader</code> 中排除它们：</p> <pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  <span class="token string">"loader"</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>\n  <span class="token string">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// \\\\ for Windows, \\/ for Mac OS and Linux</span>\n      <span class="token operator">/</span>node_modules<span class="token punctuation">[</span>\\\\\\<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">]core-js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules[\\\\\\/]webpack[\\\\\\/]buildin</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"@babel/preset-env"</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="customize-config-based-on-webpack-target">根据 webpack 部署目标(target)的自定义配置 <a href="#customize-config-based-on-webpack-target" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Webpack 支持打包成多种 <a href="concepts/targets/index.htm"/*tpa=https://webpack.docschina.org/concepts/targets/*/>部署目标</a> 。例如，当需要为不同的部署目标（例如 <code>web</code> <em>和</em> <code>node</code>）指定不同的 Babel 配置时， babel-loader 通过 Babel 的<a href="https://babeljs.io/docs/en/config-files#apicallercb">caller</a> API 提供了 <code>target</code>属性。</p> <p>例如，根据 webpack 的部署目标改变传给<code>@babel/preset-env</code>的 targets选项</p> <pre><code class="hljs language-javascript"><span class="token comment">// babel.config.js</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">api</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"@babel/plugin-proposal-nullish-coalescing-operator"</span><span class="token punctuation">,</span>\n      <span class="token string">"@babel/plugin-proposal-optional-chaining"</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    presets<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">[</span>\n        <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          useBuiltIns<span class="token operator">:</span> <span class="token string">"entry"</span><span class="token punctuation">,</span>\n          <span class="token comment">// caller.target 等于 webpack 配置的 target 选项</span>\n          targets<span class="token operator">:</span> api<span class="token punctuation">.</span><span class="token function">caller</span><span class="token punctuation">(</span><span class="token parameter">caller</span> <span class="token operator">=></span> caller <span class="token operator">&#x26;&#x26;</span> caller<span class="token punctuation">.</span>target <span class="token operator">===</span> <span class="token string">"node"</span><span class="token punctuation">)</span>\n            <span class="token operator">?</span> <span class="token punctuation">{</span> node<span class="token operator">:</span> <span class="token string">"current"</span> <span class="token punctuation">}</span>\n            <span class="token operator">:</span> <span class="token punctuation">{</span> chrome<span class="token operator">:</span> <span class="token string">"58"</span><span class="token punctuation">,</span> ie<span class="token operator">:</span> <span class="token string">"11"</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="customized-loader">自定义 loader <a href="#customized-loader" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>babel-loader</code> 提供了一个 loader-builder 工具函数， 允许用户为 Babel 处理过的每个文件添加自定义处理选项</p> <p><code>.custom</code> 接收一个 callback 函数， 它将被调用，并传入 loader 中的 <code>babel</code> 实例， 因此，此工具函数才能够完全确保它使用与 loader 的 <code>@babel/core</code> 相同的实例。</p> <p>如果你想自定义，但实际上某个文件又不想调用 <code>.custom</code>， 可以向 <code>customize</code> 选项传入一个字符串， 此字符串指向一个导出 <code>custom</code> 回调函数的文件。</p> <h3 id="example">示例 <a href="#example" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-js"><span class="token comment">// 从 "my-custom-loader.js"/*tpa=https://webpack.docschina.org/my-custom-loader.js*/ 中导出，或者任何你想要的文件中导出。</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token parameter">babel</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      visitor<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 传给 loader 的选项。</span>\n    <span class="token function">customOptions</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> opt1<span class="token punctuation">,</span> opt2<span class="token punctuation">,</span> <span class="token operator">...</span>loader <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取 loader 可能会有的自定义选项</span>\n        custom<span class="token operator">:</span> <span class="token punctuation">{</span> opt1<span class="token punctuation">,</span> opt2 <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n        <span class="token comment">// 传入"移除了两个自定义选项"后的选项</span>\n        loader<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// 提供 Babel 的 \'PartialConfig\' 对象</span>\n    <span class="token function">config</span><span class="token punctuation">(</span><span class="token parameter">cfg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">hasFilesystemConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 使用正常的配置</span>\n        <span class="token keyword">return</span> cfg<span class="token punctuation">.</span>options<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>cfg<span class="token punctuation">.</span>options<span class="token punctuation">,</span>\n        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token operator">...</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>options<span class="token punctuation">.</span>plugins <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n          <span class="token comment">// 在选项中包含自定义 plugin</span>\n          myPlugin<span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token function">result</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>result<span class="token punctuation">,</span>\n        code<span class="token operator">:</span> result<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">"\\n// 自定义loader生成"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-js"><span class="token comment">// 然后，在你的 webpack config 文件中</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ..</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n      loader<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'my-custom-loader.js\'/*tpa=https://webpack.docschina.org/my-custom-loader.js*/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="customoptionsoptions-object--custom-object-loader-object-"><code>customOptions(options: Object): { custom: Object, loader: Object }</code> <a href="#customoptionsoptions-object--custom-object-loader-object-" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>指定的 loader 的选项， 从 <code>babel-loader</code> 选项中分离出自定义选项。</p> <h3 id="configcfg-partialconfig-object"><code>config(cfg: PartialConfig): Object</code> <a href="#configcfg-partialconfig-object" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>指定的 Babel 的 <code>PartialConfig</code> 对象， 返回应该被传递给 <code>babel.transform</code> 的 <code>option</code> 对象。</p> <h3 id="resultresult-result-result"><code>result(result: Result): Result</code> <a href="#resultresult-result-result" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>指定的 Babel 结果对象，允许 loaders 对它进行额外的调整。</p> <h2 id="license">License <a href="#license" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://couto.mit-license.org/">MIT</a></p> '}}]);