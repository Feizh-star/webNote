(self.webpackChunk=self.webpackChunk||[]).push([[2118],{2118:function(e){e.exports='<p>在<a href="https://en.wikipedia.org/wiki/Modular_programming">模块化编程</a>中，开发者将程序分解为功能离散的 chunk，并称之为 <strong>模块</strong>。</p> <p>每个模块都拥有小于完整程序的体积，使得验证、调试及测试变得轻而易举。 精心编写的 __模块__提供了可靠的抽象和封装界限，使得应用程序中每个模块都具备了条理清晰的设计和明确的目的。</p> <p>Node.js 从一开始就支持模块化编程。 然而，web 的_模块化_正在缓慢支持中。 在 web 界存在多种支持 JavaScript 模块化的工具，这些工具各有优势和限制。 webpack 从这些系统中汲取了经验和教训，并将_模块_的概念应用到项目的任何文件中。</p> <h2 id="what-is-a-webpack-module">何为 webpack 模块 <a href="#what-is-a-webpack-module" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>与 <a href="https://nodejs.org/api/modules.html">Node.js 模块</a>相比，webpack _模块_能以各种方式表达它们的依赖关系。下面是一些示例：</p> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">ES2015 <code>import</code></a> 语句</li> <li><a href="http://www.commonjs.org/specs/modules/1.0/">CommonJS</a> <code>require()</code> 语句</li> <li><a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md">AMD</a> <code>define</code> 和 <code>require</code> 语句</li> <li>css/sass/less 文件中的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"><code>@import</code> 语句</a>。</li> <li>stylesheet <code>url(...)</code> 或者 HTML <code>&#x3C;img src=...></code> 文件中的图片链接。</li> </ul> <h2 id="supported-module-types">支持的模块类型 <a href="#supported-module-types" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack 天生支持如下模块类型：</p> <ul> <li><a href="guides/ecma-script-modules.htm"/*tpa=https://webpack.docschina.org/guides/ecma-script-modules*/>ECMAScript 模块</a></li> <li>CommonJS 模块</li> <li>AMD 模块</li> <li><a href="guides/asset-modules.htm"/*tpa=https://webpack.docschina.org/guides/asset-modules*/>Assets</a></li> <li>WebAssembly 模块</li> </ul> <p>通过 <strong>loader</strong> 可以使 webpack 支持多种语言和预处理器语法编写的模块。<strong>loader</strong> 向 webpack 描述了如何处理非原生<em>模块</em>，并将相关<strong>依赖</strong>引入到你的 <strong>bundles</strong>中。 webpack 社区已经为各种流行的语言和预处理器创建了 <em>loader</em>，其中包括：</p> <ul> <li><a href="http://coffeescript.org/">CoffeeScript</a></li> <li><a href="https://www.typescriptlang.org/">TypeScript</a></li> <li><a href="https://babeljs.io/">ESNext (Babel)</a></li> <li><a href="http://sass-lang.com/">Sass</a></li> <li><a href="http://lesscss.org/">Less</a></li> <li><a href="http://stylus-lang.com/">Stylus</a></li> <li><a href="https://elm-lang.org/">Elm</a></li> </ul> <p>当然还有更多！总得来说，webpack 提供了可定制，强大且丰富的 API，允许在 <strong>任何技术栈</strong> 中使用，同时支持在开发、测试和生产环境的工作流中做到 <strong>无侵入性</strong>。</p> <p>关于 loader 的相关信息，请参考 <a href="loaders.htm"/*tpa=https://webpack.docschina.org/loaders*/><strong>loader 列表</strong></a> 或 <a href="api/loaders.htm"/*tpa=https://webpack.docschina.org/api/loaders*/><strong>自定义 loader</strong></a>。</p> '}}]);