(self.webpackChunk=self.webpackChunk||[]).push([[1043],{1043:function(e){e.exports='<p>webpack 支持使用 <a href="concepts/loaders.htm"/*tpa=https://webpack.docschina.org/concepts/loaders*/>loader</a> 对文件进行预处理。你可以构建包括 JavaScript 在内的任何静态资源。并且可以使用 Node.js 轻松编写自己的 loader。</p> <p>在 <code>require()</code> 语句中使用 <code>loadername!</code> 作为前缀的方式来使用 loader，或者在 webpack 配置中配置 regex 来自动应用它们 - 请参阅 <a href="concepts/loaders/index.htm#configuration"/*tpa=https://webpack.docschina.org/concepts/loaders/#configuration*/>配置</a> 。</p> <h2 id="files">文件 <a href="#files" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="loaders/raw-loader.htm"/*tpa=https://webpack.docschina.org/loaders/raw-loader*/><code>raw-loader</code></a> 用于加载文件的原始内容（utf-8）</li> <li><a href="loaders/val-loader.htm"/*tpa=https://webpack.docschina.org/loaders/val-loader*/><code>val-loader</code></a> 将代码作为模块执行，并将其导出为 JS 代码</li> <li><a href="loaders/url-loader.htm"/*tpa=https://webpack.docschina.org/loaders/url-loader*/><code>url-loader</code></a> 与 <code>file-loader</code> 类似，但是如果文件大写小于一个设置的值，则会返回 <a href="https://tools.ietf.org/html/rfc2397">data URL</a></li> <li><a href="loaders/file-loader.htm"/*tpa=https://webpack.docschina.org/loaders/file-loader*/><code>file-loader</code></a> 将文件保存至输出文件夹中并返回（相对）URL</li> <li><a href="https://www.npmjs.com/package/ref-loader"><code>ref-loader</code></a> 用于手动建立文件之间的依赖关系</li> </ul> <h2 id="json">JSON <a href="#json" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="loaders/json5-loader.htm"/*tpa=https://webpack.docschina.org/loaders/json5-loader*/><code>json5-loader</code></a> 加载并转换 <a href="https://json5.org/">JSON 5</a> 文件</li> <li><a href="https://github.com/awnist/cson-loader"><code>cson-loader</code></a> 加载并转换 <a href="https://github.com/bevry/cson#what-is-cson">CSON</a> 文件</li> </ul> <h2 id="transpiling">语法转换 <a href="#transpiling" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="loaders/babel-loader.htm"/*tpa=https://webpack.docschina.org/loaders/babel-loader*/><code>babel-loader</code></a> 使用 <a href="https://babeljs.io/">Babel</a> 加载 ES2015+ 代码并将其转换为 ES5</li> <li><a href="https://github.com/sairion/buble-loader"><code>buble-loader</code></a> 使用 <a href="https://buble.surge.sh/guide/">Bublé</a> 加载 ES2015+ 代码并将其转换为 ES5</li> <li><a href="https://github.com/jupl/traceur-loader"><code>traceur-loader</code></a> 使用 <a href="https://github.com/google/traceur-compiler#readme">Traceur</a> 加载 ES2015+ 代码并将其转换为 ES5</li> <li><a href="https://github.com/TypeStrong/ts-loader"><code>ts-loader</code></a> 像加载 JavaScript 一样加载 <a href="https://www.typescriptlang.org/">TypeScript</a> 2.0+</li> <li><a href="loaders/coffee-loader.htm"/*tpa=https://webpack.docschina.org/loaders/coffee-loader*/><code>coffee-loader</code></a> 像加载 JavaScript 一样加载 <a href="http://coffeescript.org/">CoffeeScript</a></li> <li><a href="https://github.com/fengari-lua/fengari-loader/"><code>fengari-loader</code></a> 使用 <a href="https://fengari.io/">fengari</a> 加载 Lua 代码</li> <li><a href="https://github.com/elm-community/elm-webpack-loader"><code>elm-webpack-loader</code></a> 像加载 JavaScript 一样加载 <a href="https://elm-lang.org/">Elm</a></li> </ul> <h2 id="templating">模板 <a href="#templating" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="loaders/html-loader.htm"/*tpa=https://webpack.docschina.org/loaders/html-loader*/><code>html-loader</code></a> 将 HTML 导出为字符串，需要传入静态资源的引用路径</li> <li><a href="https://github.com/pugjs/pug-loader"><code>pug-loader</code></a> 加载 Pug 和 Jade 模板并返回一个函数</li> <li><a href="https://github.com/peerigon/markdown-loader"><code>markdown-loader</code></a> 将 Markdown 编译为 HTML</li> <li><a href="https://github.com/javiercf/react-markdown-loader"><code>react-markdown-loader</code></a> 使用 markdown-parse 解析器将 Markdown 编译为 React 组件</li> <li><a href="https://github.com/posthtml/posthtml-loader"><code>posthtml-loader</code></a> 使用 <a href="https://github.com/posthtml/posthtml">PostHTML</a> 加载并转换 HTML 文件</li> <li><a href="https://github.com/pcardune/handlebars-loader"><code>handlebars-loader</code></a> 将 Handlebars 文件编译为 HTML</li> <li><a href="https://github.com/asnowwolf/markup-inline-loader"><code>markup-inline-loader</code></a> 将 SVG/MathML 文件内嵌到 HTML 中。在将图标字体或 CSS 动画应用于 SVG 时，此功能非常实用。</li> <li><a href="https://github.com/zimmo-be/twig-loader"><code>twig-loader</code></a> 编译 Twig 模板并返回一个函数</li> <li><a href="https://github.com/webpack-contrib/remark-loader"><code>remark-loader</code></a> 通过 <code>remark</code> 加载 markdown，且支持解析内容中的图片</li> </ul> <h2 id="styling">样式 <a href="#styling" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="loaders/style-loader.htm"/*tpa=https://webpack.docschina.org/loaders/style-loader*/><code>style-loader</code></a> 将模块导出的内容作为样式并添加到 DOM 中</li> <li><a href="loaders/css-loader.htm"/*tpa=https://webpack.docschina.org/loaders/css-loader*/><code>css-loader</code></a> 加载 CSS 文件并解析 import 的 CSS 文件，最终返回 CSS 代码</li> <li><a href="loaders/less-loader.htm"/*tpa=https://webpack.docschina.org/loaders/less-loader*/><code>less-loader</code></a> 加载并编译 LESS 文件</li> <li><a href="loaders/sass-loader.htm"/*tpa=https://webpack.docschina.org/loaders/sass-loader*/><code>sass-loader</code></a> 加载并编译 SASS/SCSS 文件</li> <li><a href="loaders/postcss-loader.htm"/*tpa=https://webpack.docschina.org/loaders/postcss-loader*/><code>postcss-loader</code></a> 使用 <a href="http://postcss.org/">PostCSS</a> 加载并转换 CSS/SSS 文件</li> <li><a href="loaders/stylus-loader/index.htm"/*tpa=https://webpack.docschina.org/loaders/stylus-loader/*/><code>stylus-loader</code></a> 加载并编译 Stylus 文件</li> </ul> <h2 id="linting--testing">Linting 和测试 <a href="#linting--testing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="loaders/mocha-loader.htm"/*tpa=https://webpack.docschina.org/loaders/mocha-loader*/><code>mocha-loader</code></a> 使用 <a href="https://mochajs.org/">mocha</a> (Browser/NodeJS) 进行测试</li> <li><a href="https://github.com/webpack-contrib/eslint-loader"><code>eslint-loader</code></a> 使用 <a href="https://eslint.org/">ESLint</a> 对代码进行格式化</li> </ul> <h2 id="frameworks">框架 <a href="#frameworks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><a href="https://github.com/vuejs/vue-loader"><code>vue-loader</code></a> 加载并编译 <a href="https://vuejs.org/v2/guide/components.html">Vue 组件</a></li> <li><a href="https://github.com/webpack-contrib/polymer-webpack-loader"><code>polymer-loader</code></a> 使用支持配置的预处理程序处理 HTML 和 CSS，并使用 <code>require()</code> 加载模块的方式处理 Web Components</li> <li><a href="https://github.com/TheLarkInn/angular2-template-loader"><code>angular2-template-loader</code></a> 加载并编译 <a href="https://angular.io/">Angular</a> 组件</li> </ul> <h2 id="awesome">Awesome <a href="#awesome" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>有关更多第三方加载器，请参阅 <a href="https://github.com/webpack-contrib/awesome-webpack#loaders">awesome-webpack</a> 中的列表。</p> '}}]);