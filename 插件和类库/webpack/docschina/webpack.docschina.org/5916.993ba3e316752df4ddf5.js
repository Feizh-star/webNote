(self.webpackChunk=self.webpackChunk||[]).push([[5916],{5916:function(n){n.exports='<blockquote class="tip"> <p>本指南继续沿用 <a href="guides/development.htm"/*tpa=https://webpack.docschina.org/guides/development*/>开发环境</a> 指南中的代码示例。</p> </blockquote> <p>模块热替换(hot module replacement 或 HMR)是 webpack 提供的最有用的功能之一。它允许在运行时更新所有类型的模块， 而无需完全刷新。本页面重点介绍其 <strong>实现</strong>，而 <a href="concepts/hot-module-replacement.htm"/*tpa=https://webpack.docschina.org/concepts/hot-module-replacement*/>概念</a> 页面提供了更多关于 它的工作原理以及为什么它有用的细节。</p> <blockquote class="warning"> <p><strong>HMR</strong> 不适用于生产环境，这意味着它应当用于开发环境。更多详细信息， 请查看 <a href="guides/production.htm"/*tpa=https://webpack.docschina.org/guides/production*/>生产环境</a> 指南。</p> </blockquote> <h2 id="enabling-hmr">启用 HMR <a href="#enabling-hmr" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>此功能可以很大程度提高生产效率。我们要做的就是更新 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 配置， 然后使用 webpack 内置的 HMR 插件。我们还要删除掉 <code>print.js</code> 的入口起点， 因为现在已经在 <code>index.js</code> 模块中引用了它。</p> <blockquote class="tip"> <p>如果你在技术选型中使用了 <code>webpack-dev-middleware</code> 而没有使用 <code>webpack-dev-server</code>，请使用 <a href="https://github.com/webpack-contrib/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> 依赖包，以在你的自定义服务器或应用程序上启用 HMR。</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">      app: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      print: \'src/print.js\'/*tpa=https://webpack.docschina.org/src/print.js*/,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   devtool: \'inline-source-map\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   devServer: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     contentBase: \'./dist\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     hot: true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     // new CleanWebpackPlugin([\'dist/*\']) for &#x3C; v2 versions of CleanWebpackPlugin\n</span><span class="token prefix unchanged"> </span><span class="token line">     new CleanWebpackPlugin(),\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Hot Module Replacement\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <blockquote class="tip"> <p>你可以通过以下命令来修改 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 的配置：<code>webpack serve --hotOnly</code>。</p> </blockquote> <p>现在，我们来修改 <code>index.js</code> 文件，以便当 <code>print.js</code> 内部发生变更时可以告诉 webpack 接受更新的模块。</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'print.js\'/*tpa=https://webpack.docschina.org/print.js*/;\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">   const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix unchanged"> </span><span class="token line">   btn.onclick = printMe;\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.appendChild(btn);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> if (module.hot) {\n</span><span class="token prefix inserted">+</span><span class="token line">   module.hot.accept(\'print.js\'/*tpa=https://webpack.docschina.org/print.js*/, function() {\n</span><span class="token prefix inserted">+</span><span class="token line">     console.log(\'Accepting the updated printMe module!\');\n</span><span class="token prefix inserted">+</span><span class="token line">     printMe();\n</span><span class="token prefix inserted">+</span><span class="token line">   })\n</span><span class="token prefix inserted">+</span><span class="token line"> }</span></span></code></pre> <p>更改 <code>print.js</code> 中 <code>console.log</code> 的输出内容，你将会在浏览器中看到如下的输出 （不要担心现在 <code>button.onclick = printMe()</code> 的输出，我们稍后也会更新该部分）。</p> <p><strong>print.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> export default function printMe() {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   console.log(\'I get called from print.js!\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   console.log(\'Updating print.js...\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p><strong>console</strong></p> <pre><code class="hljs language-diff">[HMR] Waiting for update signal from WDS...\nmain.js:4395 [WDS] Hot Module Replacement enabled.\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> 2main.js:4395 [WDS] App updated. Recompiling...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4395 [WDS] App hot update...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4330 [HMR] Checking for updates on the server...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:10024 Accepting the updated printMe module!\n</span><span class="token prefix inserted">+</span><span class="token line"> 0.4b8ee77….hot-update.js:10 Updating print.js...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4330 [HMR] Updated modules:\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4330 [HMR]  - 20</span></span></code></pre> <h2 id="via-the-nodejs-api">通过 Node.js API <a href="#via-the-nodejs-api" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>在 Node.js API 中使用 webpack dev server 时，不要将 dev server 选项放在 webpack 配置对象中。而是在创建时， 将其作为第二个参数传递。例如：</p> <p><code>new WebpackDevServer(compiler, options)</code></p> <p>想要启用 HMR，还需要修改 webpack 配置对象，使其包含 HMR 入口起点。<code>webpack-dev-server</code> 依赖包中具有一个叫做 <code>addDevServerEntrypoints</code> 的方法，你可以通过使用这个方法来实现。这是关于如何使用的一个基本示例：</p> <p><strong>dev-server.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> webpackDevServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-server\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack.config.js\'/*tpa=https://webpack.docschina.org/webpack.config.js*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contentBase<span class="token operator">:</span> <span class="token string">\'./dist\'</span><span class="token punctuation">,</span>\n  hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  host<span class="token operator">:</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwebpackDevServer<span class="token punctuation">.</span><span class="token function">addDevServerEntrypoints</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">webpackDevServer</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'dev server listening on port 5000\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>如果你正在使用 <a href="guides/development.htm#using-webpack-dev-middleware"/*tpa=https://webpack.docschina.org/guides/development#using-webpack-dev-middleware*/><code>webpack-dev-middleware</code></a>，可以通过 <a href="https://github.com/webpack-contrib/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> 依赖包，在自定义 dev server 中启用 HMR。</p> </blockquote> <h2 id="gotchas">问题 <a href="#gotchas" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>模块热替换可能比较难以掌握。为了说明这一点，我们回到刚才的示例中。如果你继续点击示例页面上的按钮， 你会发现控制台仍在打印旧的 <code>printMe</code> 函数。</p> <p>这是因为按钮的 <code>onclick</code> 事件处理函数仍然绑定在旧的 <code>printMe</code> 函数上。</p> <p>为了让 HMR 正常工作，我们需要更新代码，使用 <code>module.hot.accept</code> 将其绑定到新的 <code>printMe</code> 函数上：</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'print.js\'/*tpa=https://webpack.docschina.org/print.js*/;\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">   const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix unchanged"> </span><span class="token line">   btn.onclick = printMe;  // onclick event is bind to the original printMe function\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.appendChild(btn);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> document.body.appendChild(component());\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> let element = component(); // 存储 element，以在 print.js 修改时重新渲染\n</span><span class="token prefix inserted">+</span><span class="token line"> document.body.appendChild(element);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (module.hot) {\n</span><span class="token prefix unchanged"> </span><span class="token line">   module.hot.accept(\'print.js\'/*tpa=https://webpack.docschina.org/print.js*/, function() {\n</span><span class="token prefix unchanged"> </span><span class="token line">     console.log(\'Accepting the updated printMe module!\');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     printMe();\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     document.body.removeChild(element);\n</span><span class="token prefix inserted">+</span><span class="token line">     element = component(); // 重新渲染 "component"，以便更新 click 事件处理函数\n</span><span class="token prefix inserted">+</span><span class="token line">     document.body.appendChild(element);\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   })\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p>这仅仅是一个示例，还有很多让人易于犯错的情况。 幸运的是，有很多 loader（下面会提到一些）可以使得模块热替换变得更加容易。</p> <h2 id="hmr-with-stylesheets">HMR 加载样式 <a href="#hmr-with-stylesheets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>借助于 <code>style-loader</code>，使用模块热替换来加载 CSS 实际上极其简单。此 loader 在幕后使用了 <code>module.hot.accept</code>，在 CSS 依赖模块更新之后，会将其 patch(修补) 到 <code>&#x3C;style></code> 标签中。</p> <p>首先使用以下命令安装两个 loader ：</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev style-loader css-loader</code></pre> <p>然后更新配置文件，使用这两个 loader。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     app: \'src/index.js\'/*tpa=https://webpack.docschina.org/src/index.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   devtool: \'inline-source-map\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   devServer: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     contentBase: \'./dist\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     hot: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   module: {\n</span><span class="token prefix inserted">+</span><span class="token line">     rules: [\n</span><span class="token prefix inserted">+</span><span class="token line">       {\n</span><span class="token prefix inserted">+</span><span class="token line">         test: /\\.css$/,\n</span><span class="token prefix inserted">+</span><span class="token line">         use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix inserted">+</span><span class="token line">       },\n</span><span class="token prefix inserted">+</span><span class="token line">     ],\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      // 对于 CleanWebpackPlugin 的 v2 versions 以下版本，使用 new CleanWebpackPlugin([\'dist/*\'])\n</span><span class="token prefix unchanged"> </span><span class="token line">     new CleanWebpackPlugin(),\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Hot Module Replacement\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].bundle.js\'/*tpa=https://webpack.docschina.org/[name].bundle.js*/,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>如同 import 模块，热加载样式表同样很简单：</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   | - bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   | - index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   | - print.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   | - styles.css</span></span></code></pre> <p><strong>styles.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'print.js\'/*tpa=https://webpack.docschina.org/print.js*/;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import \'styles.css\'/*tpa=https://webpack.docschina.org/styles.css*/;\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">   const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix unchanged"> </span><span class="token line">   btn.onclick = printMe;  // onclick event is bind to the original printMe function\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.appendChild(btn);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> let element = component();\n</span><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(element);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (module.hot) {\n</span><span class="token prefix unchanged"> </span><span class="token line">   module.hot.accept(\'print.js\'/*tpa=https://webpack.docschina.org/print.js*/, function() {\n</span><span class="token prefix unchanged"> </span><span class="token line">     console.log(\'Accepting the updated printMe module!\');\n</span><span class="token prefix unchanged"> </span><span class="token line">     document.body.removeChild(element);\n</span><span class="token prefix unchanged"> </span><span class="token line">     element = component(); // Re-render the "component" to update the click handler\n</span><span class="token prefix unchanged"> </span><span class="token line">     document.body.appendChild(element);\n</span><span class="token prefix unchanged"> </span><span class="token line">   })\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span></code></pre> <p>将 <code>body</code> 的 style 改为 <code>background: red;</code>，你应该可以立即看到页面的背景颜色随之更改，而无需完全刷新。</p> <p><strong>styles.css</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> body {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   background: blue;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   background: red;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <h2 id="other-code-and-frameworks">其他代码和框架 <a href="#other-code-and-frameworks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>社区还提供许多其他 loader 和示例，可以使 HMR 与各种框架和库平滑地进行交互……</p> <ul> <li><a href="https://github.com/gaearon/react-hot-loader">React Hot Loader</a>: 实时调整 react 组件。</li> <li><a href="https://github.com/vuejs/vue-loader">Vue Loader</a>: 此 loader 支持 vue 组件的 HMR，提供开箱即用体验。</li> <li><a href="https://github.com/klazuka/elm-hot-webpack-loader">Elm Hot webpack Loader</a>: 支持 Elm 编程语言的 HMR。</li> <li><a href="https://github.com/gdi2290/angular-hmr">Angular HMR</a>: 没有必要使用 loader！直接修改 NgModule 主文件就够了，</li> </ul> <p>它可以完全控制 HMR API。</p> <ul> <li><a href="https://github.com/sveltejs/svelte-loader">Svelte Loader</a>: 此 loader 开箱即用地支持 Svelte 组件的热更新。</li> </ul> <blockquote class="tip"> <p>如果你知道任何其他 loader 或 plugin，能够有助于或增强模块热替换(hot module replacement)，请提交一个 pull request 以添加到此列表中！</p> </blockquote> '}}]);