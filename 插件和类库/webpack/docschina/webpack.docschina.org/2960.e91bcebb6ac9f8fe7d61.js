(self.webpackChunk=self.webpackChunk||[]).push([[2960],{2960:function(a){a.exports='<p><code>Compiler</code> 模块是 webpack 的主要引擎，它通过 <a href="api/cli.htm"/*tpa=https://webpack.docschina.org/api/cli*/>CLI</a> 传递的所有选项， 或者 <a href="api/node.htm"/*tpa=https://webpack.docschina.org/api/node*/>Node API</a>，创建出一个 compilation 实例。 它扩展(extend)自 <code>Tapable</code> 类，用来注册和调用插件。 大多数面向用户的插件会首先在 <code>Compiler</code> 上注册。</p> <blockquote class="tip"> <p>此模块会暴露在 <code>webpack.Compiler</code>， 可以直接通过这种方式使用。 关于更多信息，请查看 <a href="https://github.com/pksjce/webpack-internal-examples/tree/master/compiler-example">这个示例</a>。</p> </blockquote> <p>在为 webpack 开发插件时，你可能需要知道每个钩子函数是在哪里调用的。想要了解这些内容，请在 webpack 源码中搜索 <code>hooks.&#x3C;hook name>.call</code>。</p> <h2 id="watching">监听(watching) <a href="#watching" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>Compiler</code> 支持可以监控文件系统的 <a href="api/node/index.htm#watching"/*tpa=https://webpack.docschina.org/api/node/#watching*/>监听(watching)</a> 机制，并且在文件修改时重新编译。 当处于监听模式(watch mode)时， compiler 会触发诸如 <code>watchRun</code>, <code>watchClose</code> 和 <code>invalid</code> 等额外的事件。 通常在 <a href="guides/development.htm"/*tpa=https://webpack.docschina.org/guides/development*/>开发环境</a> 中使用， 也常常会在 <code>webpack-dev-server</code> 这些工具的底层调用， 由此开发人员无须每次都使用手动方式重新编译。 还可以通过 <a href="api/cli/index.htm#watch-options"/*tpa=https://webpack.docschina.org/api/cli/#watch-options*/>CLI</a> 进入监听模式。</p> <h2 id="hooks">钩子 <a href="#hooks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>以下生命周期钩子函数，是由 <code>compiler</code> 暴露， 可以通过如下方式访问：</p> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>someHook<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>取决于不同的钩子类型，也可以在某些钩子上访问 <code>tapAsync</code> 和 <code>tapPromise</code>。</p> <p>关于钩子类型的描述，请查看 <a href="https://github.com/webpack/tapable#tapable">Tapable 文档</a>.</p> <h3 id="entryoption"><code>entryOption</code> <a href="#entryoption" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>在 webpack 选项中的 <a href="configuration/entry-context/index.htm#entry"/*tpa=https://webpack.docschina.org/configuration/entry-context/#entry*/><code>entry</code></a> 被处理过之后调用。</p> <ul> <li>回调参数：<a href="configuration/entry-context/index.htm#context"/*tpa=https://webpack.docschina.org/configuration/entry-context/#context*/><code>context</code></a>, <a href="configuration/entry-context/index.htm#entry"/*tpa=https://webpack.docschina.org/configuration/entry-context/#entry*/><code>entry</code></a></li> </ul> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>entryOption<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> entry</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>参数：<code>context</code>, <code>entry</code></p> <h3 id="afterplugins"><code>afterPlugins</code> <a href="#afterplugins" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>在初始化内部插件集合完成设置之后调用。</p> <ul> <li>回调参数：<code>compiler</code></li> </ul> <h3 id="afterresolvers"><code>afterResolvers</code> <a href="#afterresolvers" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>resolver 设置完成之后触发。</p> <ul> <li>回调参数：<code>compiler</code></li> </ul> <h3 id="environment"><code>environment</code> <a href="#environment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>在初始化配置文件中的插件之后立即调用，在 compiler environment 准备时调用。</p> <h3 id="afterenvironment"><code>afterEnvironment</code> <a href="#afterenvironment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>在 <code>environment</code> 钩子之后立即调用，在 compiler environment 完成设置时调用。</p> <h3 id="beforerun"><code>beforeRun</code> <a href="#beforerun" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>在开始执行一次构建之前调用，compiler.run 方法开始执行后立刻进行调用。</p> <ul> <li>回调参数：<code>compiler</code></li> </ul> <h3 id="additionalpass"><code>additionalPass</code> <a href="#additionalpass" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>This hook allows you to do a one more additional pass of the build.</p> <h3 id="run"><code>run</code> <a href="#run" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>在开始读取 <a href="configuration/other-options/index.htm#recordspath"/*tpa=https://webpack.docschina.org/configuration/other-options/#recordspath*/><code>records</code></a> 之前调用。</p> <ul> <li>回调参数：<code>compiler</code></li> </ul> <h3 id="watchrun"><code>watchRun</code> <a href="#watchrun" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>在监听模式下，一个新的 compilation 触发之后，但在 compilation 实际开始之前执行。</p> <ul> <li>回调参数：<code>compiler</code></li> </ul> <h3 id="normalmodulefactory"><code>normalModuleFactory</code> <a href="#normalmodulefactory" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p><code>NormalModuleFactory</code> 创建之后调用。</p> <ul> <li>回调参数：<code>normalModuleFactory</code></li> </ul> <h3 id="contextmodulefactory"><code>contextModuleFactory</code> <a href="#contextmodulefactory" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p><code>ContextModuleFactory</code> 创建之后调用。</p> <ul> <li>回调参数：<code>contextModuleFactory</code></li> </ul> <h3 id="initialize"><code>initialize</code> <a href="#initialize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>在初始化 compiler 对象时调用。</p> <h3 id="beforecompile"><code>beforeCompile</code> <a href="#beforecompile" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>在创建 compilation parameter 之后执行。</p> <ul> <li>回调参数：<code>compilationParams</code></li> </ul> <p>初始化 <code>compilationParams</code> 变量的示例如下：</p> <pre><code class="hljs language-js">compilationParams <span class="token operator">=</span> <span class="token punctuation">{</span>\n  normalModuleFactory<span class="token punctuation">,</span>\n  contextModuleFactory<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>此钩子可用于添加/修改 compilation parameter：</p> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeCompile<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  params<span class="token punctuation">[</span><span class="token string">\'MyPlugin - data\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'important stuff my plugin will use later\'</span><span class="token punctuation">;</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="compile"><code>compile</code> <a href="#compile" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p><code>beforeCompile</code> 之后立即调用，但在一个新的 compilation 创建之前。</p> <ul> <li>回调参数：<code>compilationParams</code></li> </ul> <h3 id="thiscompilation"><code>thisCompilation</code> <a href="#thiscompilation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>初始化 compilation 时调用，在触发 <code>compilation</code> 事件之前调用。</p> <ul> <li>回调参数：<code>compilation</code>, <code>compilationParams</code></li> </ul> <h3 id="compilation"><code>compilation</code> <a href="#compilation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>compilation 创建之后执行。</p> <ul> <li>回调参数：<code>compilation</code>, <code>compilationParams</code></li> </ul> <h3 id="make"><code>make</code> <a href="#make" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncParallelHook</code></p> <p>compilation 结束之前执行。</p> <ul> <li>回调参数：<code>compilation</code></li> </ul> <h3 id="aftercompile"><code>afterCompile</code> <a href="#aftercompile" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>compilation 结束和封印之后执行。</p> <ul> <li>回调参数：<code>compilation</code></li> </ul> <h3 id="shouldemit"><code>shouldEmit</code> <a href="#shouldemit" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>在输出 asset 之前调用。返回一个布尔值，告知是否输出。</p> <ul> <li>回调参数：<code>compilation</code></li> </ul> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>shouldEmit<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 返回 true 以输出 output 结果，否则返回 false</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="emit"><code>emit</code> <a href="#emit" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>输出 asset 到 output 目录之前执行。</p> <ul> <li>回调参数：<code>compilation</code></li> </ul> <h3 id="afteremit"><code>afterEmit</code> <a href="#afteremit" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>输出 asset 到 output 目录之后执行。</p> <ul> <li>回调参数：<code>compilation</code></li> </ul> <h3 id="assetemitted"><code>assetEmitted</code> <a href="#assetemitted" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>在 asset 被输出时执行。此钩子可以访问被输出的 asset 的相关信息，例如它的输出路径和字节内容。</p> <ul> <li>回调参数：<code>file</code>, <code>info</code></li> </ul> <p>例如，可以通过 <code>info.content</code> 访问 asset 的内容 buffer：</p> <pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>assetEmitted<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>\n  <span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> source<span class="token punctuation">,</span> outputPath<span class="token punctuation">,</span> compilation<span class="token punctuation">,</span> targetPath <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;Buffer 66 6f 6f 62 61 72></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="done"><code>done</code> <a href="#done" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>AsyncSeriesHook</code></p> <p>在 compilation 完成时执行。</p> <ul> <li>回调参数：<code>stats</code></li> </ul> <h3 id="failed"><code>failed</code> <a href="#failed" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>在 compilation 失败时调用。</p> <ul> <li>回调参数：<code>error</code></li> </ul> <h3 id="invalid"><code>invalid</code> <a href="#invalid" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>在一个观察中的 compilation 无效时执行。</p> <ul> <li>回调参数：<code>fileName</code>, <code>changeTime</code></li> </ul> <h3 id="watchclose"><code>watchClose</code> <a href="#watchclose" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncHook</code></p> <p>在一个观察中的 compilation 停止时执行。</p> <h3 id="infrastructurelog"><code>infrastructureLog</code> <a href="#infrastructurelog" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>在配置中启用 <a href="configuration/other-options/index.htm#infrastructurelogging"/*tpa=https://webpack.docschina.org/configuration/other-options/#infrastructurelogging*/><code>infrastructureLogging</code> 选项</a> 后，允许使用 infrastructure log(基础日志)。</p> <ul> <li>回调参数：<code>name</code>, <code>type</code>, <code>args</code></li> </ul> <h3 id="log"><code>log</code> <a href="#log" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>SyncBailHook</code></p> <p>启用后允许记录到 <a href="configuration/stats/index.htm"/*tpa=https://webpack.docschina.org/configuration/stats/*/>stats</a> 对象，请参阅 <a href="configuration/stats/index.htm#stats-options"/*tpa=https://webpack.docschina.org/configuration/stats/#stats-options*/><code>stats.logging</code>, <code>stats.loggingDebug</code> 和 <code>stats.loggingTrace</code> 选项</a>。</p> <ul> <li>回调参数：<code>origin</code>, <code>logEntry</code></li> </ul> '}}]);