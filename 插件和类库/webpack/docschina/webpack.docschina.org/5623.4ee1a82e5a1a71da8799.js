(self.webpackChunk=self.webpackChunk||[]).push([[5623],{5623:function(n){n.exports='<p>Extract text from a bundle, or bundles, into a separate file.</p> <h2 id="install">Install <a href="#install" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <pre><code class="hljs language-bash">\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev extract-text-webpack-plugin\n<span class="token comment"># for webpack 2</span>\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev extract-text-webpack-plugin@2.1.2\n<span class="token comment"># for webpack 1</span>\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev extract-text-webpack-plugin@1.0.1</code></pre> <h2 id="usage">Usage <a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <blockquote> <p>:warning: Since webpack v4 the <code>extract-text-webpack-plugin</code> should not be used for css. Use <a href="plugins/mini-css-extract-plugin/index.htm"/*tpa=https://webpack.docschina.org/plugins/mini-css-extract-plugin/*/>mini-css-extract-plugin</a> instead.</p> </blockquote> <blockquote> <p>:warning: For webpack v1, see <a href="https://github.com/webpack/extract-text-webpack-plugin/blob/webpack-1/README.md">the README in the webpack-1 branch</a>.</p> </blockquote> <pre><code class="hljs language-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"extract-text-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token string">"css-loader"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">"styles.css"/*tpa=https://webpack.docschina.org/styles.css*/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre> <p>It moves all the required <code>*.css</code> modules in entry chunks into a separate CSS file. So your styles are no longer inlined into the JS bundle, but in a separate CSS file (<code>styles.css</code>). If your total stylesheet volume is big, it will be faster because the CSS bundle is loaded in parallel to the JS bundle.</p> <table> <thead> <tr> <th align="left">Advantages</th> <th align="left">Caveats</th> </tr> </thead> <tbody> <tr> <td align="left" data-th="Advantages"><span>Fewer style tags (older IE has a limit)</span></td> <td align="left" data-th="Caveats"><span>Additional HTTP request</span></td> </tr> <tr> <td align="left" data-th="Advantages"><span>CSS SourceMap (with <code>devtool: "source-map"</code> and <code>extract-text-webpack-plugin?sourceMap</code>)</span></td> <td align="left" data-th="Caveats"><span>Longer compilation time</span></td> </tr> <tr> <td align="left" data-th="Advantages"><span>CSS requested in parallel</span></td> <td align="left" data-th="Caveats"><span>No runtime public path modification</span></td> </tr> <tr> <td align="left" data-th="Advantages"><span>CSS cached separate</span></td> <td align="left" data-th="Caveats"><span>No Hot Module Replacement</span></td> </tr> <tr> <td align="left" data-th="Advantages"><span>Faster runtime (less code and DOM operations)</span></td> <td align="left" data-th="Caveats"><span>...</span></td> </tr> </tbody> </table> <h2 id="options">Options <a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <pre><code class="hljs language-js"><span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span>options<span class="token operator">:</span> filename <span class="token operator">|</span> object<span class="token punctuation">)</span></code></pre> <table> <thead> <tr> <th align="center">Name</th> <th align="center">Type</th> <th align="left">Description</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="Name"><span><strong><code>id</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code></span></td> <td align="left" data-th="Description"><span>Unique ident for this plugin instance. (For advanced usage only, by default automatically generated)</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>filename</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String|Function}</code></span></td> <td align="left" data-th="Description"><span>Name of the result file. May contain <code>[name]</code>, <code>[id]</code> and <code>[contenthash]</code></span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>allChunks</code></strong></span></td> <td align="center" data-th="Type"><span><code>{Boolean}</code></span></td> <td align="left" data-th="Description"><span>Extract from all additional chunks too (by default it extracts only from the initial chunk(s))<br/>When using <code>CommonsChunkPlugin</code> and there are extracted chunks (from <code>ExtractTextPlugin.extract</code>) in the commons chunk, <code>allChunks</code> <strong>must</strong> be set to <code>true</code></span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>disable</code></strong></span></td> <td align="center" data-th="Type"><span><code>{Boolean}</code></span></td> <td align="left" data-th="Description"><span>Disables the plugin</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>ignoreOrder</code></strong></span></td> <td align="center" data-th="Type"><span><code>{Boolean}</code></span></td> <td align="left" data-th="Description"><span>Disables order check (useful for CSS Modules!), <code>false</code> by default</span></td> </tr> </tbody> </table> <ul> <li><code>[name]</code> name of the chunk</li> <li><code>[id]</code> number of the chunk</li> <li><code>[contenthash]</code> hash of the content of the extracted file</li> <li><code>[&#x3C;hashType>:contenthash:&#x3C;digestType>:&#x3C;length>]</code> optionally you can configure <ul> <li>other <code>hashType</code>s, e.g. <code>sha1</code>, <code>md5</code>, <code>sha256</code>, <code>sha512</code></li> <li>other <code>digestType</code>s, e.g. <code>hex</code>, <code>base26</code>, <code>base32</code>, <code>base36</code>, <code>base49</code>, <code>base52</code>, <code>base58</code>, <code>base62</code>, <code>base64</code></li> <li>and <code>length</code>, the length of the hash in chars</li> </ul> </li> </ul> <blockquote> <p>:warning: <code>ExtractTextPlugin</code> generates a file <strong>per entry</strong>, so you must use <code>[name]</code>, <code>[id]</code> or <code>[contenthash]</code> when using multiple entries.</p> </blockquote> <h4 id="extract"><code>#extract</code> <a href="#extract" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-js">ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>options<span class="token operator">:</span> loader <span class="token operator">|</span> object<span class="token punctuation">)</span></code></pre> <p>Creates an extracting loader from an existing loader. Supports loaders of type <code>{ loader: [name]-loader -> {String}, options: {} -> {Object} }</code>.</p> <table> <thead> <tr> <th align="center">Name</th> <th align="center">Type</th> <th align="left">Description</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="Name"><span><strong><code>options.use</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code>/<code>{Array}</code>/<code>{Object}</code></span></td> <td align="left" data-th="Description"><span>Loader(s) that should be used for converting the resource to a CSS exporting module <em>(required)</em></span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>options.fallback</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code>/<code>{Array}</code>/<code>{Object}</code></span></td> <td align="left" data-th="Description"><span>loader(e.g <code>\'style-loader\'</code>) that should be used when the CSS is not extracted (i.e. in an additional chunk when <code>allChunks: false</code>)</span></td> </tr> <tr> <td align="center" data-th="Name"><span><strong><code>options.publicPath</code></strong></span></td> <td align="center" data-th="Type"><span><code>{String}</code></span></td> <td align="left" data-th="Description"><span>Override the <code>publicPath</code> setting for this loader</span></td> </tr> </tbody> </table> <h4 id="multiple-instances">Multiple Instances <a href="#multiple-instances" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>There is also an <code>extract</code> function on the instance. You should use this if you have more than one instance of <code>ExtractTextPlugin</code>.</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create multiple instances</span>\n<span class="token keyword">const</span> extractCSS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'stylesheets/[name]-one.css\'/*tpa=https://webpack.docschina.org/stylesheets/[name]-one.css*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> extractLESS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'stylesheets/[name]-two.css\'/*tpa=https://webpack.docschina.org/stylesheets/[name]-two.css*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> extractCSS<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'postcss-loader\'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> extractLESS<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'less-loader\'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    extractCSS<span class="token punctuation">,</span>\n    extractLESS\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="extracting-sass-or-less">Extracting Sass or LESS <a href="#extracting-sass-or-less" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The configuration is the same, switch out <code>sass-loader</code> for <code>less-loader</code> when necessary.</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/</span><span class="token punctuation">)</span>\n    <span class="token comment">//if you want to pass in options, you can do so:</span>\n    <span class="token comment">//new ExtractTextPlugin({</span>\n    <span class="token comment">//  filename: \'style.css\'/*tpa=https://webpack.docschina.org/style.css*/</span>\n    <span class="token comment">//})</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="url-resolving"><code>url()</code> Resolving <a href="#url-resolving" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>If you are finding that urls are not resolving properly when you run webpack. You can expand your loader functionality with options. The <code>url: false</code> property allows your paths resolved without any changes.</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'extract-text-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          fallback<span class="token operator">:</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          use<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                loader<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n                options<span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// If you are having trouble with urls not resolving add this setting.</span>\n                    <span class="token comment">// See https://github.com/webpack-contrib/css-loader#url</span>\n                    url<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                    minimize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                    sourceMap<span class="token operator">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> \n            <span class="token punctuation">{</span>\n                loader<span class="token operator">:</span> <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n                options<span class="token operator">:</span> <span class="token punctuation">{</span>\n                    sourceMap<span class="token operator">:</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="modify-filename">Modify filename <a href="#modify-filename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>filename</code> parameter could be <code>Function</code>. It passes <code>getPath</code> to process the format like <code>css/[name].css</code> and returns the real file name, <code>css/js/a.css</code>. You can replace <code>css/js</code> with <code>css</code> then you will get the new path <code>css/a.css</code>.</p> <pre><code class="hljs language-js">entry<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string">\'js/a\'</span><span class="token operator">:</span> <span class="token string">"./a"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nplugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">filename</span><span class="token operator">:</span>  <span class="token punctuation">(</span><span class="token parameter">getPath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token string">\'css/[name].css\'/*tpa=https://webpack.docschina.org/css/[name].css*/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">\'css/js\'</span><span class="token punctuation">,</span> <span class="token string">\'css\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    allChunks<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span></code></pre> <h2 id="maintainers">Maintainers <a href="#maintainers" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <tbody> <tr> <td align="center"> <img width="150" height="150" src="https://avatars3.githubusercontent.com/u/166921?v=3&s=150"> <br> <a href="https://github.com/bebraw">Juho Vepsäläinen</a> </td> <td align="center"> <img width="150" height="150" src="https://avatars2.githubusercontent.com/u/8420490?v=3&s=150"> <br> <a href="https://github.com/d3viant0ne">Joshua Wiens</a> </td> <td align="center"> <img width="150" height="150" src="https://avatars3.githubusercontent.com/u/533616?v=3&s=150"> <br> <a href="https://github.com/SpaceK33z">Kees Kluskens</a> </td> <td align="center"> <img width="150" height="150" src="https://avatars3.githubusercontent.com/u/3408176?v=3&s=150"> <br> <a href="https://github.com/TheLarkInn">Sean Larkin</a> </td> </tr> <tbody> </tbody></tbody></table> '}}]);