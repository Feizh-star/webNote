(self.webpackChunk=self.webpackChunk||[]).push([[6129],{6129:function(n){n.exports='<p><a href="https://npmjs.com/package/thread-loader"><img src="https://img.shields.io/npm/v/thread-loader.svg" alt="npm"></a> <a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/thread-loader.svg" alt="node"></a> <a href="https://david-dm.org/webpack-contrib/thread-loader"><img src="https://david-dm.org/webpack-contrib/thread-loader.svg" alt="deps"></a> <a href="https://github.com/webpack-contrib/thread-loader/actions"><img src="https://github.com/webpack-contrib/thread-loader/workflows/thread-loader/badge.svg" alt="tests"></a> <a href="https://codecov.io/gh/webpack-contrib/thread-loader"><img src="https://codecov.io/gh/webpack-contrib/thread-loader/branch/master/graph/badge.svg" alt="coverage"></a> <a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a> <a href="https://packagephobia.now.sh/result?p=thread-loader"><img src="https://packagephobia.now.sh/badge?p=thread-loader" alt="size"></a></p> <p>运行以下 loader 在 worker pool 中。</p> <h2 id="getting-started">快速开始 <a href="#getting-started" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev thread-loader</code></pre> <p>使用时，需将此 loader 放置在其他 loader 之前。放置在此 loader 之后的 loader 会在一个独立的 worker 池中运行。</p> <p>在 worker 池中运行的 loader 是受到限制的。例如：</p> <ul> <li>这些 loader 不能生成新的文件。</li> <li>这些 loader 不能使用自定义的 loader API（也就是说，不能通过插件来自定义）。</li> <li>这些 loader 无法获取 webpack 的配置。</li> </ul> <p>每个 worker 都是一个独立的 node.js 进程，其开销大约为 600ms 左右。同时会限制跨进程的数据交换。</p> <p>请仅在耗时的操作中使用此 loader！</p> <h3 id="examples">示例 <a href="#examples" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"thread-loader"</span><span class="token punctuation">,</span>\n          <span class="token comment">// 耗时的 loader （例如 babel-loader）</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>with options</strong></p> <pre><code class="hljs language-js">use<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    loader<span class="token operator">:</span> <span class="token string">"thread-loader"</span><span class="token punctuation">,</span>\n    <span class="token comment">// 有同样配置的 loader 会共享一个 worker 池</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 产生的 worker 的数量，默认是 (cpu 核心数 - 1)，或者，</span>\n      <span class="token comment">// 在 require(\'os\').cpus() 是 undefined 时回退至 1</span>\n      workers<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 一个 worker 进程中并行执行工作的数量</span>\n      <span class="token comment">// 默认为 20</span>\n      workerParallelJobs<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 额外的 node.js 参数</span>\n      workerNodeArgs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'--max-old-space-size=1024\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 允许重新生成一个僵死的 work 池</span>\n      <span class="token comment">// 这个过程会降低整体编译速度</span>\n      <span class="token comment">// 并且开发环境应该设置为 false</span>\n      poolRespawn<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 闲置时定时删除 worker 进程</span>\n      <span class="token comment">// 默认为 500（ms）</span>\n      <span class="token comment">// 可以设置为无穷大，这样在监视模式(--watch)下可以保持 worker 持续存在</span>\n      poolTimeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 池分配给 worker 的工作数量</span>\n      <span class="token comment">// 默认为 200</span>\n      <span class="token comment">// 降低这个数值会降低总体的效率，但是会提升工作分布更均一</span>\n      poolParallelJobs<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n\n      <span class="token comment">// 池的名称</span>\n      <span class="token comment">// 可以修改名称来创建其余选项都一样的池</span>\n      name<span class="token operator">:</span> <span class="token string">"my-pool"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 耗时的 loader（例如 babel-loader）</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <p><strong>预警</strong></p> <p>可以通过预警 worker 池来防止启动 worker 时的高延时。</p> <p>这会启动池内最大数量的 worker 并把指定的模块加载到 node.js 的模块缓存中。</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> threadLoader <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'thread-loader\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nthreadLoader<span class="token punctuation">.</span><span class="token function">warmup</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// 池选项，例如传递给 loader 选项</span>\n    <span class="token comment">// 必须匹配 loader 选项才能启动正确的池</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>\n    <span class="token comment">// 加载模块</span>\n    <span class="token comment">// 可以是任意模块，例如</span>\n    <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'babel-preset-es2015\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'sass-loader\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="contributing">贡献 <a href="#contributing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>如果还未阅读贡献指南，请抽时间进行阅读。</p> <p><a href="https://github.com/webpack-contrib/thread-loader/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p> <h2 id="license">License <a href="#license" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/webpack-contrib/thread-loader/blob/master/LICENSE">MIT</a></p> '}}]);