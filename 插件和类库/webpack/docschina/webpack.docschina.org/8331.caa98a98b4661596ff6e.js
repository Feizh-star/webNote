(self.webpackChunk=self.webpackChunk||[]).push([[8331],{8331:function(e){e.exports='<p>Compilation 对象有很多可用的方法和钩子。在此页面，我们将会列举出这些可用的方法和属性。</p> <h2 id="compilation-object-methods">compilation 对象方法 <a href="#compilation-object-methods" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="getstats">getStats <a href="#getstats" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <p>返回当前编译的状态对象。</p> <h3 id="addmodule">addModule <a href="#addmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, cacheGroup)</code></p> <p>向当前编译添加一个模块。</p> <p>参数：</p> <ul> <li><code>module</code> - 要添加的模块</li> <li><code>cacheGroup</code> - 模块的 <code>cacheGroup</code></li> </ul> <h3 id="getmodule">getModule <a href="#getmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module)</code></p> <p>通过编译的标识符获取其模块。</p> <p>参数：</p> <ul> <li><code>module</code> - 要获取的模块。标识符是通过编译使用 <code>module.identifier()</code> 方法从模块中提取的。</li> </ul> <h3 id="findmodule">findModule <a href="#findmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module)</code></p> <p>尝试通过其标识符搜索模块。</p> <p>参数：</p> <ul> <li><code>module</code> - 要搜索的模块。标识符是通过编译使用 <code>module.identifier()</code> 方法从模块中提取的。</li> </ul> <h3 id="waitforbuildingfinished">waitForBuildingFinished <a href="#waitforbuildingfinished" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, callback)</code></p> <p>在构建给定模块时运行给定的 <code>callback</code> 函数。</p> <p>参数：</p> <ul> <li><code>module</code> - 有问题的模块。</li> <li><code>callback</code> - 要调用的函数。</li> </ul> <h3 id="buildmodule">buildModule <a href="#buildmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, optional, origin, dependencies)</code></p> <p>构建给定的模块。</p> <p>参数：</p> <ul> <li><code>module</code> - 要构建的模块。</li> <li><code>optional</code> - 可选标志。</li> <li><code>origin</code> - 请求此模块构建的原始模块。</li> <li><code>dependencies</code> - 要构建模块的可选依赖。</li> </ul> <h3 id="processmoduledependencies">processModuleDependencies <a href="#processmoduledependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, callback)</code></p> <p>处理给定模块依赖。</p> <p>参数：</p> <ul> <li><code>module</code> - 要被处理依赖的模块。</li> <li><code>callback</code> - 模块依赖处理完成时回调的函数。</li> </ul> <h3 id="addmoduledependencies">addModuleDependencies <a href="#addmoduledependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, dependencies, bail, cacheGroup, recursive, callback)</code></p> <p>向模块添加依赖。处理依赖之后被 <code>processModuleDependencies</code> 自动调用。</p> <p>参数：</p> <ul> <li><code>module</code> - 要添加依赖的模块。</li> <li><code>dependencies</code> - 要遍历添加到模块的一组已排序依赖。</li> <li><code>bail</code> - 发生错误时是否中断进程并抛出 error。</li> <li><code>cacheGroup</code> - 模块的 <code>cacheGroup</code>。</li> <li><code>recursive</code> - 是否要递归遍历。</li> <li><code>callback</code> - 添加模块依赖之后回调的函数。</li> </ul> <h3 id="addentry">addEntry <a href="#addentry" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (context, entry, name, callback)</code></p> <p>为编译添加入口。</p> <p>参数：</p> <ul> <li><code>context</code> - 入口的上下文路径。</li> <li><code>entry</code> - 入口依赖。</li> <li><code>name</code> - 入口名称。</li> <li><code>callback</code> - 添加入口完成之后回调的函数。</li> </ul> <h3 id="prefetch">prefetch <a href="#prefetch" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (context, dependency, callback)</code></p> <p>根据给定的依赖创建一个模块。</p> <p>参数：</p> <ul> <li><code>context</code> - 上下文路径。</li> <li><code>dependency</code> - 被用来创建模块的依赖。</li> <li><code>callback</code> - 向上一级发送模块的模块回调。</li> </ul> <h3 id="rebuildmodule">rebuildModule <a href="#rebuildmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, thisCallback)</code></p> <p>触发模块的重建。</p> <p>参数：</p> <ul> <li><code>module</code> - 要被重建的模块。</li> <li><code>thisCallback</code> - 模块重建完成之后调用的函数。</li> </ul> <h3 id="finish">finish <a href="#finish" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (callback)</code></p> <p>完成编译并调用给定的回调。</p> <p>参数：</p> <ul> <li><code>callback</code> - 编译完成之后调用的函数。</li> </ul> <h3 id="seal">seal <a href="#seal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (callback)</code></p> <p>封闭编译。</p> <p>参数：</p> <ul> <li><code>callback</code> - 封闭编译时回调的函数。</li> </ul> <h3 id="unseal">unseal <a href="#unseal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <p>解除封闭编译。</p> <p>参数：</p> <ul> <li><code>callback</code> - 解除封闭编译时回调的函数。</li> </ul> <h3 id="reportdependencyerrorsandwarnings">reportDependencyErrorsAndWarnings <a href="#reportdependencyerrorsandwarnings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, blocks)</code></p> <p>将给定模块的错误和警告添加到编译的错误和警告中。</p> <p>参数：</p> <ul> <li><code>module</code> - 要被报告错误与警告的模块。</li> <li><code>blocks</code> - 一组要报告的依赖块。</li> </ul> <h3 id="addchunkingroup">addChunkInGroup <a href="#addchunkingroup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (groupOptions, module, loc, request)</code></p> <p>将模块添加到现有 chunk 组或创建一个新的组。返回一个 <code>chunkGroup</code>。</p> <p>参数：</p> <ul> <li><code>groupOptions</code> - chunk 组的选项。</li> <li><code>module</code> - 引用 chunk 组的模块。</li> <li><code>loc</code> - 引用 chunk 组的位置（模块内部）。</li> <li><code>request</code> - 引用 chunk 组的请求。</li> </ul> <h3 id="addchunk">addChunk <a href="#addchunk" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (name)</code></p> <p>向 <code>compilation.chunks</code> 创建或添加一个新的 chunk。返回这个 <code>chunk</code>.</p> <p>参数：</p> <ul> <li><code>name</code> - chunk 的名称。</li> </ul> <h3 id="assigndepth">assignDepth <a href="#assigndepth" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module)</code></p> <p>为给定的模块及其依赖块递归分配 <code>depth</code> 。</p> <p>参数：</p> <ul> <li><code>module</code> - 要被分配 depth 的模块。</li> </ul> <h3 id="getdependencyreference">getDependencyReference <a href="#getdependencyreference" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, dependency)</code></p> <p>返回给定模块对依赖的引用。</p> <p>参数：</p> <ul> <li><code>module</code> - 有问题的模块。</li> <li><code>dependency</code> - 要引用的依赖。</li> </ul> <h3 id="processdependenciesblocksforchunkgroups">processDependenciesBlocksForChunkGroups <a href="#processdependenciesblocksforchunkgroups" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (inputChunkGroups)</code></p> <p>通过 <code>Module</code> 图创建 <code>Chunk</code> 图。该过程分为两个阶段完成。阶段一：遍历模块图，在 <code>chunkDependencies</code> 中创建一个基础 chunk 图。阶段二：通过基本 chunk 图遍历所有可能的方法并且跟踪可用模块。遍历过程中 <code>processDependenciesBlocksForChunkGroups</code> 将 chunk 相互连接，并将 <code>Blocks</code> 与 <code>Chunks</code> 连接. 当一个 chunk 的所有模块都已经可用且未连接不需要的 chunk 时，它将停止遍历。</p> <p>参数：</p> <ul> <li><code>inputChunkGroups</code> - 被处理的 chunk 组。</li> </ul> <h3 id="removereasonsofdependencyblock">removeReasonsOfDependencyBlock <a href="#removereasonsofdependencyblock" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, block)</code></p> <p>移除模块与依赖块之间的关系。</p> <p>参数：</p> <ul> <li><code>module</code> - 要移除的模块关系。</li> <li><code>block</code> - 依赖块。</li> </ul> <h3 id="patchchunksafterreasonremoval">patchChunksAfterReasonRemoval <a href="#patchchunksafterreasonremoval" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (module, chunk)</code></p> <p>删除依赖性原因后，修补模块和 chunk 的关系。被 <code>removeReasonsOfDependencyBlock</code> 自动调用。</p> <p>参数：</p> <ul> <li><code>module</code> - 要修复关系的模块。</li> <li><code>chunk</code> - 要修复关系的 chunk。</li> </ul> <h3 id="removechunkfromdependencies">removeChunkFromDependencies <a href="#removechunkfromdependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (block, chunk)</code></p> <p>在除去依赖性原因后，从依赖块模块和 chunk 中移除给定的 chunk。会被 <code>removeReasonsOfDependencyBlock</code> 自动调用。</p> <p>参数：</p> <ul> <li><code>block</code> - <code>Chunk</code> 的块连接。</li> <li><code>chunk</code> - 从依赖中删除的块。</li> </ul> <h3 id="sortitemswithmoduleids">sortItemsWithModuleIds <a href="#sortitemswithmoduleids" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="sortitemswithchunkids">sortItemsWithChunkIds <a href="#sortitemswithchunkids" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="summarizedependencies">summarizeDependencies <a href="#summarizedependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="createhash">createHash <a href="#createhash" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="createmoduleassets">createModuleAssets <a href="#createmoduleassets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="createchunkassets">createChunkAssets <a href="#createchunkassets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="getpath">getPath <a href="#getpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (filename, data)</code></p> <p>返回插值路径。</p> <p>参数：</p> <ul> <li><code>filename</code> - 用于通过哈希获取资源路径。</li> <li><code>data</code> - 数据对象。</li> </ul> <h3 id="getpathwithinfo">getPathWithInfo <a href="#getpathwithinfo" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (filename, data)</code></p> <p>返回插值路径和资源信息。</p> <p>参数：</p> <ul> <li><code>filename</code> - 用于通过哈希获取资源路径。</li> <li><code>data</code> - 数据对象。</li> </ul> <h3 id="createchildcompiler">createChildCompiler <a href="#createchildcompiler" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (name, outputOptions, plugins)</code></p> <p>允许在 webpack 中运行另一个 webpack 实例。但是，子编译器会应用不同的设置和配置。他会从父编译器（或者顶级编译器）中复制所有的钩子(hook)和插件(plugin)，并且创建一个子 <code>Compiler</code> 实例。 返回值为创建好的 <code>Compiler</code> 实例。</p> <p>参数：</p> <ul> <li><code>name</code> - 子 <code>Compiler</code> 的名称。</li> <li><code>outputOptions</code> - 输出选项。</li> <li><code>plugins</code> - 将被提供的 webpack 插件。</li> </ul> <h3 id="checkconstraints">checkConstraints <a href="#checkconstraints" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <h3 id="emitasset">emitAsset <a href="#emitasset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (file, source, assetInfo = {})</code></p> <blockquote class="warning"> <p>webpack 4.40.0 后可用。</p> </blockquote> <p>参数：</p> <ul> <li><code>file</code> - 资源名称。</li> <li><code>source</code> - 资源来源。</li> <li><code>assetInfo</code> - 附加资源信息。</li> </ul> <h3 id="updateasset">updateAsset <a href="#updateasset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (file, newSourceOrFunction, assetInfoUpdateOrFunction)</code></p> <blockquote class="warning"> <p>webpack 4.40.0 后可用。</p> </blockquote> <p>参数：</p> <ul> <li><code>file</code> - 资源名称。</li> <li><code>newSourceOrFunction</code> - 新资源来源或将旧资源转换为新资源的函数。</li> <li><code>assetInfoUpdateOrFunction</code> - 新资源信息或将旧资源转换为新资源的函数。</li> </ul> <h3 id="deleteasset">deleteAsset <a href="#deleteasset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (file)</code></p> <p>参数：</p> <ul> <li><code>file</code> —— 资源的文件名</li> </ul> <h3 id="getassets">getAssets <a href="#getassets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function</code></p> <blockquote class="warning"> <p>webpack 4.40.0 后可用。</p> </blockquote> <p>返回当前编译下所有资源的数组。</p> <h3 id="getasset">getAsset <a href="#getasset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function (name)</code></p> <blockquote class="warning"> <p>webpack 4.40.0 后可用。</p> </blockquote> <p>参数：</p> <ul> <li><code>name</code> - 要返回的资源名称。</li> </ul> '}}]);