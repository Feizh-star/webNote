(self.webpackChunk=self.webpackChunk||[]).push([[6490],{6490:function(n){n.exports='<p><a href="https://npmjs.com/package/css-loader"><img src="https://img.shields.io/npm/v/css-loader.svg" alt="npm"></a> <a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/css-loader.svg" alt="node"></a> <a href="https://david-dm.org/webpack-contrib/css-loader"><img src="https://david-dm.org/webpack-contrib/css-loader.svg" alt="deps"></a> <a href="https://github.com/webpack-contrib/css-loader/actions"><img src="https://github.com/webpack-contrib/css-loader/workflows/css-loader/badge.svg" alt="tests"></a> <a href="https://codecov.io/gh/webpack-contrib/css-loader"><img src="https://codecov.io/gh/webpack-contrib/css-loader/branch/master/graph/badge.svg" alt="coverage"></a> <a href="https://gitter.im/webpack/webpack"><img src="https://badges.gitter.im/webpack/webpack.svg" alt="chat"></a> <a href="https://packagephobia.now.sh/result?p=css-loader"><img src="https://packagephobia.now.sh/badge?p=css-loader" alt="size"></a></p> <p><code>css-loader</code> 会对 <code>@import</code> 和 <code>url()</code> 进行处理，就像 js 解析 <code>import/require()</code> 一样。</p> <h2 id="getting-started">快速开始 <a href="#getting-started" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>首先，你需要先安装 <code>css-loader</code>：</p> <pre><code class="hljs language-console">npm install --save-dev css-loader\n</code></pre> <p>然后把 loader 引用到你 <code>webpack</code> 的配置中。如下所示：</p> <p><strong>file.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> css <span class="token keyword">from</span> <span class="token string">"file.css"/*tpa=https://webpack.docschina.org/file.css*/</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><a href="loaders/file-loader/index.htm"/*tpa=https://webpack.docschina.org/loaders/file-loader/*/>file-loader</a> 和 <a href="loaders/file-loader/index.htm"/*tpa=https://webpack.docschina.org/loaders/file-loader/*/>url-loader</a> 能够非常好的处理资源文件，需在配置文件中进行配置，相关配置请<a href="https://github.com/webpack-contrib/css-loader#assets">参阅</a>。</p> <p>然后运行 <code>webpack</code>。</p> <h3 id="tostring"><code>toString</code> <a href="#tostring" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>你也可以直接将 css-loader 的结果作为字符串使用，例如 Angular 的组件样式。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"to-string-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>or</p> <pre><code class="hljs language-js"><span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"test.css"/*tpa=https://webpack.docschina.org/test.css*/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {String}</span></code></pre> <p>如果有 SourceMap，它们也将包含在字符串结果中。</p> <p>如果由于某种原因，你需要将 CSS 提取为纯粹的 字符串资源（即不包含在 JS 模块中），则可能需要 查看 <a href="https://github.com/peerigon/extract-loader">extract-loader</a>。 比如，当你需要对 CSS 进行后处理时，会非常有用。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"handlebars-loader"</span><span class="token punctuation">,</span> <span class="token comment">// handlebars loader 需要原始资源字符串</span>\n          <span class="token string">"extract-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="options">Options <a href="#options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th align="center">名称</th> <th align="center">类型</th> <th align="center">默认值</th> <th align="left">描述</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="名称"><span><strong><a href="#url"><code>url</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{Boolean|Function}</code></span></td> <td align="center" data-th="默认值"><span><code>true</code></span></td> <td align="left" data-th="描述"><span>启用/禁用 <code>url</code>/<code>image-set</code> 函数处理</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><a href="#import"><code>import</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{Boolean|Function}</code></span></td> <td align="center" data-th="默认值"><span><code>true</code></span></td> <td align="left" data-th="描述"><span>启用/禁用 <code>@import</code> 规则进行处理</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><a href="#modules"><code>modules</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{Boolean|String|Object}</code></span></td> <td align="center" data-th="默认值"><span><code>{auto: true}</code></span></td> <td align="left" data-th="描述"><span>启用/禁用 CSS 模块及其配置</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><a href="#sourcemap"><code>sourceMap</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{Boolean}</code></span></td> <td align="center" data-th="默认值"><span><code>compiler.devtool</code></span></td> <td align="left" data-th="描述"><span>启用/禁用生成 SourceMap</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><a href="#importloaders"><code>importLoaders</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{Number}</code></span></td> <td align="center" data-th="默认值"><span><code>0</code></span></td> <td align="left" data-th="描述"><span>启用/禁用或者设置在 css-loader 前应用的 loader 数量</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><a href="#esmodule"><code>esModule</code></a></strong></span></td> <td align="center" data-th="类型"><span><code>{Boolean}</code></span></td> <td align="center" data-th="默认值"><span><code>true</code></span></td> <td align="left" data-th="描述"><span>使用 ES 模块语法</span></td> </tr> </tbody> </table> <h3 id="url"><code>url</code> <a href="#url" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型: <code>Boolean|Function</code> 默认值: <code>true</code></p> <p>启用/禁用 <code>url</code>/<code>image-set</code> 函数进行处理。 控制 <code>url()</code> 函数的解析。 绝对 URL 和 根目录的相对 URL 都不会去解析。</p> <p>示例解决方案:</p> <pre><code>url(image.png) => require(\'image.png\'/*tpa=https://webpack.docschina.org/image.png*/)\nurl(\'image.png\'/*tpa=https://webpack.docschina.org/image.png*/) => require(\'image.png\'/*tpa=https://webpack.docschina.org/image.png*/)\nurl(./image.png) => require(\'image.png\'/*tpa=https://webpack.docschina.org/image.png*/)\nurl(\'image.png\'/*tpa=https://webpack.docschina.org/image.png*/) => require(\'image.png\'/*tpa=https://webpack.docschina.org/image.png*/)\nurl(\'../dontwritehorriblecode.com/2112.png\'/*tpa=http://dontwritehorriblecode.com/2112.png*/) => require(\'../dontwritehorriblecode.com/2112.png\'/*tpa=http://dontwritehorriblecode.com/2112.png*/)\nimage-set(url(\'image2x.png\'/*tpa=https://webpack.docschina.org/image2x.png*/) 1x, url(\'image1x.png\'/*tpa=https://webpack.docschina.org/image1x.png*/) 2x) => require(\'image1x.png\'/*tpa=https://webpack.docschina.org/image1x.png*/) and require(\'image2x.png\'/*tpa=https://webpack.docschina.org/image2x.png*/)\n</code></pre> <p>要从 <code>node_modules</code> 目录（包括 <code>resolve.modules</code>）导入资源，而对于 <code>alias</code>，请加上一个前缀 <code>~</code>：</p> <pre><code>url(~module/image.png) => require(\'module/image.png\'/*tpa=https://webpack.docschina.org/module/image.png*/)\nurl(\'~module/image.png\'/*tpa=https://webpack.docschina.org/~module/image.png*/) => require(\'module/image.png\'/*tpa=https://webpack.docschina.org/module/image.png*/)\nurl(~aliasDirectory/image.png) => require(\'otherDirectory/image.png\'/*tpa=https://webpack.docschina.org/otherDirectory/image.png*/)\n</code></pre> <h4 id="boolean"><code>Boolean</code> <a href="#boolean" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>启用/禁用 <code>url()</code> 解析。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          url<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="function"><code>Function</code> <a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>允许过滤 <code>url()</code>。所有过滤的内容 <code>url()</code> 都不会解析（保留编写时的代码）。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">url</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> resourcePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// resourcePath - css 文件的路径</span>\n\n            <span class="token comment">// 不处理 `img.png` url</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"img.png"/*tpa=https://webpack.docschina.org/img.png*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="import"><code>import</code> <a href="#import" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型: <code>Boolean|Function</code> 默认值: <code>true</code></p> <p>启用/禁用 <code>@import</code> 规则进行处理 控制 <code>@import</code> 的解析。<code>@import</code> 中的绝对 URL 会被直接移到运行时去处理。</p> <p>示例解决方案：</p> <pre><code>@import \'style.css\'/*tpa=https://webpack.docschina.org/style.css*/ => require(\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/)\n@import url(style.css) => require(\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/)\n@import url(\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/) => require(\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/)\n@import \'style.css\'/*tpa=https://webpack.docschina.org/style.css*/ => require(\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/)\n@import url(./style.css) => require(\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/)\n@import url(\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/) => require(\'style.css\'/*tpa=https://webpack.docschina.org/style.css*/)\n@import url(\'../dontwritehorriblecode.com/style.css\'/*tpa=http://dontwritehorriblecode.com/style.css*/) => @import url(\'../dontwritehorriblecode.com/style.css\'/*tpa=http://dontwritehorriblecode.com/style.css*/) in runtime\n</code></pre> <p>要从 <code>node_modules</code> 目录（包括 <code>resolve.modules</code>）导入样式，而对于 <code>alias</code>，请加上一个前缀 <code>~</code>：</p> <pre><code>@import url(~module/style.css) => require(\'module/style.css\'/*tpa=https://webpack.docschina.org/module/style.css*/)\n@import url(\'~module/style.css\'/*tpa=https://webpack.docschina.org/~module/style.css*/) => require(\'module/style.css\'/*tpa=https://webpack.docschina.org/module/style.css*/)\n@import url(~aliasDirectory/style.css) => require(\'otherDirectory/style.css\'/*tpa=https://webpack.docschina.org/otherDirectory/style.css*/)\n</code></pre> <h4 id="boolean"><code>Boolean</code> <a href="#boolean" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>启用/禁用 <code>@import</code> 解析。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token keyword">import</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="function"><code>Function</code> <a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>允许过滤 <code>@import</code>。所有过滤的内容 <code>@import</code> 都不会解析（保留编写时的代码）。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">import</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> media<span class="token punctuation">,</span> resourcePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// resourcePath - css 文件路径</span>\n\n            <span class="token comment">// 不处理 `style.css` 的导入</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"style.css"/*tpa=https://webpack.docschina.org/style.css*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="modules"><code>modules</code> <a href="#modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>Boolean|String|Object</code> 默认值：基于文件名，所有匹配正则表达式 <code>/\\.module\\.\\w+$/i.test(filename)</code> 的文件为 <code>true</code>，你可以参考<a href="https://github.com/webpack-contrib/css-loader#auto">这里</a>获取更多的信息</p> <p>启用/禁用 CSS 模块及其配置</p> <p>该 <code>modules</code> 选项启用/禁用 <strong><a href="https://github.com/css-modules/css-modules">CSS 模块</a></strong> 规范并且设置基本的行为。</p> <p>设置为 <code>false</code> 值会提升性能，因为避免了 <strong>CSS Modules</strong> 特性的解析，这对于使用普通 CSS 或者其他技术的开发人员是非常有用的。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="features"><code>Features</code> <a href="#features" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <h5 id="scope"><code>Scope</code> <a href="#scope" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>使用 <code>local</code> 值要求你指定 <code>:global</code> 类。 使用 <code>global</code> 值要求你指定 <code>:local</code> 类。 使用 <code>pure</code> 值则要求必须至少包含一个局部类或者 id。</p> <p>你可以点击 <a href="https://github.com/css-modules/css-modules">此处</a> 了解更多。</p> <p>样式可以在局部作用域中，避免影响全局作用域的样式。</p> <p>语法 <code>:local(.className)</code> 可以被用来在局部作用域中声明 className。局部的作用域标识符会以模块形式暴露出去。</p> <p>使用 <code>:local</code>（无括号）可以为此选择器启用局部模式。 <code>:global(.className)</code> 可以用来声明一个明确的全局选择器。 使用 <code>:global</code>（无括号）可以将此选择器切换至全局模式。</p> <p>loader 会用唯一的标识符 (identifier) 来替换局部选择器。所选择的唯一标识符以模块形式暴露出去。</p> <pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">:local .className</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">:local(.className .subClass)</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">:local .className .subClass :global(.global-class-name)</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-css"><span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 .global-class-name</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <blockquote> <p>ℹ️ 被导出的标识符</p> </blockquote> <pre><code class="hljs language-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token operator">:</span> <span class="token string">"_23_aKvs-b8bW2Vg3fwHozO"</span><span class="token punctuation">,</span>\n  subClass<span class="token operator">:</span> <span class="token string">"_13LGdX8RMStbBE9w-t0gZ1"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>本地选择器推荐使用驼峰命名。它们在导入的 JS 模块中更容易使用。</p> <p>你也可以使用 <code>:local(#someId)</code>，但这并不推荐。应该使用类去代替 id。</p> <h5 id="composing"><code>Composing</code> <a href="#composing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>声明本地类名时，可以从另一个本地类名组成一个本地类。</p> <pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">:local(.subClass)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> className<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>这不会导致 CSS 本身发生任何变化，但是会导出多个类名。</p> <pre><code class="hljs language-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token operator">:</span> <span class="token string">"_23_aKvs-b8bW2Vg3fwHozO"</span><span class="token punctuation">,</span>\n  subClass<span class="token operator">:</span> <span class="token string">"_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <pre><code class="hljs language-css"><span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <h5 id="importing"><code>Importing</code> <a href="#importing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>从另一个模块导入本地类名。</p> <blockquote> <p>我强烈建议您在导入文件时指定扩展名，因为可以导入具有任何扩展名的文件，而且事先并不能知道要使用哪个文件。</p> </blockquote> <pre><code class="hljs language-css"><span class="token selector">:local(.continueButton)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">"library/button.css"/*tpa=https://webpack.docschina.org/library/button.css*/</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-css"><span class="token selector">:local(.nameEdit)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit highlight from <span class="token string">"edit.css"/*tpa=https://webpack.docschina.org/edit.css*/</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>要从多个模块导入，请使用多个 <code>composes:</code> 规则。</p> <pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit hightlight from <span class="token string">"edit.css"/*tpa=https://webpack.docschina.org/edit.css*/</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">"module/button.css"/*tpa=https://webpack.docschina.org/module/button.css*/</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> classFromThisModule<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <h5 id="values"><code>Values</code> <a href="#values" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>可以使用 <code>@value</code> 来指定在整个文档中都能被重复使用的值，</p> <p>我们推荐对特定的值使用 <code>v-</code> 的前缀，给选择器使用 <code>s-</code> 的前缀，并且为媒体规则使用 <code>m-</code> 前缀。</p> <pre><code class="hljs language-css"><span class="token atrule"><span class="token rule">@value</span> <span class="token property">v-primary</span><span class="token punctuation">:</span> #BF4040<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@value</span> <span class="token property">s-black</span><span class="token punctuation">:</span> black-selector<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@value</span> <span class="token property">m-large</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 960px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n\n<span class="token selector">.header</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> v-primary<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.s-black</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@media</span> m-large</span> <span class="token punctuation">{</span>\n  <span class="token selector">.header</span> <span class="token punctuation">{</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h4 id="boolean"><code>Boolean</code> <a href="#boolean" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>启用 <strong>CSS 模块</strong> 功能。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="string"><code>String</code> <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>启用 <strong>CSS 模块</strong> 功能和设置 <code>mode</code>。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 使用 `local` 同使用 `modules: true` 的效果是一样的</span>\n          modules<span class="token operator">:</span> <span class="token string">"global"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4 id="object"><code>Object</code> <a href="#object" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>启用 <strong>CSS 模块</strong> 功能和设置选项。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            compileType<span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n            mode<span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>\n            auto<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            exportGlobals<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            localIdentName<span class="token operator">:</span> <span class="token string">"[path][name]__[local]--[hash:base64:5]"</span><span class="token punctuation">,</span>\n            localIdentContext<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            localIdentHashPrefix<span class="token operator">:</span> <span class="token string">"my-custom-hash"</span><span class="token punctuation">,</span>\n            namedExport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            exportLocalsConvention<span class="token operator">:</span> <span class="token string">"camelCase"</span><span class="token punctuation">,</span>\n            exportOnlyLocals<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="compiletype"><code>compileType</code> <a href="#compiletype" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>Type: <code>\'module\' | \'icss\'</code> Default: <code>\'module\'</code></p> <p>Controls the level of compilation applied to the input styles.</p> <p>The <code>module</code> handles <code>class</code> and <code>id</code> scoping and <code>@value</code> values. The <code>icss</code> will only compile the low level <code>Interoperable CSS</code> format for declaring <code>:import</code> and <code>:export</code> dependencies between CSS and other languages.</p> <p>ICSS underpins CSS Module support, and provides a low level syntax for other tools to implement CSS-module variations of their own.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            compileType<span class="token operator">:</span> <span class="token string">"icss"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="auto"><code>auto</code> <a href="#auto" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>Boolean|RegExp|Function</code> 默认：<code>\'true\'</code></p> <p>允许基于文件名自动启用 CSS 模块。</p> <h6 id="boolean"><code>Boolean</code> <a href="#boolean" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>可能的值：</p> <ul> <li><code>true</code> - 为所有 <code>/\\.module\\.\\w+$/i.test(filename)</code> 返回 true 的文件启用 css 模块</li> <li><code>false</code> - 禁用 css 模块</li> </ul> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            auto<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h6 id="regexp"><code>RegExp</code> <a href="#regexp" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>根据正则表达式检查文件名，为匹配的文件启用 css 模块。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            auto<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.custom-module\\.\\w+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h6 id="function"><code>Function</code> <a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>根据过滤器检查文件名，为满足过滤要求的文件启用css模块。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function-variable function">auto</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">resourcePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> resourcePath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".custom-module.css"/*tpa=https://webpack.docschina.org/.custom-module.css*/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="mode"><code>mode</code> <a href="#mode" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>String|Function</code> 默认：<code>\'local\'</code></p> <p>设置 <code>mode</code> 选项。需要 <code>local</code> 模式时可以忽略该值。</p> <h6 id="string"><code>String</code> <a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>可能的值 - <code>local</code>，<code>global</code>，和 <code>pure</code>。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            mode<span class="token operator">:</span> <span class="token string">"global"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h6 id="function"><code>Function</code> <a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h6> <p>允许根据文件名设置不同的 <code>mode</code> 选项值。</p> <p>可能的返回值 - <code>local</code>，<code>global</code>，和 <code>pure</code>。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 回调必须返回 `local`，`global`，或者 `pure`</span>\n            <span class="token function-variable function">mode</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">resourcePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">pure.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">"pure"</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n\n              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">global.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">"global"</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n\n              <span class="token keyword">return</span> <span class="token string">"local"</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="localidentname"><code>localIdentName</code> <a href="#localidentname" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>String</code> 默认：<code>\'[hash:base64]\'</code></p> <p>允许配置生成的本地标识符(ident) 查看<a href="https://github.com/webpack/loader-utils#interpolatename">loader-utils 的文档</a>获取选项更多的信息.</p> <p>建议：</p> <ul> <li>开发环境使用 <code>\'[path][name]__[local]\'</code></li> <li>生产环境使用 <code>\'[hash:base64]\'</code></li> </ul> <p><code>[local]</code> 占位符包含原始的类。</p> <p>**注意：**所有保留 (<code>&#x3C;>:"/\\|?*</code>) 和控制文件系统字符 (不包括 <code>[local]</code> 占位符) 都将转换为 <code>-</code>。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            localIdentName<span class="token operator">:</span> <span class="token string">"[path][name]__[local]--[hash:base64:5]"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="localidentcontext"><code>localIdentContext</code> <a href="#localidentcontext" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>String</code> 默认：<code>compiler.context</code></p> <p>允许为本地标识符名称重新定义基本的 loader 上下文。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            localIdentContext<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="localidenthashprefix"><code>localIdentHashPrefix</code> <a href="#localidenthashprefix" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>String</code> 默认：<code>undefined</code></p> <p>允许添加自定义哈希值以生成更多唯一类。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            localIdentHashPrefix<span class="token operator">:</span> <span class="token string">"hash"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="localidentregexp"><code>localIdentRegExp</code> <a href="#localidentregexp" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>String|RegExp</code> 默认：<code>undefined</code></p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            localIdentRegExp<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">page-(.*)\\.css</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="getlocalident"><code>getLocalIdent</code> <a href="#getlocalident" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>Function</code> 默认：<code>undefined</code></p> <p>可以指定自定义 <code>getLocalIdent</code> 函数的绝对路径，以基于不同的架构生成类名。 默认情况下，我们使用内置函数来生成 classname。 如果自定义函数返回 <code>null</code> 或者 <code>undefined</code>， 我们将降级使用内置函数来生成 classname。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function-variable function">getLocalIdent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> localIdentName<span class="token punctuation">,</span> localName<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token string">"whatever_random_class_name"</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="namedexport"><code>namedExport</code> <a href="#namedexport" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>Boolean</code> 默认：<code>false</code></p> <p>本地环境启用/禁用 export 的 ES 模块。</p> <blockquote> <p>⚠ 本地环境的命名将转换为驼峰格式，即 <code>exportLocalsConvention</code> 选项默认设置了 <code>camelCaseOnly</code>。</p> </blockquote> <blockquote> <p>⚠ 不允许在 CSS 类名中使用 JavaScript 保留字。</p> </blockquote> <p><strong>styles.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.foo-baz</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bar</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> fooBaz<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"styles.css"/*tpa=https://webpack.docschina.org/styles.css*/</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooBaz<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>可以使用以下命令启用 export 的 ES 模块：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            namedExport<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="exportglobals"><code>exportGlobals</code> <a href="#exportglobals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>Boolean</code> 默认：<code>false</code></p> <p>允许 <code>css-loader</code> 从全局类或 ID 导出名称，因此您可以将其用作本地名称。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            exportGlobals<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="exportlocalsconvention"><code>exportLocalsConvention</code> <a href="#exportlocalsconvention" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>String</code> 默认：取决于 <code>modules.namedExport</code> 选项值，如果为 <code>true</code> 则对应的是 <code>camelCaseOnly</code>，反之对应的是 <code>asIs</code></p> <p>导出的类名称的样式。</p> <p>默认情况下，导出的 JSON 密钥反映了类名（即 <code>asIs</code> 值）。</p> <blockquote> <p>⚠ 如果你设置 <code>namedExport</code> 为 <code>true</code> 那么只有 <code>camelCaseOnly</code> 被允许。</p> </blockquote> <table> <thead> <tr> <th align="center">名称</th> <th align="center">类型</th> <th align="left">描述</th> </tr> </thead> <tbody> <tr> <td align="center" data-th="名称"><span><strong><code>\'asIs\'</code></strong></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="left" data-th="描述"><span>类名将按原样导出。</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>\'camelCase\'</code></strong></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="left" data-th="描述"><span>类名将被驼峰化，原类名不会从局部环境删除</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>\'camelCaseOnly\'</code></strong></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="left" data-th="描述"><span>类名将被驼峰化，原类名从局部环境删除</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>\'dashes\'</code></strong></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="left" data-th="描述"><span>类名中只有破折号会被驼峰化</span></td> </tr> <tr> <td align="center" data-th="名称"><span><strong><code>\'dashesOnly\'</code></strong></span></td> <td align="center" data-th="类型"><span><code>{String}</code></span></td> <td align="left" data-th="描述"><span>类名中破折号会被驼峰，原类名从局部环境删除</span></td> </tr> </tbody> </table> <p><strong>file.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.class-name</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>file.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> className <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"file.css"/*tpa=https://webpack.docschina.org/file.css*/</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            exportLocalsConvention<span class="token operator">:</span> <span class="token string">"camelCase"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h5 id="exportonlylocals"><code>exportOnlyLocals</code> <a href="#exportonlylocals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h5> <p>类型：<code>Boolean</code> 默认：<code>false</code></p> <p>仅导出局部环境。</p> <p>使用 <strong>css 模块</strong> 进行预渲染（例如 SSR）时<strong>很有用</strong>。 要进行预渲染，<strong>预渲染包</strong> 应使用 <code>mini-css-extract-plugin</code> 选项而不是 <code>style-loader!css-loader</code>。 它不嵌入 CSS，而仅导出标识符映射。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n            exportOnlyLocals<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="sourcemap"><code>sourceMap</code> <a href="#sourcemap" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>Boolean</code> 默认：取决于 <code>compiler.devtool</code> 的值。</p> <p>默认情况下，SouceMap 的生成取决于 <a href="configuration/devtool/index.htm"/*tpa=https://webpack.docschina.org/configuration/devtool/*/><code>devtool</code></a> 选项。除eval和false值外，所有值均都会生成 SouceMap。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          sourceMap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="importloaders"><code>importLoaders</code> <a href="#importloaders" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>Number</code> 默认：<code>0</code></p> <p>启用/禁用或设置在CSS加载程序之前应用的加载程序的数量。</p> <p><code>importLoaders</code> 选项允许你配置在 <code>css-loader</code> 之前有多少 loader 应用于<code>@import</code>ed 资源。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              importLoaders<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n              <span class="token comment">// 0 => no loaders (default);</span>\n              <span class="token comment">// 1 => postcss-loader;</span>\n              <span class="token comment">// 2 => postcss-loader, sass-loader</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>\n          <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>当模块系统（即 webpack）支持按来源匹配 loader 时，这种情况将来可能会改变。</p> <h3 id="esmodule"><code>esModule</code> <a href="#esmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>类型：<code>Boolean</code> 默认：<code>true</code></p> <p>默认情况下，<code>css-loader</code> 生成使用 ES 模块语法的 JS 模块。 在某些情况下，使用 ES 模块是有益的，例如在<a href="plugins/module-concatenation-plugin/index.htm"/*tpa=https://webpack.docschina.org/plugins/module-concatenation-plugin/*/>模块串联</a>或 <a href="guides/tree-shaking/index.htm"/*tpa=https://webpack.docschina.org/guides/tree-shaking/*/>tree shaking</a> 时。</p> <p>您可以使用以下方式启用ES模块语法：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="examples">示例 <a href="#examples" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="assets">资源 <a href="#assets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>如下配置的 <code>webpack.config.js</code> 可以加载 CSS 文件，嵌入小的 PNG/JPG/GIF/SVG 图片以及字体作为<a href="https://tools.ietf.org/html/rfc2397">数据 URL</a>，并将较大的文件复制到输出目录。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          limit<span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="extract">提取 <a href="#extract" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>对于生产版本，建议以后从 bundle 中提取 CSS，以便以后可以使用 CSS/JS 资源的并行加载。</p> <ul> <li> <p><a href="plugins/mini-css-extract-plugin/index.htm"/*tpa=https://webpack.docschina.org/plugins/mini-css-extract-plugin/*/>mini-css-extract-plugin</a> 可以在生产模式下运行时使用来提取CSS。</p> </li> <li> <p>或者，如果寻求更好的开发性能和可模仿生产的CSS输出。 <a href="https://github.com/faceyspacey/extract-css-chunks-webpack-plugin">extract-css-chunks-webpack-plugin</a> 提供了支持热重载的 mini-css-extract-plugin 扩展版本。开发人员中的 HMR 模式下的真实 CSS 文件，与非开发人员中的 mini-css 是一样的效果。</p> </li> </ul> <h3 id="pure-css-css-modules-and-postcss">纯 CSS，CSS 模块和 PostCSS <a href="#pure-css-css-modules-and-postcss" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>如果项目中没有纯 CSS（没有 CSS 模块），CSS 模块和 PostCSS，则可以使用以下设置：</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 对于 pure CSS - /\\.css$/i,</span>\n        <span class="token comment">// 对于 Sass/SCSS - /\\.((c|sa|sc)ss)$/i,</span>\n        <span class="token comment">// 对于 Less - /\\.((c|le)ss)$/i,</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.((c|sa|sc)ss)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token comment">// 每一个 CSS 的 `@import` 都运行 `postcss-loader`，不要忘了 `sass-loader` 将不属于 CSS 的 `@import` 编译到一个文件中 </span>\n              <span class="token comment">// 如果您需要在每个 CSS 的 `@import` 上运行 `sass-loader` 和 `postcss-loader`，请将其设置为 `2`。</span>\n              importLoaders<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n              <span class="token comment">// 对于满足 `/\\.module\\.\\w+$/i` 正则匹配发热文件自动启用 css 模块。</span>\n              modules<span class="token operator">:</span> <span class="token punctuation">{</span> auto<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">plugins</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token function">postcssPresetEnv</span><span class="token punctuation">(</span><span class="token punctuation">{</span> stage<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token comment">// 也可能是 `less-loader`</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|svg|eot|ttf|woff|woff2)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        loader<span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> <span class="token punctuation">{</span>\n          limit<span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolve-unresolved-urls-using-an-alias">使用别名解析未解析的 URL <a href="#resolve-unresolved-urls-using-an-alias" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>index.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">.class</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/assets/unresolved/img.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">"assets/unresolved/img.png"/*tpa=https://webpack.docschina.org/assets/unresolved/img.png*/</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>\n        __dirname<span class="token punctuation">,</span>\n        <span class="token string">"assets/real-path-to-img/img.png"/*tpa=https://webpack.docschina.org/assets/real-path-to-img/img.png*/</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="separating-interoperable-css-only-and-css-module-features">只允许 <code>可交互的 CSS</code> 使其与 <code>CSS Module</code> 特性分离<a href="#separating-interoperable-css-only-and-css-module-features" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>下面是有关配置的示例代码，通过为所有未匹配到 <code>*.module.scss</code> 命名约定文件设置 <code>compileType</code> 选项，只允许使用 <code>可交互的 CSS</code> 特性（如 <code>:import</code> 和 <code>:export</code>），而不使用其他的 <code>CSS Module</code> 特性。此处仅供参考，因为在 v4 之前，<code>css-loader</code> 默认将 <code>ICSS</code> 特性应用于所有文件。 同时，在本示例中，匹配到 <code>*.module.scss</code> 的所有文件都将被视为 <code>CSS Modules</code>。</p> <p>假设项目中有这样一个需求，要求 canvas 绘制使用的变量与 CSS 同步，换句话说就是 canvas 绘制使用的颜色（在 JavaScript 中设置的颜色名）与 HTML 背景（在 CSS 中通过 class 设置）相同。</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// ...</span>\n      <span class="token comment">// --------</span>\n      <span class="token comment">// SCSS ALL EXCEPT MODULES</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.module\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              importLoaders<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n              modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n                compileType<span class="token operator">:</span> <span class="token string">\'icss\'</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'sass-loader\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// --------</span>\n      <span class="token comment">// SCSS MODULES</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.module\\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'style-loader\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              importLoaders<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n              modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n                compileType<span class="token operator">:</span> <span class="token string">\'module\'</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">\'sass-loader\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// --------</span>\n      <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>variables.scss</strong></p> <p>文件被视为仅使用 <code>ICSS</code>。</p> <pre><code class="hljs language-scss"><span class="token property"><span class="token variable">$colorBackground</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token selector">:export </span><span class="token punctuation">{</span>\n  <span class="token property">colorBackgroundCanvas</span><span class="token punctuation">:</span> <span class="token variable">$colorBackground</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>Component.module.scss</strong></p> <p>文件被视为 <code>CSS Module</code>。</p> <pre><code class="hljs language-scss"><span class="token keyword">@import</span> <span class="token string">"https://webpack.docschina.org/variables.scss"</span><span class="token punctuation">;</span>\n<span class="token selector">.componentClass </span><span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$colorBackground</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>Component.jsx</strong></p> <p>在 JavaScript 中直接使用 <code>CSS Module</code> 的特性以及 SCSS 声明的变量。</p> <pre><code class="hljs language-jsx">import svars from "https://webpack.docschina.org/variables.scss";\nimport styles from "https://webpack.docschina.org/Component.module.scss";\n\n// Render DOM with CSS modules class name\n// &#x3C;div className={styles.componentClass}>\n//   &#x3C;canvas ref={mountsCanvas}/>\n// &#x3C;/div>\n\n// Somewhere in JavaScript canvas drawing code use the variable directly\n// const ctx = mountsCanvas.current.getContext(\'2d\',{alpha: false});\nctx.fillStyle = `${svars.colorBackgroundCanvas}`;\n</code></pre> <h2 id="contributing">Contributing <a href="#contributing" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>如果您还没有阅读，请花一点时间阅读我们的贡献指南。</p> <p><a href="https://github.com/webpack-contrib/css-loader/blob/master/.github/CONTRIBUTING.md">贡献</a></p> <h2 id="license">License <a href="#license" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://github.com/webpack-contrib/css-loader/blob/master/LICENSE">MIT</a></p> '}}]);