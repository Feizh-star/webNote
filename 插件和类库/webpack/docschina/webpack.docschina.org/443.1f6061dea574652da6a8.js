(self.webpackChunk=self.webpackChunk||[]).push([[443],{443:function(a){a.exports='<p>为了更合适且方便地使用配置，可以在 <code>webpack.config.js</code> 中对 webpack 进行配置。CLI 中传入的任何参数会在配置文件中映射为对应的参数。</p> <p>如果你还没有安装过 webpack 和 CLI，请先阅读 <a href="guides/installation.htm"/*tpa=https://webpack.docschina.org/guides/installation*/>安装指南</a>。</p> <h2 id="commands">命令 <a href="#commands" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack-cli 提供了许多命令来使 webpack 的工作变得简单。默认情况下，webpack 提供了以下命令：</p> <table> <thead> <tr> <th>命令</th> <th>别名</th> <th>描述</th> </tr> </thead> <tbody> <tr> <td data-th="命令"><span><code>init</code></span></td> <td data-th="别名"><span>c</span></td> <td data-th="描述"><span>初始化一个新的 webpack 配置</span></td> </tr> <tr> <td data-th="命令"><span><code>migrate</code></span></td> <td data-th="别名"><span>m</span></td> <td data-th="描述"><span>将配置迁移到新版本</span></td> </tr> <tr> <td data-th="命令"><span><code>loader</code></span></td> <td data-th="别名"><span>l</span></td> <td data-th="描述"><span>生成一个 loader 仓库</span></td> </tr> <tr> <td data-th="命令"><span><code>plugin</code></span></td> <td data-th="别名"><span>p</span></td> <td data-th="描述"><span>生成一个 plugin 仓库</span></td> </tr> <tr> <td data-th="命令"><span><code>info</code></span></td> <td data-th="别名"><span>i</span></td> <td data-th="描述"><span>输出有关系统和依赖的信息</span></td> </tr> <tr> <td data-th="命令"><span><code>serve</code></span></td> <td data-th="别名"><span>s</span></td> <td data-th="描述"><span>运行 webpack Dev Server</span></td> </tr> </tbody> </table> <h2 id="flags">Flags <a href="#flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack-cli 提供了许多 flag 来使 webpack 的工作变得简单。默认情况下，webpack 提供了以下 flag：</p> <p>注意：这些是 webpack v4 的 flag，从 v5 开始 CLI 开始支持 <a href="api/cli/index.htm#core-flags"/*tpa=https://webpack.docschina.org/api/cli/#core-flags*/>核心 flags</a>。</p> <table> <thead> <tr> <th>Flag / 别名</th> <th>类型</th> <th>描述</th> </tr> </thead> <tbody> <tr> <td data-th="Flag / 别名"><span><code>--entry</code></span></td> <td data-th="类型"><span>string[]</span></td> <td data-th="描述"><span>应用程序的入口文件，例如 <code>./src/main.js</code></span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--config, -c</code></span></td> <td data-th="类型"><span>string[]</span></td> <td data-th="描述"><span>提供 webpack 配置文件的路径，例如 <code>./webpack.config.js</code></span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--config-name</code></span></td> <td data-th="类型"><span>string[]</span></td> <td data-th="描述"><span>要使用的配置名</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--name</code></span></td> <td data-th="类型"><span>string</span></td> <td data-th="描述"><span>配置名称，在加载多个配置时使用</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--color</code></span></td> <td data-th="类型"><span>boolean</span></td> <td data-th="描述"><span>启用控制台颜色</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--merge, -m</code></span></td> <td data-th="类型"><span>boolean</span></td> <td data-th="描述"><span>使用 webpack-merge 合并两个配置文件，例如 <code>-c ./webpack.config.js -c ./webpack.test.config.js</code></span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--env</code></span></td> <td data-th="类型"><span>string[]</span></td> <td data-th="描述"><span>当它是一个函数时，传递给配置的环境变量</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--progress</code></span></td> <td data-th="类型"><span>boolean, string</span></td> <td data-th="描述"><span>在构建过程中打印编译进度</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--help</code></span></td> <td data-th="类型"><span>boolean</span></td> <td data-th="描述"><span>输出所有支持的 flag 和命令</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--output-path, -o</code></span></td> <td data-th="类型"><span>string</span></td> <td data-th="描述"><span>webpack 生成文件的输出位置，例如 <code>./dist</code></span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--target, -t</code></span></td> <td data-th="类型"><span>string[]</span></td> <td data-th="描述"><span>设置要构建的 target</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--watch, -w</code></span></td> <td data-th="类型"><span>boolean</span></td> <td data-th="描述"><span>监听文件变化</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--hot, -h</code></span></td> <td data-th="类型"><span>boolean</span></td> <td data-th="描述"><span>启用 HMR</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--devtool, -d</code></span></td> <td data-th="类型"><span>string</span></td> <td data-th="描述"><span>控制是否生成 source map，以及如何生成</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--prefetch</code></span></td> <td data-th="类型"><span>string</span></td> <td data-th="描述"><span>预先发生请求</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--json, -j</code></span></td> <td data-th="类型"><span>boolean, string</span></td> <td data-th="描述"><span>将结果打印成 JSON 格式或存储在文件中</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--mode</code></span></td> <td data-th="类型"><span>string</span></td> <td data-th="描述"><span>定义 webpack 所需的 mode</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--version, -v</code></span></td> <td data-th="类型"><span>boolean</span></td> <td data-th="描述"><span>获取当前 cli 版本</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--stats</code></span></td> <td data-th="类型"><span>boolean, string</span></td> <td data-th="描述"><span>它告诉 webpack 如何处理 stats</span></td> </tr> <tr> <td data-th="Flag / 别名"><span><code>--analyze</code></span></td> <td data-th="类型"><span>boolean</span></td> <td data-th="描述"><span>它调用 <code>webpack-bundle-analyzer</code> 插件来获取 bundle 信息</span></td> </tr> </tbody> </table> <h3 id="negated-flags">Negated Flags <a href="#negated-flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <table> <thead> <tr> <th>Flag</th> <th>描述</th> </tr> </thead> <tbody> <tr> <td data-th="Flag"><span>--no-color</span></td> <td data-th="描述"><span>禁用控制台颜色</span></td> </tr> <tr> <td data-th="Flag"><span>--no-hot</span></td> <td data-th="描述"><span>如果你通过配置启用了 HMR，则禁用它</span></td> </tr> <tr> <td data-th="Flag"><span>--no-stats</span></td> <td data-th="描述"><span>禁用任何由 webpack emit 出来的 stats</span></td> </tr> <tr> <td data-th="Flag"><span>--no-watch</span></td> <td data-th="描述"><span>禁用文件变更的监听</span></td> </tr> <tr> <td data-th="Flag"><span>--no-devtool</span></td> <td data-th="描述"><span>禁止生成 source maps</span></td> </tr> </tbody> </table> <h3 id="core-flags">核心 Flags <a href="#core-flags" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>从 CLI v4 和 webpack v5 开始，CLI 将采用从 webpack 的 core 中导入整个配置的模式，允许 CLI 调整几乎所有配置项。</p> <p><strong>链接中是 webpack v5 和 CLI v4 支持的所有核心 flag 列表 - <a href="https://github.com/webpack/webpack-cli/tree/next/packages/webpack-cli#webpack-5">详戳</a></strong></p> <p>例如，如果你想在项目中启用性能提示，你需在配置中使用<a href="configuration/performance/index.htm#performancehints"/*tpa=https://webpack.docschina.org/configuration/performance/#performancehints*/>此</a>选项，而如果使用核心 flag，你可以这样做：</p> <pre><code class="hljs language-bash">npx webpack --performance-hints warning</code></pre> <h2 id="usage">用法 <a href="#usage" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="with-configuration-file">使用配置文件 <a href="#with-configuration-file" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-bash">npx webpack <span class="token punctuation">[</span>--config webpack.config.js<span class="token punctuation">]</span></code></pre> <p>配置文件中的相关选项，请参阅<a href="configuration.htm"/*tpa=https://webpack.docschina.org/configuration*/>配置</a>。</p> <h3 id="without-configuration-file">不使用配置文件 <a href="#without-configuration-file" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-bash">npx webpack <span class="token operator">&#x3C;</span>entry<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&#x3C;</span>entry<span class="token operator">></span><span class="token punctuation">]</span> -o <span class="token operator">&#x3C;</span>output-path<span class="token operator">></span></code></pre> <p><strong>example</strong></p> <pre><code class="hljs language-bash">npx webpack --entry ./first.js --entry ./second.js --output-path /build</code></pre> <p><strong><code>&#x3C;entry></code></strong></p> <p>构建项目时入口可以配置一个文件名或一组被命名过的文件名。你可以传递多个入口（每个入口在启动时加载）。如果传递一个形式为 <code>&#x3C;name> = &#x3C;request></code> 的键值对，则可以创建一个额外的入口起点。它将被映射到配置选项（configuration option）的 <code>entry</code> 属性中。</p> <p><strong><code>&#x3C;output></code></strong></p> <p>用于存储构建后的文件路径。它将映射到配置选项 <code>output.path</code>。</p> <p><strong>示例</strong></p> <p>假设你的项目结构像下面这样：</p> <pre><code class="hljs language-bash"><span class="token builtin class-name">.</span>\n├── dist\n├── index.html\n└── src\n    ├── index.js\n    ├── index2.js\n    └── others.js</code></pre> <pre><code class="hljs language-bash">npx webpack ./src/index.js -o dist</code></pre> <p>这将对源码进行打包，其入口为 <code>index.js</code>，且 bundle 文件的输出路径为 <code>dist</code>。</p> <pre><code class="hljs language-bash">asset main.js <span class="token number">142</span> bytes <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span>\n./src/index.js <span class="token number">30</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n./src/others.js <span class="token number">1</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.1</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">187</span> ms</code></pre> <pre><code class="hljs language-bash">npx webpack ./src/index.js ./src/others2.js -o dist/</code></pre> <p>以多个入口的方式打包文件</p> <pre><code class="hljs language-bash">asset main.js <span class="token number">142</span> bytes <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span>\n./src/index.js <span class="token number">30</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n./src/others2.js <span class="token number">1</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n./src/others.js <span class="token number">1</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.1</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">198</span> ms</code></pre> <h2 id="default-configurations">默认配置 <a href="#default-configurations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>CLI 会在你的项目路径中寻找默认配置，以下是 CLI 采集到的配置文件。</p> <p>此处按顺序递增进行优先级查询：</p> <blockquote> <p>示例 —— 配置文件的查找顺序 .webpack/webpackfile > .webpack/webpack.config.js > webpack.config.js</p> </blockquote> <pre><code class="hljs language-txt">\'webpack.config\',\n\'.webpack/webpack.config\',\n\'.webpack/webpackfile\',\n</code></pre> <h2 id="common-options">通用配置 <a href="#common-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <blockquote class="warning"> <p>注意，命令行接口（Command Line Interface）参数的优先级，高于配置文件参数。例如，如果将 <a href="configuration/mode/index.htm#usage"/*tpa=https://webpack.docschina.org/configuration/mode/#usage*/><code>--mode="production"</code></a> 传入 webpack CLI，而配置文件使用的是 <code>development</code>，最终会使用 <code>production</code>。</p> </blockquote> <p><strong>列出命令行所有可用的命令和 flag</strong></p> <pre><code class="hljs language-bash">npx webpack --help</code></pre> <p><strong>显示单个命令或标志的帮助提示</strong></p> <pre><code class="hljs language-bash">npx webpack --help <span class="token operator">&#x3C;</span>command<span class="token operator">></span>\nnpx webpack --help --<span class="token operator">&#x3C;</span>flag<span class="token operator">></span></code></pre> <p><strong>显示已安装的 package 以及子 package 的版本</strong>。</p> <p>如需检查你正在使用的 <code>webpack</code> 和 <code>webpack-cli</code> 的版本，只需运行如下命令：</p> <pre><code class="hljs language-bash">npx webpack --version</code></pre> <p>运行结果如下：</p> <pre><code class="hljs language-bash">webpack-cli <span class="token number">4.2</span>.0\nwebpack <span class="token number">5.4</span>.0</code></pre> <p>如需检查 <code>webpack-cli</code> 子包的版本（如 <code>@webpack-cli/init</code>），只需运行如下命令：</p> <pre><code class="hljs language-bash">npx webpack init --version</code></pre> <p>运行结果如下：</p> <pre><code class="hljs language-bash">@webpack-cli/init <span class="token number">1.0</span>.3\nwebpack-cli <span class="token number">4.2</span>.0\nwebpack <span class="token number">5.4</span>.0</code></pre> <p><strong>使用配置文件进行构建</strong></p> <p>指定其它的<a href="configuration.htm"/*tpa=https://webpack.docschina.org/configuration*/>配置</a>文件。配置文件默认为 <code>webpack.config.js</code>，如果你想使用其它配置文件，可以加入这个参数。</p> <pre><code class="hljs language-bash">npx webpack --config example.config.js</code></pre> <p><strong>以 JSON 格式输出 webpack 的运行结果</strong></p> <pre><code class="hljs language-bash">npx webpack --json</code></pre> <p><strong>如果你想把 stats 数据存储为 JSON 而非输出，你可以使用：</strong></p> <pre><code class="hljs language-bash">npx webpack --json stats.json</code></pre> <p>在其他情况下，webpack 会打印出 bundle、chunk 以及 timing 细节的 stats 信息。使用此选项，会输出 JSON 对象。这个输出结果可以被 webpack 的 <a href="https://webpack.github.io/analyse/">analyse 工具</a>，或者 chrisbateman 的 <a href="https://chrisbateman.github.io/webpack-visualizer/">webpack-visualizer</a>，再或者 th0r 的 <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a> 所识别。analyse 工具会接收 JSON，并以图形的形式展示所有构建的细节。</p> <blockquote class="tip"> <p>请查阅 <a href="api/stats.htm"/*tpa=https://webpack.docschina.org/api/stats*/>stats 数据 api</a>，了解更多关于生成的 stats 数据。</p> </blockquote> <h2 id="environment-options">Environment 选项 <a href="#environment-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>当 webpack 配置<a href="configuration/configuration-types/index.htm#exporting-a-function"/*tpa=https://webpack.docschina.org/configuration/configuration-types/#exporting-a-function*/>导出为函数时</a>，会接收到一个 "environment" 的参数。</p> <pre><code class="hljs language-bash">npx webpack --env production    <span class="token comment"># sets env.production == true</span></code></pre> <p><code>--env</code> 参数可以接收多个值：</p> <table> <thead> <tr> <th>Invocation</th> <th>Resulting environment</th> </tr> </thead> <tbody> <tr> <td data-th="Invocation"><span><code>npx webpack --env prod</code></span></td> <td data-th="Resulting environment"><span><code>{ prod: true }</code></span></td> </tr> <tr> <td data-th="Invocation"><span><code>npx webpack --env prod --env min</code></span></td> <td data-th="Resulting environment"><span><code>{ prod: true, min: true }</code></span></td> </tr> <tr> <td data-th="Invocation"><span><code>npx webpack --env platform=app --env production</code></span></td> <td data-th="Resulting environment"><span><code>{ platform: "app", production: true }</code></span></td> </tr> <tr> <td data-th="Invocation"><span><code>npx webpack --env app.platform="staging" --env app.name="test"</code></span></td> <td data-th="Resulting environment"><span><code>{ app: { platform: "staging", name: "test" }</code></span></td> </tr> </tbody> </table> <blockquote class="tip"> <p>请查阅 <a href="guides/environment-variables/index.htm"/*tpa=https://webpack.docschina.org/guides/environment-variables/*/>environment 变量指南</a>了解更多信息及用法。</p> </blockquote> <h2 id="configuration-options">配置选项 <a href="#configuration-options" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>输入类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td data-th="参数"><span><code>--config</code></span></td> <td data-th="说明"><span>配置文件的路径</span></td> <td data-th="输入类型"><span>string</span></td> <td data-th="默认值"><span><a href="api/cli/index.htm#default-configurations"/*tpa=https://webpack.docschina.org/api/cli/#default-configurations*/>默认配置</a></span></td> </tr> <tr> <td data-th="参数"><span><code>--config-name</code></span></td> <td data-th="说明"><span>要使用的配置名</span></td> <td data-th="输入类型"><span>string</span></td> <td></td> </tr> <tr> <td data-th="参数"><span><code>--env</code></span></td> <td data-th="说明"><span>当配置文件为函数时，environment 将作为参数传递给配置</span></td> <td data-th="输入类型"><span>-</span></td> <td></td> </tr> <tr> <td data-th="参数"><span><code>--mode</code></span></td> <td data-th="说明"><span>要使用的 mode</span></td> <td data-th="输入类型"><span>string</span></td> <td data-th="默认值"><span><code>\'production\'</code></span></td> </tr> </tbody> </table> <h2 id="analyzing-bundle">分析 Bundle <a href="#analyzing-bundle" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>你可以使用 <code>webpack-bundle-analyzer</code> 插件来分析你 webpack 输出的 bundle。你还可以通过 CLI 的 <code>--analyze</code> flag 调用它</p> <pre><code class="hljs language-bash">npx webpack --analyze</code></pre> <blockquote class="warning"> <p>请确保你的项目中安装了 <code>webpack-bundle-analyzer</code>，否则 CLI 会提示你安装它。</p> </blockquote> <h2 id="progress">Progress <a href="#progress" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>如需查看 webpack 的编译进度，你可以使用 <code>--progress</code> flag。</p> <pre><code class="hljs language-bash">npx webpack --progress</code></pre> <p>如需收集编译过程中每一步的 profile 数据，你可以将 <code>profile</code> 作为值传递给 <code>--progress</code> flag。</p> <pre><code class="hljs language-bash">npx webpack --progress<span class="token operator">=</span>profile</code></pre> <h2 id="pass-cli-arguments-to-nodejs">将 CLI 参数传递给 Node.js <a href="#pass-cli-arguments-to-nodejs" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>将参数直接传递给 Node.js 进程，你可以使用 <code>NODE_OPTIONS</code> 选项。</p> <p>例如，将 Node.js 进程的内存限制增加到 4 GB。</p> <pre><code class="hljs language-bash"><span class="token assign-left variable">NODE_OPTIONS</span><span class="token operator">=</span><span class="token string">"--max-old-space-size=4096"</span> webpack</code></pre> <p>此外，你也可以将多个选项传递给 Node.js 进程。</p> <pre><code class="hljs language-bash"><span class="token assign-left variable">NODE_OPTIONS</span><span class="token operator">=</span><span class="token string">"--max-old-space-size=4096 -r /path/to/preload/file.js"/*tpa=https://webpack.docschina.org/--max-old-space-size=4096 -r /path/to/preload/file.js*/</span> webpack</code></pre> <h2 id="Exit-codes-and-their-meanings">Exit codes and their meanings<a href="#Exit-codes-and-their-meanings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th>Exit Code</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Exit Code"><span><code>0</code></span></td> <td data-th="Description"><span>Success</span></td> </tr> <tr> <td data-th="Exit Code"><span><code>1</code></span></td> <td data-th="Description"><span>Errors from webpack</span></td> </tr> <tr> <td data-th="Exit Code"><span><code>2</code></span></td> <td data-th="Description"><span>Configuration/options problem or an internal error</span></td> </tr> </tbody> </table> '}}]);